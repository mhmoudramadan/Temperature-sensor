
TEMP_SENSOR_DRIVER_PRO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004ada  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  00004ada  00004b6e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001b  00800082  00800082  00004b90  2**0
                  ALLOC
  3 .stab         00005f64  00000000  00000000  00004b90  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000026f5  00000000  00000000  0000aaf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000d1e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  0000d349  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000d4d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000f51d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0001061e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  000115a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  00011720  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  000119e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00012270  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 cc 0e 	jmp	0x1d98	; 0x1d98 <__vector_1>
       8:	0c 94 f9 0e 	jmp	0x1df2	; 0x1df2 <__vector_2>
       c:	0c 94 26 0f 	jmp	0x1e4c	; 0x1e4c <__vector_3>
      10:	0c 94 9f 09 	jmp	0x133e	; 0x133e <__vector_4>
      14:	0c 94 cc 09 	jmp	0x1398	; 0x1398 <__vector_5>
      18:	0c 94 85 0b 	jmp	0x170a	; 0x170a <__vector_6>
      1c:	0c 94 fe 0a 	jmp	0x15fc	; 0x15fc <__vector_7>
      20:	0c 94 2b 0b 	jmp	0x1656	; 0x1656 <__vector_8>
      24:	0c 94 58 0b 	jmp	0x16b0	; 0x16b0 <__vector_9>
      28:	0c 94 34 0c 	jmp	0x1868	; 0x1868 <__vector_10>
      2c:	0c 94 61 0c 	jmp	0x18c2	; 0x18c2 <__vector_11>
      30:	0c 94 35 0d 	jmp	0x1a6a	; 0x1a6a <__vector_12>
      34:	0c 94 51 07 	jmp	0xea2	; 0xea2 <__vector_13>
      38:	0c 94 7e 07 	jmp	0xefc	; 0xefc <__vector_14>
      3c:	0c 94 24 07 	jmp	0xe48	; 0xe48 <__vector_15>
      40:	0c 94 e7 13 	jmp	0x27ce	; 0x27ce <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ed       	ldi	r30, 0xDA	; 218
      68:	fa e4       	ldi	r31, 0x4A	; 74
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 38       	cpi	r26, 0x82	; 130
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 e8       	ldi	r26, 0x82	; 130
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 39       	cpi	r26, 0x9D	; 157
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 8f 24 	call	0x491e	; 0x491e <main>
      8a:	0c 94 6b 25 	jmp	0x4ad6	; 0x4ad6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 34 25 	jmp	0x4a68	; 0x4a68 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a9 e6       	ldi	r26, 0x69	; 105
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 50 25 	jmp	0x4aa0	; 0x4aa0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 40 25 	jmp	0x4a80	; 0x4a80 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 5c 25 	jmp	0x4ab8	; 0x4ab8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 40 25 	jmp	0x4a80	; 0x4a80 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 5c 25 	jmp	0x4ab8	; 0x4ab8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 34 25 	jmp	0x4a68	; 0x4a68 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	89 e6       	ldi	r24, 0x69	; 105
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 50 25 	jmp	0x4aa0	; 0x4aa0 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 3c 25 	jmp	0x4a78	; 0x4a78 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	69 e6       	ldi	r22, 0x69	; 105
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 58 25 	jmp	0x4ab0	; 0x4ab0 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 40 25 	jmp	0x4a80	; 0x4a80 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 5c 25 	jmp	0x4ab8	; 0x4ab8 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 40 25 	jmp	0x4a80	; 0x4a80 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 5c 25 	jmp	0x4ab8	; 0x4ab8 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 40 25 	jmp	0x4a80	; 0x4a80 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 5c 25 	jmp	0x4ab8	; 0x4ab8 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 44 25 	jmp	0x4a88	; 0x4a88 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 60 25 	jmp	0x4ac0	; 0x4ac0 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <MUART_VidInit>:
#include"MUART_Private.h"
#include"MUART_Config.h"

void (*CALLBACK) (void);
 void MUART_VidInit(void)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	0f 92       	push	r0
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
	 uint8 Loc_uint8TempRegister=0;
     ca8:	19 82       	std	Y+1, r1	; 0x01
	 SET_BIT(Loc_uint8TempRegister,7);
     caa:	89 81       	ldd	r24, Y+1	; 0x01
     cac:	80 68       	ori	r24, 0x80	; 128
     cae:	89 83       	std	Y+1, r24	; 0x01
	   /*Mode UART Select */
#if UART_SELECTMODE == UART_ASYNCHRONOUS
	 CLR_BIT(Loc_uint8TempRegister,6);
     cb0:	89 81       	ldd	r24, Y+1	; 0x01
     cb2:	8f 7b       	andi	r24, 0xBF	; 191
     cb4:	89 83       	std	Y+1, r24	; 0x01
#error"UART Mode Select Option Is Not Valid.."
#endif

	 /*UART Parity Mode Option CHECK*/
#if UART_PARITYCHECK_MODE   == PARTIYCHECK_DISABLED
	 CLR_BIT(Loc_uint8TempRegister,4);
     cb6:	89 81       	ldd	r24, Y+1	; 0x01
     cb8:	8f 7e       	andi	r24, 0xEF	; 239
     cba:	89 83       	std	Y+1, r24	; 0x01
	 CLR_BIT(Loc_uint8TempRegister,4);
     cbc:	89 81       	ldd	r24, Y+1	; 0x01
     cbe:	8f 7e       	andi	r24, 0xEF	; 239
     cc0:	89 83       	std	Y+1, r24	; 0x01
#error"PARTIY Check Option Is Not Valid.."
#endif

	 /*STOP Bit Option*/
#if UART_STOPBIT == ONE_BIT
	 CLR_BIT(Loc_uint8TempRegister,3);
     cc2:	89 81       	ldd	r24, Y+1	; 0x01
     cc4:	87 7f       	andi	r24, 0xF7	; 247
     cc6:	89 83       	std	Y+1, r24	; 0x01
#elif UART_NUMBEROFDATA_BIT==CHAR_7Bit
	 CLR_BIT(Loc_uint8TempRegister,1);
	 SET_BIT(Loc_uint8TempRegister,2);
	 CLR_BIT(UCSRB,2);
#elif UART_NUMBEROFDATA_BIT==CHAR_8Bit
	 SET_BIT(Loc_uint8TempRegister,1);
     cc8:	89 81       	ldd	r24, Y+1	; 0x01
     cca:	82 60       	ori	r24, 0x02	; 2
     ccc:	89 83       	std	Y+1, r24	; 0x01
	 SET_BIT(Loc_uint8TempRegister,2);
     cce:	89 81       	ldd	r24, Y+1	; 0x01
     cd0:	84 60       	ori	r24, 0x04	; 4
     cd2:	89 83       	std	Y+1, r24	; 0x01
	 CLR_BIT(UCSRB,2);
     cd4:	aa e2       	ldi	r26, 0x2A	; 42
     cd6:	b0 e0       	ldi	r27, 0x00	; 0
     cd8:	ea e2       	ldi	r30, 0x2A	; 42
     cda:	f0 e0       	ldi	r31, 0x00	; 0
     cdc:	80 81       	ld	r24, Z
     cde:	8b 7f       	andi	r24, 0xFB	; 251
     ce0:	8c 93       	st	X, r24
	 SET_BIT(Loc_uint8TempRegister,2);
	 SET_BIT(UCSRB,2);
#else
	 #error"Data Bit Option Is Not Valid.."
#endif
	 UCSRC=Loc_uint8TempRegister;
     ce2:	e0 e4       	ldi	r30, 0x40	; 64
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	89 81       	ldd	r24, Y+1	; 0x01
     ce8:	80 83       	st	Z, r24
	 /*Set BaudRate -->9600*/
	 UBRRL=UART_BAUDRATE;
     cea:	e9 e2       	ldi	r30, 0x29	; 41
     cec:	f0 e0       	ldi	r31, 0x00	; 0
     cee:	87 e6       	ldi	r24, 0x67	; 103
     cf0:	80 83       	st	Z, r24
	          /*Enable Receiver*/
	 SET_BIT(UCSRB,4);
     cf2:	aa e2       	ldi	r26, 0x2A	; 42
     cf4:	b0 e0       	ldi	r27, 0x00	; 0
     cf6:	ea e2       	ldi	r30, 0x2A	; 42
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	80 81       	ld	r24, Z
     cfc:	80 61       	ori	r24, 0x10	; 16
     cfe:	8c 93       	st	X, r24
	          /*Enable transmit*/
	 SET_BIT(UCSRB,3);
     d00:	aa e2       	ldi	r26, 0x2A	; 42
     d02:	b0 e0       	ldi	r27, 0x00	; 0
     d04:	ea e2       	ldi	r30, 0x2A	; 42
     d06:	f0 e0       	ldi	r31, 0x00	; 0
     d08:	80 81       	ld	r24, Z
     d0a:	88 60       	ori	r24, 0x08	; 8
     d0c:	8c 93       	st	X, r24
	          /*Enable Transmit TX Interrupt*/
	 SET_BIT(UCSRB,6);
     d0e:	aa e2       	ldi	r26, 0x2A	; 42
     d10:	b0 e0       	ldi	r27, 0x00	; 0
     d12:	ea e2       	ldi	r30, 0x2A	; 42
     d14:	f0 e0       	ldi	r31, 0x00	; 0
     d16:	80 81       	ld	r24, Z
     d18:	80 64       	ori	r24, 0x40	; 64
     d1a:	8c 93       	st	X, r24
	          /*Enable Receiver RX Interrupt*/
	 SET_BIT(UCSRB,7);
     d1c:	aa e2       	ldi	r26, 0x2A	; 42
     d1e:	b0 e0       	ldi	r27, 0x00	; 0
     d20:	ea e2       	ldi	r30, 0x2A	; 42
     d22:	f0 e0       	ldi	r31, 0x00	; 0
     d24:	80 81       	ld	r24, Z
     d26:	80 68       	ori	r24, 0x80	; 128
     d28:	8c 93       	st	X, r24
	          /*Data Register Interrupt Enable*/
	 SET_BIT(UCSRB,5);
     d2a:	aa e2       	ldi	r26, 0x2A	; 42
     d2c:	b0 e0       	ldi	r27, 0x00	; 0
     d2e:	ea e2       	ldi	r30, 0x2A	; 42
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	80 81       	ld	r24, Z
     d34:	80 62       	ori	r24, 0x20	; 32
     d36:	8c 93       	st	X, r24

 }
     d38:	0f 90       	pop	r0
     d3a:	cf 91       	pop	r28
     d3c:	df 91       	pop	r29
     d3e:	08 95       	ret

00000d40 <MUART_VidSendChar>:
 void MUART_VidSendChar(uint8 copy_uint8Char)
 {
     d40:	df 93       	push	r29
     d42:	cf 93       	push	r28
     d44:	0f 92       	push	r0
     d46:	cd b7       	in	r28, 0x3d	; 61
     d48:	de b7       	in	r29, 0x3e	; 62
     d4a:	89 83       	std	Y+1, r24	; 0x01
	 while(GET_BIT(UCSRA,5==0));
     d4c:	eb e2       	ldi	r30, 0x2B	; 43
     d4e:	f0 e0       	ldi	r31, 0x00	; 0
     d50:	80 81       	ld	r24, Z
     d52:	82 95       	swap	r24
     d54:	86 95       	lsr	r24
     d56:	87 70       	andi	r24, 0x07	; 7
     d58:	88 23       	and	r24, r24
     d5a:	c1 f3       	breq	.-16     	; 0xd4c <MUART_VidSendChar+0xc>
	 UDR=copy_uint8Char;
     d5c:	ec e2       	ldi	r30, 0x2C	; 44
     d5e:	f0 e0       	ldi	r31, 0x00	; 0
     d60:	89 81       	ldd	r24, Y+1	; 0x01
     d62:	80 83       	st	Z, r24
 }
     d64:	0f 90       	pop	r0
     d66:	cf 91       	pop	r28
     d68:	df 91       	pop	r29
     d6a:	08 95       	ret

00000d6c <MUART_vidSendString>:
 void MUART_vidSendString(uint8 *copy_uint8String)
 {
     d6c:	df 93       	push	r29
     d6e:	cf 93       	push	r28
     d70:	00 d0       	rcall	.+0      	; 0xd72 <MUART_vidSendString+0x6>
     d72:	0f 92       	push	r0
     d74:	cd b7       	in	r28, 0x3d	; 61
     d76:	de b7       	in	r29, 0x3e	; 62
     d78:	9b 83       	std	Y+3, r25	; 0x03
     d7a:	8a 83       	std	Y+2, r24	; 0x02
	 uint8 Loc_uint8count=0;
     d7c:	19 82       	std	Y+1, r1	; 0x01
     d7e:	0e c0       	rjmp	.+28     	; 0xd9c <MUART_vidSendString+0x30>
	 while(copy_uint8String[Loc_uint8count]!='\0')
	 {
		MUART_VidSendChar(copy_uint8String[Loc_uint8count]);
     d80:	89 81       	ldd	r24, Y+1	; 0x01
     d82:	28 2f       	mov	r18, r24
     d84:	30 e0       	ldi	r19, 0x00	; 0
     d86:	8a 81       	ldd	r24, Y+2	; 0x02
     d88:	9b 81       	ldd	r25, Y+3	; 0x03
     d8a:	fc 01       	movw	r30, r24
     d8c:	e2 0f       	add	r30, r18
     d8e:	f3 1f       	adc	r31, r19
     d90:	80 81       	ld	r24, Z
     d92:	0e 94 a0 06 	call	0xd40	; 0xd40 <MUART_VidSendChar>
		Loc_uint8count++;
     d96:	89 81       	ldd	r24, Y+1	; 0x01
     d98:	8f 5f       	subi	r24, 0xFF	; 255
     d9a:	89 83       	std	Y+1, r24	; 0x01
	 UDR=copy_uint8Char;
 }
 void MUART_vidSendString(uint8 *copy_uint8String)
 {
	 uint8 Loc_uint8count=0;
	 while(copy_uint8String[Loc_uint8count]!='\0')
     d9c:	89 81       	ldd	r24, Y+1	; 0x01
     d9e:	28 2f       	mov	r18, r24
     da0:	30 e0       	ldi	r19, 0x00	; 0
     da2:	8a 81       	ldd	r24, Y+2	; 0x02
     da4:	9b 81       	ldd	r25, Y+3	; 0x03
     da6:	fc 01       	movw	r30, r24
     da8:	e2 0f       	add	r30, r18
     daa:	f3 1f       	adc	r31, r19
     dac:	80 81       	ld	r24, Z
     dae:	88 23       	and	r24, r24
     db0:	39 f7       	brne	.-50     	; 0xd80 <MUART_vidSendString+0x14>
	 {
		MUART_VidSendChar(copy_uint8String[Loc_uint8count]);
		Loc_uint8count++;
	 }
 }
     db2:	0f 90       	pop	r0
     db4:	0f 90       	pop	r0
     db6:	0f 90       	pop	r0
     db8:	cf 91       	pop	r28
     dba:	df 91       	pop	r29
     dbc:	08 95       	ret

00000dbe <MUART_uint8ReciverChar>:
 uint8 MUART_uint8ReciverChar(void)
 {
     dbe:	df 93       	push	r29
     dc0:	cf 93       	push	r28
     dc2:	cd b7       	in	r28, 0x3d	; 61
     dc4:	de b7       	in	r29, 0x3e	; 62
	 while(GET_BIT(UCSRA,7)==0);
     dc6:	eb e2       	ldi	r30, 0x2B	; 43
     dc8:	f0 e0       	ldi	r31, 0x00	; 0
     dca:	80 81       	ld	r24, Z
     dcc:	88 23       	and	r24, r24
     dce:	dc f7       	brge	.-10     	; 0xdc6 <MUART_uint8ReciverChar+0x8>
	 return UDR;
     dd0:	ec e2       	ldi	r30, 0x2C	; 44
     dd2:	f0 e0       	ldi	r31, 0x00	; 0
     dd4:	80 81       	ld	r24, Z
 }
     dd6:	cf 91       	pop	r28
     dd8:	df 91       	pop	r29
     dda:	08 95       	ret

00000ddc <MUART_VidSetTXCallBack>:
 void MUART_VidSetTXCallBack(void(*PtrToFun)(void))
 {
     ddc:	df 93       	push	r29
     dde:	cf 93       	push	r28
     de0:	00 d0       	rcall	.+0      	; 0xde2 <MUART_VidSetTXCallBack+0x6>
     de2:	cd b7       	in	r28, 0x3d	; 61
     de4:	de b7       	in	r29, 0x3e	; 62
     de6:	9a 83       	std	Y+2, r25	; 0x02
     de8:	89 83       	std	Y+1, r24	; 0x01
	 CALLBACK=PtrToFun;
     dea:	89 81       	ldd	r24, Y+1	; 0x01
     dec:	9a 81       	ldd	r25, Y+2	; 0x02
     dee:	90 93 92 00 	sts	0x0092, r25
     df2:	80 93 91 00 	sts	0x0091, r24
 }
     df6:	0f 90       	pop	r0
     df8:	0f 90       	pop	r0
     dfa:	cf 91       	pop	r28
     dfc:	df 91       	pop	r29
     dfe:	08 95       	ret

00000e00 <MUART_VidSetRXCallBack>:
 void MUART_VidSetRXCallBack(void(*PtrToFun)(void))
 {
     e00:	df 93       	push	r29
     e02:	cf 93       	push	r28
     e04:	00 d0       	rcall	.+0      	; 0xe06 <MUART_VidSetRXCallBack+0x6>
     e06:	cd b7       	in	r28, 0x3d	; 61
     e08:	de b7       	in	r29, 0x3e	; 62
     e0a:	9a 83       	std	Y+2, r25	; 0x02
     e0c:	89 83       	std	Y+1, r24	; 0x01
	 CALLBACK=PtrToFun;
     e0e:	89 81       	ldd	r24, Y+1	; 0x01
     e10:	9a 81       	ldd	r25, Y+2	; 0x02
     e12:	90 93 92 00 	sts	0x0092, r25
     e16:	80 93 91 00 	sts	0x0091, r24
 }
     e1a:	0f 90       	pop	r0
     e1c:	0f 90       	pop	r0
     e1e:	cf 91       	pop	r28
     e20:	df 91       	pop	r29
     e22:	08 95       	ret

00000e24 <MUART_VidUSART_REG_SetCallBack>:
 void MUART_VidUSART_REG_SetCallBack(void(*PtrToFun)(void))
 {
     e24:	df 93       	push	r29
     e26:	cf 93       	push	r28
     e28:	00 d0       	rcall	.+0      	; 0xe2a <MUART_VidUSART_REG_SetCallBack+0x6>
     e2a:	cd b7       	in	r28, 0x3d	; 61
     e2c:	de b7       	in	r29, 0x3e	; 62
     e2e:	9a 83       	std	Y+2, r25	; 0x02
     e30:	89 83       	std	Y+1, r24	; 0x01
	 CALLBACK=PtrToFun;
     e32:	89 81       	ldd	r24, Y+1	; 0x01
     e34:	9a 81       	ldd	r25, Y+2	; 0x02
     e36:	90 93 92 00 	sts	0x0092, r25
     e3a:	80 93 91 00 	sts	0x0091, r24
 }
     e3e:	0f 90       	pop	r0
     e40:	0f 90       	pop	r0
     e42:	cf 91       	pop	r28
     e44:	df 91       	pop	r29
     e46:	08 95       	ret

00000e48 <__vector_15>:
  /*TX*/

 void __vector_15(void)   __attribute__((signal));
 void __vector_15(void)
 {
     e48:	1f 92       	push	r1
     e4a:	0f 92       	push	r0
     e4c:	0f b6       	in	r0, 0x3f	; 63
     e4e:	0f 92       	push	r0
     e50:	11 24       	eor	r1, r1
     e52:	2f 93       	push	r18
     e54:	3f 93       	push	r19
     e56:	4f 93       	push	r20
     e58:	5f 93       	push	r21
     e5a:	6f 93       	push	r22
     e5c:	7f 93       	push	r23
     e5e:	8f 93       	push	r24
     e60:	9f 93       	push	r25
     e62:	af 93       	push	r26
     e64:	bf 93       	push	r27
     e66:	ef 93       	push	r30
     e68:	ff 93       	push	r31
     e6a:	df 93       	push	r29
     e6c:	cf 93       	push	r28
     e6e:	cd b7       	in	r28, 0x3d	; 61
     e70:	de b7       	in	r29, 0x3e	; 62
	 CALLBACK();
     e72:	e0 91 91 00 	lds	r30, 0x0091
     e76:	f0 91 92 00 	lds	r31, 0x0092
     e7a:	09 95       	icall
 }
     e7c:	cf 91       	pop	r28
     e7e:	df 91       	pop	r29
     e80:	ff 91       	pop	r31
     e82:	ef 91       	pop	r30
     e84:	bf 91       	pop	r27
     e86:	af 91       	pop	r26
     e88:	9f 91       	pop	r25
     e8a:	8f 91       	pop	r24
     e8c:	7f 91       	pop	r23
     e8e:	6f 91       	pop	r22
     e90:	5f 91       	pop	r21
     e92:	4f 91       	pop	r20
     e94:	3f 91       	pop	r19
     e96:	2f 91       	pop	r18
     e98:	0f 90       	pop	r0
     e9a:	0f be       	out	0x3f, r0	; 63
     e9c:	0f 90       	pop	r0
     e9e:	1f 90       	pop	r1
     ea0:	18 95       	reti

00000ea2 <__vector_13>:
 /*RX*/
 void __vector_13(void)   __attribute__((signal));
 void __vector_13(void)
 {
     ea2:	1f 92       	push	r1
     ea4:	0f 92       	push	r0
     ea6:	0f b6       	in	r0, 0x3f	; 63
     ea8:	0f 92       	push	r0
     eaa:	11 24       	eor	r1, r1
     eac:	2f 93       	push	r18
     eae:	3f 93       	push	r19
     eb0:	4f 93       	push	r20
     eb2:	5f 93       	push	r21
     eb4:	6f 93       	push	r22
     eb6:	7f 93       	push	r23
     eb8:	8f 93       	push	r24
     eba:	9f 93       	push	r25
     ebc:	af 93       	push	r26
     ebe:	bf 93       	push	r27
     ec0:	ef 93       	push	r30
     ec2:	ff 93       	push	r31
     ec4:	df 93       	push	r29
     ec6:	cf 93       	push	r28
     ec8:	cd b7       	in	r28, 0x3d	; 61
     eca:	de b7       	in	r29, 0x3e	; 62
	 CALLBACK();
     ecc:	e0 91 91 00 	lds	r30, 0x0091
     ed0:	f0 91 92 00 	lds	r31, 0x0092
     ed4:	09 95       	icall
 }
     ed6:	cf 91       	pop	r28
     ed8:	df 91       	pop	r29
     eda:	ff 91       	pop	r31
     edc:	ef 91       	pop	r30
     ede:	bf 91       	pop	r27
     ee0:	af 91       	pop	r26
     ee2:	9f 91       	pop	r25
     ee4:	8f 91       	pop	r24
     ee6:	7f 91       	pop	r23
     ee8:	6f 91       	pop	r22
     eea:	5f 91       	pop	r21
     eec:	4f 91       	pop	r20
     eee:	3f 91       	pop	r19
     ef0:	2f 91       	pop	r18
     ef2:	0f 90       	pop	r0
     ef4:	0f be       	out	0x3f, r0	; 63
     ef6:	0f 90       	pop	r0
     ef8:	1f 90       	pop	r1
     efa:	18 95       	reti

00000efc <__vector_14>:
 /*UART DATA Register Empty*/
 void __vector_14(void)   __attribute__((signal));
 void __vector_14(void)
 {
     efc:	1f 92       	push	r1
     efe:	0f 92       	push	r0
     f00:	0f b6       	in	r0, 0x3f	; 63
     f02:	0f 92       	push	r0
     f04:	11 24       	eor	r1, r1
     f06:	2f 93       	push	r18
     f08:	3f 93       	push	r19
     f0a:	4f 93       	push	r20
     f0c:	5f 93       	push	r21
     f0e:	6f 93       	push	r22
     f10:	7f 93       	push	r23
     f12:	8f 93       	push	r24
     f14:	9f 93       	push	r25
     f16:	af 93       	push	r26
     f18:	bf 93       	push	r27
     f1a:	ef 93       	push	r30
     f1c:	ff 93       	push	r31
     f1e:	df 93       	push	r29
     f20:	cf 93       	push	r28
     f22:	cd b7       	in	r28, 0x3d	; 61
     f24:	de b7       	in	r29, 0x3e	; 62
	 CALLBACK();
     f26:	e0 91 91 00 	lds	r30, 0x0091
     f2a:	f0 91 92 00 	lds	r31, 0x0092
     f2e:	09 95       	icall
 }
     f30:	cf 91       	pop	r28
     f32:	df 91       	pop	r29
     f34:	ff 91       	pop	r31
     f36:	ef 91       	pop	r30
     f38:	bf 91       	pop	r27
     f3a:	af 91       	pop	r26
     f3c:	9f 91       	pop	r25
     f3e:	8f 91       	pop	r24
     f40:	7f 91       	pop	r23
     f42:	6f 91       	pop	r22
     f44:	5f 91       	pop	r21
     f46:	4f 91       	pop	r20
     f48:	3f 91       	pop	r19
     f4a:	2f 91       	pop	r18
     f4c:	0f 90       	pop	r0
     f4e:	0f be       	out	0x3f, r0	; 63
     f50:	0f 90       	pop	r0
     f52:	1f 90       	pop	r1
     f54:	18 95       	reti

00000f56 <MTWI_VidInitMaster>:
#include "../MTWI/MI2C_Private.h"

/*TWI Init as a master*/

void MTWI_VidInitMaster(uint8 copy_uint8Address)
{
     f56:	df 93       	push	r29
     f58:	cf 93       	push	r28
     f5a:	0f 92       	push	r0
     f5c:	cd b7       	in	r28, 0x3d	; 61
     f5e:	de b7       	in	r29, 0x3e	; 62
     f60:	89 83       	std	Y+1, r24	; 0x01
	/*Enable Ack*/
	SET_BIT(TWCR,6);
     f62:	a6 e5       	ldi	r26, 0x56	; 86
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	e6 e5       	ldi	r30, 0x56	; 86
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	80 81       	ld	r24, Z
     f6c:	80 64       	ori	r24, 0x40	; 64
     f6e:	8c 93       	st	X, r24
	/*Set SCL Freq to 400KHZ ,With 16MHZ system Freq--> "Rate Bit" */
	TWBR=3;
     f70:	e0 e2       	ldi	r30, 0x20	; 32
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	83 e0       	ldi	r24, 0x03	; 3
     f76:	80 83       	st	Z, r24
	/*Set PreScaler =1 */
	CLR_BIT(TWSR,1);
     f78:	a1 e2       	ldi	r26, 0x21	; 33
     f7a:	b0 e0       	ldi	r27, 0x00	; 0
     f7c:	e1 e2       	ldi	r30, 0x21	; 33
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	80 81       	ld	r24, Z
     f82:	8d 7f       	andi	r24, 0xFD	; 253
     f84:	8c 93       	st	X, r24
	CLR_BIT(TWSR,0);
     f86:	a1 e2       	ldi	r26, 0x21	; 33
     f88:	b0 e0       	ldi	r27, 0x00	; 0
     f8a:	e1 e2       	ldi	r30, 0x21	; 33
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	80 81       	ld	r24, Z
     f90:	8e 7f       	andi	r24, 0xFE	; 254
     f92:	8c 93       	st	X, r24
	/*Enable TWI*/
	SET_BIT(TWCR,2);
     f94:	a6 e5       	ldi	r26, 0x56	; 86
     f96:	b0 e0       	ldi	r27, 0x00	; 0
     f98:	e6 e5       	ldi	r30, 0x56	; 86
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	80 81       	ld	r24, Z
     f9e:	84 60       	ori	r24, 0x04	; 4
     fa0:	8c 93       	st	X, r24
	/*write Address */
	if(copy_uint8Address !=0)
     fa2:	89 81       	ldd	r24, Y+1	; 0x01
     fa4:	88 23       	and	r24, r24
     fa6:	29 f0       	breq	.+10     	; 0xfb2 <MTWI_VidInitMaster+0x5c>
	{
		TWAR=copy_uint8Address<<1; //3ashn homa 7 bit bs
     fa8:	e2 e2       	ldi	r30, 0x22	; 34
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	89 81       	ldd	r24, Y+1	; 0x01
     fae:	88 0f       	add	r24, r24
     fb0:	80 83       	st	Z, r24
	}
	else
	{
		//Nothing
	}
}
     fb2:	0f 90       	pop	r0
     fb4:	cf 91       	pop	r28
     fb6:	df 91       	pop	r29
     fb8:	08 95       	ret

00000fba <MTWI_VidInitSalve>:

/*TWI Init as a Salve*/

void MTWI_VidInitSalve(uint8 copy_uint8Address)
{
     fba:	df 93       	push	r29
     fbc:	cf 93       	push	r28
     fbe:	0f 92       	push	r0
     fc0:	cd b7       	in	r28, 0x3d	; 61
     fc2:	de b7       	in	r29, 0x3e	; 62
     fc4:	89 83       	std	Y+1, r24	; 0x01
	/*Enable Ack*/
	SET_BIT(TWCR,6);
     fc6:	a6 e5       	ldi	r26, 0x56	; 86
     fc8:	b0 e0       	ldi	r27, 0x00	; 0
     fca:	e6 e5       	ldi	r30, 0x56	; 86
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	80 81       	ld	r24, Z
     fd0:	80 64       	ori	r24, 0x40	; 64
     fd2:	8c 93       	st	X, r24
		/*Enable TWI*/
	SET_BIT(TWCR,2);
     fd4:	a6 e5       	ldi	r26, 0x56	; 86
     fd6:	b0 e0       	ldi	r27, 0x00	; 0
     fd8:	e6 e5       	ldi	r30, 0x56	; 86
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	80 81       	ld	r24, Z
     fde:	84 60       	ori	r24, 0x04	; 4
     fe0:	8c 93       	st	X, r24
	/*write Address */
	if(copy_uint8Address !=0)
     fe2:	89 81       	ldd	r24, Y+1	; 0x01
     fe4:	88 23       	and	r24, r24
     fe6:	29 f0       	breq	.+10     	; 0xff2 <MTWI_VidInitSalve+0x38>
	{
		TWAR=copy_uint8Address<<1; //3ashn homa 7 bit bs
     fe8:	e2 e2       	ldi	r30, 0x22	; 34
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	89 81       	ldd	r24, Y+1	; 0x01
     fee:	88 0f       	add	r24, r24
     ff0:	80 83       	st	Z, r24
	}
	else
	{
		//Nothing
	}
}
     ff2:	0f 90       	pop	r0
     ff4:	cf 91       	pop	r28
     ff6:	df 91       	pop	r29
     ff8:	08 95       	ret

00000ffa <MTWI_SendSatrtCondition>:

/*TWI Start condition*/
TWI_ErrorState MTWI_SendSatrtCondition(void)
{
     ffa:	df 93       	push	r29
     ffc:	cf 93       	push	r28
     ffe:	0f 92       	push	r0
    1000:	cd b7       	in	r28, 0x3d	; 61
    1002:	de b7       	in	r29, 0x3e	; 62
	TWI_ErrorState Loc_Error=NoError;
    1004:	19 82       	std	Y+1, r1	; 0x01
	/*send satrt condition*/
	SET_BIT(TWCR,5);
    1006:	a6 e5       	ldi	r26, 0x56	; 86
    1008:	b0 e0       	ldi	r27, 0x00	; 0
    100a:	e6 e5       	ldi	r30, 0x56	; 86
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	80 81       	ld	r24, Z
    1010:	80 62       	ori	r24, 0x20	; 32
    1012:	8c 93       	st	X, r24
	/*Clear  TWI flag*/
	SET_BIT(TWCR,7);
    1014:	a6 e5       	ldi	r26, 0x56	; 86
    1016:	b0 e0       	ldi	r27, 0x00	; 0
    1018:	e6 e5       	ldi	r30, 0x56	; 86
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	80 81       	ld	r24, Z
    101e:	80 68       	ori	r24, 0x80	; 128
    1020:	8c 93       	st	X, r24
	/*wait until the operation finish and Flag Is Rasised*/
	while(GET_BIT(TWCR,7)==0);
    1022:	e6 e5       	ldi	r30, 0x56	; 86
    1024:	f0 e0       	ldi	r31, 0x00	; 0
    1026:	80 81       	ld	r24, Z
    1028:	88 23       	and	r24, r24
    102a:	dc f7       	brge	.-10     	; 0x1022 <MTWI_SendSatrtCondition+0x28>
	/*Check the operation statues*/
	if((TWSR&0xF8) != 0x08)
    102c:	e1 e2       	ldi	r30, 0x21	; 33
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	80 81       	ld	r24, Z
    1032:	88 2f       	mov	r24, r24
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	88 7f       	andi	r24, 0xF8	; 248
    1038:	90 70       	andi	r25, 0x00	; 0
    103a:	88 30       	cpi	r24, 0x08	; 8
    103c:	91 05       	cpc	r25, r1
    103e:	11 f0       	breq	.+4      	; 0x1044 <MTWI_SendSatrtCondition+0x4a>
	{
		Loc_Error=StartConditionError;
    1040:	81 e0       	ldi	r24, 0x01	; 1
    1042:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		/*Do nothing*/
	}
	return Loc_Error;
    1044:	89 81       	ldd	r24, Y+1	; 0x01
}
    1046:	0f 90       	pop	r0
    1048:	cf 91       	pop	r28
    104a:	df 91       	pop	r29
    104c:	08 95       	ret

0000104e <MTWI_SendSatrtRepeatedCondition>:
/*TWI Start Repeated Function*/
TWI_ErrorState  MTWI_SendSatrtRepeatedCondition(void)
{
    104e:	df 93       	push	r29
    1050:	cf 93       	push	r28
    1052:	0f 92       	push	r0
    1054:	cd b7       	in	r28, 0x3d	; 61
    1056:	de b7       	in	r29, 0x3e	; 62
	TWI_ErrorState Loc_Error=NoError;
    1058:	19 82       	std	Y+1, r1	; 0x01
		/*send satrt condition*/
		SET_BIT(TWCR,5);
    105a:	a6 e5       	ldi	r26, 0x56	; 86
    105c:	b0 e0       	ldi	r27, 0x00	; 0
    105e:	e6 e5       	ldi	r30, 0x56	; 86
    1060:	f0 e0       	ldi	r31, 0x00	; 0
    1062:	80 81       	ld	r24, Z
    1064:	80 62       	ori	r24, 0x20	; 32
    1066:	8c 93       	st	X, r24
		/*Clear  TWI flag*/
		SET_BIT(TWCR,7);
    1068:	a6 e5       	ldi	r26, 0x56	; 86
    106a:	b0 e0       	ldi	r27, 0x00	; 0
    106c:	e6 e5       	ldi	r30, 0x56	; 86
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	80 81       	ld	r24, Z
    1072:	80 68       	ori	r24, 0x80	; 128
    1074:	8c 93       	st	X, r24
		/*wait until the operation finish and Flag Is Rasised*/
		while(GET_BIT(TWCR,7)==0);
    1076:	e6 e5       	ldi	r30, 0x56	; 86
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	80 81       	ld	r24, Z
    107c:	88 23       	and	r24, r24
    107e:	dc f7       	brge	.-10     	; 0x1076 <MTWI_SendSatrtRepeatedCondition+0x28>
		/*Check the operation statues*/
		if((TWSR&0xF8) != 0x10)
    1080:	e1 e2       	ldi	r30, 0x21	; 33
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	80 81       	ld	r24, Z
    1086:	88 2f       	mov	r24, r24
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	88 7f       	andi	r24, 0xF8	; 248
    108c:	90 70       	andi	r25, 0x00	; 0
    108e:	80 31       	cpi	r24, 0x10	; 16
    1090:	91 05       	cpc	r25, r1
    1092:	11 f0       	breq	.+4      	; 0x1098 <MTWI_SendSatrtRepeatedCondition+0x4a>
		{
			Loc_Error=RepeatedStartConditionError;
    1094:	82 e0       	ldi	r24, 0x02	; 2
    1096:	89 83       	std	Y+1, r24	; 0x01
		}
		else
		{
			/*Do nothing*/
		}
		return Loc_Error;
    1098:	89 81       	ldd	r24, Y+1	; 0x01
}
    109a:	0f 90       	pop	r0
    109c:	cf 91       	pop	r28
    109e:	df 91       	pop	r29
    10a0:	08 95       	ret

000010a2 <MTWI_SendSalveAddressWithWrite>:
/*TWI send  SLave Address with Write*/
TWI_ErrorState MTWI_SendSalveAddressWithWrite(uint8 copy_uint8SalveAddress)
{
    10a2:	df 93       	push	r29
    10a4:	cf 93       	push	r28
    10a6:	00 d0       	rcall	.+0      	; 0x10a8 <MTWI_SendSalveAddressWithWrite+0x6>
    10a8:	cd b7       	in	r28, 0x3d	; 61
    10aa:	de b7       	in	r29, 0x3e	; 62
    10ac:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorState Loc_Error=NoError;
    10ae:	19 82       	std	Y+1, r1	; 0x01
	/*Send Salve Address --> 7 Bit with write */
	TWDR=copy_uint8SalveAddress<<1;
    10b0:	e3 e2       	ldi	r30, 0x23	; 35
    10b2:	f0 e0       	ldi	r31, 0x00	; 0
    10b4:	8a 81       	ldd	r24, Y+2	; 0x02
    10b6:	88 0f       	add	r24, r24
    10b8:	80 83       	st	Z, r24
	/*Set write Bit Request in The LSB in Data Regsiter*/
	CLR_BIT(TWDR,0);
    10ba:	a3 e2       	ldi	r26, 0x23	; 35
    10bc:	b0 e0       	ldi	r27, 0x00	; 0
    10be:	e3 e2       	ldi	r30, 0x23	; 35
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	80 81       	ld	r24, Z
    10c4:	8e 7f       	andi	r24, 0xFE	; 254
    10c6:	8c 93       	st	X, r24
	/*Clear Start Condition*/
	CLR_BIT(TWCR,5);
    10c8:	a6 e5       	ldi	r26, 0x56	; 86
    10ca:	b0 e0       	ldi	r27, 0x00	; 0
    10cc:	e6 e5       	ldi	r30, 0x56	; 86
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	80 81       	ld	r24, Z
    10d2:	8f 7d       	andi	r24, 0xDF	; 223
    10d4:	8c 93       	st	X, r24
	/*Clear interrupt TWI Flag*/
	SET_BIT(TWCR,7);
    10d6:	a6 e5       	ldi	r26, 0x56	; 86
    10d8:	b0 e0       	ldi	r27, 0x00	; 0
    10da:	e6 e5       	ldi	r30, 0x56	; 86
    10dc:	f0 e0       	ldi	r31, 0x00	; 0
    10de:	80 81       	ld	r24, Z
    10e0:	80 68       	ori	r24, 0x80	; 128
    10e2:	8c 93       	st	X, r24
	/*wait until the operation finish and Flag Is Rasised*/
	while(GET_BIT(TWCR,7)==0);
    10e4:	e6 e5       	ldi	r30, 0x56	; 86
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	80 81       	ld	r24, Z
    10ea:	88 23       	and	r24, r24
    10ec:	dc f7       	brge	.-10     	; 0x10e4 <MTWI_SendSalveAddressWithWrite+0x42>
	/*Check the operation statues*/
	if((TWSR&0xF8) != 0x18)
    10ee:	e1 e2       	ldi	r30, 0x21	; 33
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	80 81       	ld	r24, Z
    10f4:	88 2f       	mov	r24, r24
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	88 7f       	andi	r24, 0xF8	; 248
    10fa:	90 70       	andi	r25, 0x00	; 0
    10fc:	88 31       	cpi	r24, 0x18	; 24
    10fe:	91 05       	cpc	r25, r1
    1100:	11 f0       	breq	.+4      	; 0x1106 <MTWI_SendSalveAddressWithWrite+0x64>
	{
		Loc_Error=SlaveAddressWriteError;
    1102:	83 e0       	ldi	r24, 0x03	; 3
    1104:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		/*Do nothing*/
	}
	return Loc_Error;
    1106:	89 81       	ldd	r24, Y+1	; 0x01
}
    1108:	0f 90       	pop	r0
    110a:	0f 90       	pop	r0
    110c:	cf 91       	pop	r28
    110e:	df 91       	pop	r29
    1110:	08 95       	ret

00001112 <MTWI_SendSalveAddressWithRead>:
/*TWI send SLave Address with Read*/
TWI_ErrorState MTWI_SendSalveAddressWithRead(uint8 copy_uint8SalveAddress)
{
    1112:	df 93       	push	r29
    1114:	cf 93       	push	r28
    1116:	00 d0       	rcall	.+0      	; 0x1118 <MTWI_SendSalveAddressWithRead+0x6>
    1118:	cd b7       	in	r28, 0x3d	; 61
    111a:	de b7       	in	r29, 0x3e	; 62
    111c:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorState Loc_Error=NoError;
    111e:	19 82       	std	Y+1, r1	; 0x01
	/*Send Salve Address --> 7 Bit with Read */
	TWDR=copy_uint8SalveAddress<<1;
    1120:	e3 e2       	ldi	r30, 0x23	; 35
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	8a 81       	ldd	r24, Y+2	; 0x02
    1126:	88 0f       	add	r24, r24
    1128:	80 83       	st	Z, r24
	/*Set read Bit Request in The LSB in Data Regsiter*/
	SET_BIT(TWDR,0);
    112a:	a3 e2       	ldi	r26, 0x23	; 35
    112c:	b0 e0       	ldi	r27, 0x00	; 0
    112e:	e3 e2       	ldi	r30, 0x23	; 35
    1130:	f0 e0       	ldi	r31, 0x00	; 0
    1132:	80 81       	ld	r24, Z
    1134:	81 60       	ori	r24, 0x01	; 1
    1136:	8c 93       	st	X, r24
	/*Clear Start Condition*/
	CLR_BIT(TWCR,5);
    1138:	a6 e5       	ldi	r26, 0x56	; 86
    113a:	b0 e0       	ldi	r27, 0x00	; 0
    113c:	e6 e5       	ldi	r30, 0x56	; 86
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	80 81       	ld	r24, Z
    1142:	8f 7d       	andi	r24, 0xDF	; 223
    1144:	8c 93       	st	X, r24
	/*Clear interrupt TWI Flag*/
	SET_BIT(TWCR,7);
    1146:	a6 e5       	ldi	r26, 0x56	; 86
    1148:	b0 e0       	ldi	r27, 0x00	; 0
    114a:	e6 e5       	ldi	r30, 0x56	; 86
    114c:	f0 e0       	ldi	r31, 0x00	; 0
    114e:	80 81       	ld	r24, Z
    1150:	80 68       	ori	r24, 0x80	; 128
    1152:	8c 93       	st	X, r24
	/*wait until the operation finish and Flag Is Rasised*/
	while(GET_BIT(TWCR,7)==0);
    1154:	e6 e5       	ldi	r30, 0x56	; 86
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	80 81       	ld	r24, Z
    115a:	88 23       	and	r24, r24
    115c:	dc f7       	brge	.-10     	; 0x1154 <MTWI_SendSalveAddressWithRead+0x42>
	/*Check the operation statues*/
	if((TWSR&0xF8) != 0x40)
    115e:	e1 e2       	ldi	r30, 0x21	; 33
    1160:	f0 e0       	ldi	r31, 0x00	; 0
    1162:	80 81       	ld	r24, Z
    1164:	88 2f       	mov	r24, r24
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	88 7f       	andi	r24, 0xF8	; 248
    116a:	90 70       	andi	r25, 0x00	; 0
    116c:	80 34       	cpi	r24, 0x40	; 64
    116e:	91 05       	cpc	r25, r1
    1170:	11 f0       	breq	.+4      	; 0x1176 <MTWI_SendSalveAddressWithRead+0x64>
	{
		Loc_Error=SlaveAddressReadError;
    1172:	84 e0       	ldi	r24, 0x04	; 4
    1174:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		/*Do nothing*/
	}
	return Loc_Error;
    1176:	89 81       	ldd	r24, Y+1	; 0x01
}
    1178:	0f 90       	pop	r0
    117a:	0f 90       	pop	r0
    117c:	cf 91       	pop	r28
    117e:	df 91       	pop	r29
    1180:	08 95       	ret

00001182 <MTWI_MasterWriteDataByte>:
/*TWI send data as a master*/
TWI_ErrorState MTWI_MasterWriteDataByte(uint8 copy_uint8Data)
{
    1182:	df 93       	push	r29
    1184:	cf 93       	push	r28
    1186:	00 d0       	rcall	.+0      	; 0x1188 <MTWI_MasterWriteDataByte+0x6>
    1188:	cd b7       	in	r28, 0x3d	; 61
    118a:	de b7       	in	r29, 0x3e	; 62
    118c:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorState Loc_Error=NoError;
    118e:	19 82       	std	Y+1, r1	; 0x01
	/*Send Data */
	TWDR=copy_uint8Data;
    1190:	e3 e2       	ldi	r30, 0x23	; 35
    1192:	f0 e0       	ldi	r31, 0x00	; 0
    1194:	8a 81       	ldd	r24, Y+2	; 0x02
    1196:	80 83       	st	Z, r24
	/*Clear interrupt TWI Flag*/
	SET_BIT(TWCR,7);
    1198:	a6 e5       	ldi	r26, 0x56	; 86
    119a:	b0 e0       	ldi	r27, 0x00	; 0
    119c:	e6 e5       	ldi	r30, 0x56	; 86
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	80 81       	ld	r24, Z
    11a2:	80 68       	ori	r24, 0x80	; 128
    11a4:	8c 93       	st	X, r24
	/*wait until the operation finish and Flag Is Rasised*/
	while(GET_BIT(TWCR,7)==0);
    11a6:	e6 e5       	ldi	r30, 0x56	; 86
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	80 81       	ld	r24, Z
    11ac:	88 23       	and	r24, r24
    11ae:	dc f7       	brge	.-10     	; 0x11a6 <MTWI_MasterWriteDataByte+0x24>
	/*Check the operation statues*/
	if((TWSR&0xF8) != 0x28)
    11b0:	e1 e2       	ldi	r30, 0x21	; 33
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	80 81       	ld	r24, Z
    11b6:	88 2f       	mov	r24, r24
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	88 7f       	andi	r24, 0xF8	; 248
    11bc:	90 70       	andi	r25, 0x00	; 0
    11be:	88 32       	cpi	r24, 0x28	; 40
    11c0:	91 05       	cpc	r25, r1
    11c2:	11 f0       	breq	.+4      	; 0x11c8 <MTWI_MasterWriteDataByte+0x46>
	{
		Loc_Error=MasterWriteByteError;
    11c4:	85 e0       	ldi	r24, 0x05	; 5
    11c6:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		/*Do nothing*/
	}
	return Loc_Error;
    11c8:	89 81       	ldd	r24, Y+1	; 0x01
}
    11ca:	0f 90       	pop	r0
    11cc:	0f 90       	pop	r0
    11ce:	cf 91       	pop	r28
    11d0:	df 91       	pop	r29
    11d2:	08 95       	ret

000011d4 <MTWI_MasterReadDataByte>:
/*TWI read data as a master*/
TWI_ErrorState MTWI_MasterReadDataByte(uint8 *copy_uint8Data)
{
    11d4:	df 93       	push	r29
    11d6:	cf 93       	push	r28
    11d8:	00 d0       	rcall	.+0      	; 0x11da <MTWI_MasterReadDataByte+0x6>
    11da:	0f 92       	push	r0
    11dc:	cd b7       	in	r28, 0x3d	; 61
    11de:	de b7       	in	r29, 0x3e	; 62
    11e0:	9b 83       	std	Y+3, r25	; 0x03
    11e2:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorState Loc_Error=NoError;
    11e4:	19 82       	std	Y+1, r1	; 0x01

	/*Clear interrupt TWI Flag*/
	SET_BIT(TWCR,7);
    11e6:	a6 e5       	ldi	r26, 0x56	; 86
    11e8:	b0 e0       	ldi	r27, 0x00	; 0
    11ea:	e6 e5       	ldi	r30, 0x56	; 86
    11ec:	f0 e0       	ldi	r31, 0x00	; 0
    11ee:	80 81       	ld	r24, Z
    11f0:	80 68       	ori	r24, 0x80	; 128
    11f2:	8c 93       	st	X, r24
	/*wait until the operation finish and Flag Is Rasised*/
	while(GET_BIT(TWCR,7)==0);
    11f4:	e6 e5       	ldi	r30, 0x56	; 86
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	80 81       	ld	r24, Z
    11fa:	88 23       	and	r24, r24
    11fc:	dc f7       	brge	.-10     	; 0x11f4 <MTWI_MasterReadDataByte+0x20>
	/*Check the operation statues*/
	if((TWSR&0xF8) != 0x50)
    11fe:	e1 e2       	ldi	r30, 0x21	; 33
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	80 81       	ld	r24, Z
    1204:	88 2f       	mov	r24, r24
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	88 7f       	andi	r24, 0xF8	; 248
    120a:	90 70       	andi	r25, 0x00	; 0
    120c:	80 35       	cpi	r24, 0x50	; 80
    120e:	91 05       	cpc	r25, r1
    1210:	19 f0       	breq	.+6      	; 0x1218 <MTWI_MasterReadDataByte+0x44>
	{
		Loc_Error=MasterReadByteError;
    1212:	86 e0       	ldi	r24, 0x06	; 6
    1214:	89 83       	std	Y+1, r24	; 0x01
    1216:	06 c0       	rjmp	.+12     	; 0x1224 <MTWI_MasterReadDataByte+0x50>
	}
	else
	{
		*copy_uint8Data=TWDR;
    1218:	e3 e2       	ldi	r30, 0x23	; 35
    121a:	f0 e0       	ldi	r31, 0x00	; 0
    121c:	80 81       	ld	r24, Z
    121e:	ea 81       	ldd	r30, Y+2	; 0x02
    1220:	fb 81       	ldd	r31, Y+3	; 0x03
    1222:	80 83       	st	Z, r24
	}
	return Loc_Error;
    1224:	89 81       	ldd	r24, Y+1	; 0x01
}
    1226:	0f 90       	pop	r0
    1228:	0f 90       	pop	r0
    122a:	0f 90       	pop	r0
    122c:	cf 91       	pop	r28
    122e:	df 91       	pop	r29
    1230:	08 95       	ret

00001232 <MTWI_SendStopCondtion>:

/*TWI Stop condition*/

void MTWI_SendStopCondtion(void)
{
    1232:	df 93       	push	r29
    1234:	cf 93       	push	r28
    1236:	cd b7       	in	r28, 0x3d	; 61
    1238:	de b7       	in	r29, 0x3e	; 62
	/*Send Stop Condition*/
	SET_BIT(TWCR,4);
    123a:	a6 e5       	ldi	r26, 0x56	; 86
    123c:	b0 e0       	ldi	r27, 0x00	; 0
    123e:	e6 e5       	ldi	r30, 0x56	; 86
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	80 81       	ld	r24, Z
    1244:	80 61       	ori	r24, 0x10	; 16
    1246:	8c 93       	st	X, r24
	/*Clear TWI  interrupt flag*/
	SET_BIT(TWCR,7);
    1248:	a6 e5       	ldi	r26, 0x56	; 86
    124a:	b0 e0       	ldi	r27, 0x00	; 0
    124c:	e6 e5       	ldi	r30, 0x56	; 86
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	80 81       	ld	r24, Z
    1252:	80 68       	ori	r24, 0x80	; 128
    1254:	8c 93       	st	X, r24
}
    1256:	cf 91       	pop	r28
    1258:	df 91       	pop	r29
    125a:	08 95       	ret

0000125c <MTIMER2_VidInit>:
#include"MTIMER2_Config.h"


void (*MTIMER2_CALLBACK)(void);
void MTIMER2_VidInit(void)
{
    125c:	df 93       	push	r29
    125e:	cf 93       	push	r28
    1260:	cd b7       	in	r28, 0x3d	; 61
    1262:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR2,6);
	/*OverFlow Interrupt Enable */
	SET_BIT(TIMSK,6);

#elif TIMER2SETMODE == TIMER2_FASTPWMMODE
	SET_BIT(TCCR2,6);
    1264:	a5 e4       	ldi	r26, 0x45	; 69
    1266:	b0 e0       	ldi	r27, 0x00	; 0
    1268:	e5 e4       	ldi	r30, 0x45	; 69
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	80 81       	ld	r24, Z
    126e:	80 64       	ori	r24, 0x40	; 64
    1270:	8c 93       	st	X, r24
	SET_BIT(TCCR2,3);
    1272:	a5 e4       	ldi	r26, 0x45	; 69
    1274:	b0 e0       	ldi	r27, 0x00	; 0
    1276:	e5 e4       	ldi	r30, 0x45	; 69
    1278:	f0 e0       	ldi	r31, 0x00	; 0
    127a:	80 81       	ld	r24, Z
    127c:	88 60       	ori	r24, 0x08	; 8
    127e:	8c 93       	st	X, r24
  #if TIMER2_PWMMODE_OC2PINMODE==TIMER2_PWMMODE_NON_INVERTING
	CLR_BIT(TCCR2,4);
    1280:	a5 e4       	ldi	r26, 0x45	; 69
    1282:	b0 e0       	ldi	r27, 0x00	; 0
    1284:	e5 e4       	ldi	r30, 0x45	; 69
    1286:	f0 e0       	ldi	r31, 0x00	; 0
    1288:	80 81       	ld	r24, Z
    128a:	8f 7e       	andi	r24, 0xEF	; 239
    128c:	8c 93       	st	X, r24
	SET_BIT(TCCR2,5);
    128e:	a5 e4       	ldi	r26, 0x45	; 69
    1290:	b0 e0       	ldi	r27, 0x00	; 0
    1292:	e5 e4       	ldi	r30, 0x45	; 69
    1294:	f0 e0       	ldi	r31, 0x00	; 0
    1296:	80 81       	ld	r24, Z
    1298:	80 62       	ori	r24, 0x20	; 32
    129a:	8c 93       	st	X, r24
#else
	#error"Timer2 Mode Options Is Not Valid.."
#endif

	              /*SET PRESCALER*/
	TCCR2&=0xF8;
    129c:	a5 e4       	ldi	r26, 0x45	; 69
    129e:	b0 e0       	ldi	r27, 0x00	; 0
    12a0:	e5 e4       	ldi	r30, 0x45	; 69
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	80 81       	ld	r24, Z
    12a6:	88 7f       	andi	r24, 0xF8	; 248
    12a8:	8c 93       	st	X, r24
	TCCR2|=MTIMER2_SET_PRESCALER;
    12aa:	a5 e4       	ldi	r26, 0x45	; 69
    12ac:	b0 e0       	ldi	r27, 0x00	; 0
    12ae:	e5 e4       	ldi	r30, 0x45	; 69
    12b0:	f0 e0       	ldi	r31, 0x00	; 0
    12b2:	80 81       	ld	r24, Z
    12b4:	85 60       	ori	r24, 0x05	; 5
    12b6:	8c 93       	st	X, r24
}
    12b8:	cf 91       	pop	r28
    12ba:	df 91       	pop	r29
    12bc:	08 95       	ret

000012be <MTIMER2_VidSetPreLoad>:
void MTIMER2_VidSetPreLoad(uint8 copy_uint8PreLoadValue)
{
    12be:	df 93       	push	r29
    12c0:	cf 93       	push	r28
    12c2:	0f 92       	push	r0
    12c4:	cd b7       	in	r28, 0x3d	; 61
    12c6:	de b7       	in	r29, 0x3e	; 62
    12c8:	89 83       	std	Y+1, r24	; 0x01
	TCNT2=copy_uint8PreLoadValue;
    12ca:	e4 e4       	ldi	r30, 0x44	; 68
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	89 81       	ldd	r24, Y+1	; 0x01
    12d0:	80 83       	st	Z, r24
}
    12d2:	0f 90       	pop	r0
    12d4:	cf 91       	pop	r28
    12d6:	df 91       	pop	r29
    12d8:	08 95       	ret

000012da <MTIMER2_VidSetCTCRegister>:
void MTIMER2_VidSetCTCRegister(uint8 copy_uint8CTCRegisteValue)
{
    12da:	df 93       	push	r29
    12dc:	cf 93       	push	r28
    12de:	0f 92       	push	r0
    12e0:	cd b7       	in	r28, 0x3d	; 61
    12e2:	de b7       	in	r29, 0x3e	; 62
    12e4:	89 83       	std	Y+1, r24	; 0x01
	OCR2=copy_uint8CTCRegisteValue;
    12e6:	e3 e4       	ldi	r30, 0x43	; 67
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	89 81       	ldd	r24, Y+1	; 0x01
    12ec:	80 83       	st	Z, r24
}
    12ee:	0f 90       	pop	r0
    12f0:	cf 91       	pop	r28
    12f2:	df 91       	pop	r29
    12f4:	08 95       	ret

000012f6 <MTIMER2_VidTIMER2_OVERFLOW_SetCallBack>:
void MTIMER2_VidTIMER2_OVERFLOW_SetCallBack(void (*PtrToFun)(void))
{
    12f6:	df 93       	push	r29
    12f8:	cf 93       	push	r28
    12fa:	00 d0       	rcall	.+0      	; 0x12fc <MTIMER2_VidTIMER2_OVERFLOW_SetCallBack+0x6>
    12fc:	cd b7       	in	r28, 0x3d	; 61
    12fe:	de b7       	in	r29, 0x3e	; 62
    1300:	9a 83       	std	Y+2, r25	; 0x02
    1302:	89 83       	std	Y+1, r24	; 0x01
	MTIMER2_CALLBACK=PtrToFun;
    1304:	89 81       	ldd	r24, Y+1	; 0x01
    1306:	9a 81       	ldd	r25, Y+2	; 0x02
    1308:	90 93 94 00 	sts	0x0094, r25
    130c:	80 93 93 00 	sts	0x0093, r24
}
    1310:	0f 90       	pop	r0
    1312:	0f 90       	pop	r0
    1314:	cf 91       	pop	r28
    1316:	df 91       	pop	r29
    1318:	08 95       	ret

0000131a <MTIMER2_VidTIMER2_CTC_SetCallBack>:
void MTIMER2_VidTIMER2_CTC_SetCallBack(void (*PtrToFun)(void))
{
    131a:	df 93       	push	r29
    131c:	cf 93       	push	r28
    131e:	00 d0       	rcall	.+0      	; 0x1320 <MTIMER2_VidTIMER2_CTC_SetCallBack+0x6>
    1320:	cd b7       	in	r28, 0x3d	; 61
    1322:	de b7       	in	r29, 0x3e	; 62
    1324:	9a 83       	std	Y+2, r25	; 0x02
    1326:	89 83       	std	Y+1, r24	; 0x01
	MTIMER2_CALLBACK=PtrToFun;
    1328:	89 81       	ldd	r24, Y+1	; 0x01
    132a:	9a 81       	ldd	r25, Y+2	; 0x02
    132c:	90 93 94 00 	sts	0x0094, r25
    1330:	80 93 93 00 	sts	0x0093, r24
}
    1334:	0f 90       	pop	r0
    1336:	0f 90       	pop	r0
    1338:	cf 91       	pop	r28
    133a:	df 91       	pop	r29
    133c:	08 95       	ret

0000133e <__vector_4>:
           /*CTC*/
void __vector_4(void)   __attribute__((signal));
void __vector_4(void)
{
    133e:	1f 92       	push	r1
    1340:	0f 92       	push	r0
    1342:	0f b6       	in	r0, 0x3f	; 63
    1344:	0f 92       	push	r0
    1346:	11 24       	eor	r1, r1
    1348:	2f 93       	push	r18
    134a:	3f 93       	push	r19
    134c:	4f 93       	push	r20
    134e:	5f 93       	push	r21
    1350:	6f 93       	push	r22
    1352:	7f 93       	push	r23
    1354:	8f 93       	push	r24
    1356:	9f 93       	push	r25
    1358:	af 93       	push	r26
    135a:	bf 93       	push	r27
    135c:	ef 93       	push	r30
    135e:	ff 93       	push	r31
    1360:	df 93       	push	r29
    1362:	cf 93       	push	r28
    1364:	cd b7       	in	r28, 0x3d	; 61
    1366:	de b7       	in	r29, 0x3e	; 62
	MTIMER2_CALLBACK();
    1368:	e0 91 93 00 	lds	r30, 0x0093
    136c:	f0 91 94 00 	lds	r31, 0x0094
    1370:	09 95       	icall
}
    1372:	cf 91       	pop	r28
    1374:	df 91       	pop	r29
    1376:	ff 91       	pop	r31
    1378:	ef 91       	pop	r30
    137a:	bf 91       	pop	r27
    137c:	af 91       	pop	r26
    137e:	9f 91       	pop	r25
    1380:	8f 91       	pop	r24
    1382:	7f 91       	pop	r23
    1384:	6f 91       	pop	r22
    1386:	5f 91       	pop	r21
    1388:	4f 91       	pop	r20
    138a:	3f 91       	pop	r19
    138c:	2f 91       	pop	r18
    138e:	0f 90       	pop	r0
    1390:	0f be       	out	0x3f, r0	; 63
    1392:	0f 90       	pop	r0
    1394:	1f 90       	pop	r1
    1396:	18 95       	reti

00001398 <__vector_5>:
         /*overflow */
void __vector_5(void)   __attribute__((signal));
void __vector_5(void)
{
    1398:	1f 92       	push	r1
    139a:	0f 92       	push	r0
    139c:	0f b6       	in	r0, 0x3f	; 63
    139e:	0f 92       	push	r0
    13a0:	11 24       	eor	r1, r1
    13a2:	2f 93       	push	r18
    13a4:	3f 93       	push	r19
    13a6:	4f 93       	push	r20
    13a8:	5f 93       	push	r21
    13aa:	6f 93       	push	r22
    13ac:	7f 93       	push	r23
    13ae:	8f 93       	push	r24
    13b0:	9f 93       	push	r25
    13b2:	af 93       	push	r26
    13b4:	bf 93       	push	r27
    13b6:	ef 93       	push	r30
    13b8:	ff 93       	push	r31
    13ba:	df 93       	push	r29
    13bc:	cf 93       	push	r28
    13be:	cd b7       	in	r28, 0x3d	; 61
    13c0:	de b7       	in	r29, 0x3e	; 62
	MTIMER2_CALLBACK();
    13c2:	e0 91 93 00 	lds	r30, 0x0093
    13c6:	f0 91 94 00 	lds	r31, 0x0094
    13ca:	09 95       	icall
}
    13cc:	cf 91       	pop	r28
    13ce:	df 91       	pop	r29
    13d0:	ff 91       	pop	r31
    13d2:	ef 91       	pop	r30
    13d4:	bf 91       	pop	r27
    13d6:	af 91       	pop	r26
    13d8:	9f 91       	pop	r25
    13da:	8f 91       	pop	r24
    13dc:	7f 91       	pop	r23
    13de:	6f 91       	pop	r22
    13e0:	5f 91       	pop	r21
    13e2:	4f 91       	pop	r20
    13e4:	3f 91       	pop	r19
    13e6:	2f 91       	pop	r18
    13e8:	0f 90       	pop	r0
    13ea:	0f be       	out	0x3f, r0	; 63
    13ec:	0f 90       	pop	r0
    13ee:	1f 90       	pop	r1
    13f0:	18 95       	reti

000013f2 <MTIMER1_VidInit>:


void (*MTIMER1_CALLBACK)(void);

void MTIMER1_VidInit(void)
{
    13f2:	df 93       	push	r29
    13f4:	cf 93       	push	r28
    13f6:	cd b7       	in	r28, 0x3d	; 61
    13f8:	de b7       	in	r29, 0x3e	; 62
	/*Compare Match Enable Interrupt*/
	SET_BIT(TIMSK,4);
	SET_BIT(TIMSK,3);

#elif TIMER1SETMODE == TIMER1_NORMALMODE
	CLR_BIT(TCCR1A,0);
    13fa:	af e4       	ldi	r26, 0x4F	; 79
    13fc:	b0 e0       	ldi	r27, 0x00	; 0
    13fe:	ef e4       	ldi	r30, 0x4F	; 79
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	80 81       	ld	r24, Z
    1404:	8e 7f       	andi	r24, 0xFE	; 254
    1406:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,1);
    1408:	af e4       	ldi	r26, 0x4F	; 79
    140a:	b0 e0       	ldi	r27, 0x00	; 0
    140c:	ef e4       	ldi	r30, 0x4F	; 79
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	80 81       	ld	r24, Z
    1412:	8d 7f       	andi	r24, 0xFD	; 253
    1414:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,3);
    1416:	ae e4       	ldi	r26, 0x4E	; 78
    1418:	b0 e0       	ldi	r27, 0x00	; 0
    141a:	ee e4       	ldi	r30, 0x4E	; 78
    141c:	f0 e0       	ldi	r31, 0x00	; 0
    141e:	80 81       	ld	r24, Z
    1420:	87 7f       	andi	r24, 0xF7	; 247
    1422:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,4);
    1424:	ae e4       	ldi	r26, 0x4E	; 78
    1426:	b0 e0       	ldi	r27, 0x00	; 0
    1428:	ee e4       	ldi	r30, 0x4E	; 78
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	80 81       	ld	r24, Z
    142e:	8f 7e       	andi	r24, 0xEF	; 239
    1430:	8c 93       	st	X, r24
	/*OVERFLOW  Enable Interrupt */
	SET_BIT(TIMSK,2);
    1432:	a9 e5       	ldi	r26, 0x59	; 89
    1434:	b0 e0       	ldi	r27, 0x00	; 0
    1436:	e9 e5       	ldi	r30, 0x59	; 89
    1438:	f0 e0       	ldi	r31, 0x00	; 0
    143a:	80 81       	ld	r24, Z
    143c:	84 60       	ori	r24, 0x04	; 4
    143e:	8c 93       	st	X, r24
#else
#error "Timer 1 Options Is Not Valid."
#endif

/*********SET PRESCALER *********/
	TCCR1B&=0xF8;
    1440:	ae e4       	ldi	r26, 0x4E	; 78
    1442:	b0 e0       	ldi	r27, 0x00	; 0
    1444:	ee e4       	ldi	r30, 0x4E	; 78
    1446:	f0 e0       	ldi	r31, 0x00	; 0
    1448:	80 81       	ld	r24, Z
    144a:	88 7f       	andi	r24, 0xF8	; 248
    144c:	8c 93       	st	X, r24
	TCCR1B|=TIMER1_SETPRESCALER;
    144e:	ae e4       	ldi	r26, 0x4E	; 78
    1450:	b0 e0       	ldi	r27, 0x00	; 0
    1452:	ee e4       	ldi	r30, 0x4E	; 78
    1454:	f0 e0       	ldi	r31, 0x00	; 0
    1456:	80 81       	ld	r24, Z
    1458:	82 60       	ori	r24, 0x02	; 2
    145a:	8c 93       	st	X, r24
}
    145c:	cf 91       	pop	r28
    145e:	df 91       	pop	r29
    1460:	08 95       	ret

00001462 <MTIMER1_VidInit_ICU>:
void MTIMER1_VidInit_ICU(void)
{
    1462:	df 93       	push	r29
    1464:	cf 93       	push	r28
    1466:	cd b7       	in	r28, 0x3d	; 61
    1468:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,5);
    146a:	a9 e5       	ldi	r26, 0x59	; 89
    146c:	b0 e0       	ldi	r27, 0x00	; 0
    146e:	e9 e5       	ldi	r30, 0x59	; 89
    1470:	f0 e0       	ldi	r31, 0x00	; 0
    1472:	80 81       	ld	r24, Z
    1474:	80 62       	ori	r24, 0x20	; 32
    1476:	8c 93       	st	X, r24
	    /*Enable ICU Noise Canceler */
	SET_BIT(TCCR1B,7);
    1478:	ae e4       	ldi	r26, 0x4E	; 78
    147a:	b0 e0       	ldi	r27, 0x00	; 0
    147c:	ee e4       	ldi	r30, 0x4E	; 78
    147e:	f0 e0       	ldi	r31, 0x00	; 0
    1480:	80 81       	ld	r24, Z
    1482:	80 68       	ori	r24, 0x80	; 128
    1484:	8c 93       	st	X, r24
}
    1486:	cf 91       	pop	r28
    1488:	df 91       	pop	r29
    148a:	08 95       	ret

0000148c <MTIMER1_VidICU_SelectEdge>:
void MTIMER1_VidICU_SelectEdge(uint8 copy_uint8SelectEgde)
{
    148c:	df 93       	push	r29
    148e:	cf 93       	push	r28
    1490:	00 d0       	rcall	.+0      	; 0x1492 <MTIMER1_VidICU_SelectEdge+0x6>
    1492:	0f 92       	push	r0
    1494:	cd b7       	in	r28, 0x3d	; 61
    1496:	de b7       	in	r29, 0x3e	; 62
    1498:	89 83       	std	Y+1, r24	; 0x01
	switch (copy_uint8SelectEgde)
    149a:	89 81       	ldd	r24, Y+1	; 0x01
    149c:	28 2f       	mov	r18, r24
    149e:	30 e0       	ldi	r19, 0x00	; 0
    14a0:	3b 83       	std	Y+3, r19	; 0x03
    14a2:	2a 83       	std	Y+2, r18	; 0x02
    14a4:	8a 81       	ldd	r24, Y+2	; 0x02
    14a6:	9b 81       	ldd	r25, Y+3	; 0x03
    14a8:	00 97       	sbiw	r24, 0x00	; 0
    14aa:	69 f0       	breq	.+26     	; 0x14c6 <MTIMER1_VidICU_SelectEdge+0x3a>
    14ac:	2a 81       	ldd	r18, Y+2	; 0x02
    14ae:	3b 81       	ldd	r19, Y+3	; 0x03
    14b0:	21 30       	cpi	r18, 0x01	; 1
    14b2:	31 05       	cpc	r19, r1
    14b4:	79 f4       	brne	.+30     	; 0x14d4 <MTIMER1_VidICU_SelectEdge+0x48>
	{
	case ICU_RISING_EDGE:
	{
	     SET_BIT(TCCR1B,6);
    14b6:	ae e4       	ldi	r26, 0x4E	; 78
    14b8:	b0 e0       	ldi	r27, 0x00	; 0
    14ba:	ee e4       	ldi	r30, 0x4E	; 78
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	80 81       	ld	r24, Z
    14c0:	80 64       	ori	r24, 0x40	; 64
    14c2:	8c 93       	st	X, r24
    14c4:	07 c0       	rjmp	.+14     	; 0x14d4 <MTIMER1_VidICU_SelectEdge+0x48>
	     break;
	}
	case ICU_FALLING_EDGE:
	{
		CLR_BIT(TCCR1B,6);
    14c6:	ae e4       	ldi	r26, 0x4E	; 78
    14c8:	b0 e0       	ldi	r27, 0x00	; 0
    14ca:	ee e4       	ldi	r30, 0x4E	; 78
    14cc:	f0 e0       	ldi	r31, 0x00	; 0
    14ce:	80 81       	ld	r24, Z
    14d0:	8f 7b       	andi	r24, 0xBF	; 191
    14d2:	8c 93       	st	X, r24
		break;
	}

	}
}
    14d4:	0f 90       	pop	r0
    14d6:	0f 90       	pop	r0
    14d8:	0f 90       	pop	r0
    14da:	cf 91       	pop	r28
    14dc:	df 91       	pop	r29
    14de:	08 95       	ret

000014e0 <MTIMER1_VidSetPreLoad>:
void MTIMER1_VidSetPreLoad(uint16 copy_uint16PreLoadvalue)
{
    14e0:	df 93       	push	r29
    14e2:	cf 93       	push	r28
    14e4:	00 d0       	rcall	.+0      	; 0x14e6 <MTIMER1_VidSetPreLoad+0x6>
    14e6:	cd b7       	in	r28, 0x3d	; 61
    14e8:	de b7       	in	r29, 0x3e	; 62
    14ea:	9a 83       	std	Y+2, r25	; 0x02
    14ec:	89 83       	std	Y+1, r24	; 0x01
	/*Normal mode data Register*/
	//uint16 TCNT1;
	TCNT1=copy_uint16PreLoadvalue;
    14ee:	ec e4       	ldi	r30, 0x4C	; 76
    14f0:	f0 e0       	ldi	r31, 0x00	; 0
    14f2:	89 81       	ldd	r24, Y+1	; 0x01
    14f4:	9a 81       	ldd	r25, Y+2	; 0x02
    14f6:	91 83       	std	Z+1, r25	; 0x01
    14f8:	80 83       	st	Z, r24
	/*TCNT1=TCNT1H;
	TCNT1|=TCNT1L<<8;
	TCNT1=copy_uint8PreLoadvalue;*/
}
    14fa:	0f 90       	pop	r0
    14fc:	0f 90       	pop	r0
    14fe:	cf 91       	pop	r28
    1500:	df 91       	pop	r29
    1502:	08 95       	ret

00001504 <MTIMER1_VidSetCTCRegister_CHB>:
void MTIMER1_VidSetCTCRegister_CHB(uint16 copy_uint16CTCValue)
{
    1504:	df 93       	push	r29
    1506:	cf 93       	push	r28
    1508:	00 d0       	rcall	.+0      	; 0x150a <MTIMER1_VidSetCTCRegister_CHB+0x6>
    150a:	cd b7       	in	r28, 0x3d	; 61
    150c:	de b7       	in	r29, 0x3e	; 62
    150e:	9a 83       	std	Y+2, r25	; 0x02
    1510:	89 83       	std	Y+1, r24	; 0x01
	OCR1B=copy_uint16CTCValue;
    1512:	e8 e4       	ldi	r30, 0x48	; 72
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	89 81       	ldd	r24, Y+1	; 0x01
    1518:	9a 81       	ldd	r25, Y+2	; 0x02
    151a:	91 83       	std	Z+1, r25	; 0x01
    151c:	80 83       	st	Z, r24
	/*OutPut Compare match B option*/
	/*OCR1B=OCR1BH;
	OCR1B|=OCR1BL<<8;
	OCR1B=copy_uint16CTCValue;*/
}
    151e:	0f 90       	pop	r0
    1520:	0f 90       	pop	r0
    1522:	cf 91       	pop	r28
    1524:	df 91       	pop	r29
    1526:	08 95       	ret

00001528 <MTIMER1_VidSetCTCRegister_CHA>:
void MTIMER1_VidSetCTCRegister_CHA(uint16 copy_uint16CTCValue)
{
    1528:	df 93       	push	r29
    152a:	cf 93       	push	r28
    152c:	00 d0       	rcall	.+0      	; 0x152e <MTIMER1_VidSetCTCRegister_CHA+0x6>
    152e:	cd b7       	in	r28, 0x3d	; 61
    1530:	de b7       	in	r29, 0x3e	; 62
    1532:	9a 83       	std	Y+2, r25	; 0x02
    1534:	89 83       	std	Y+1, r24	; 0x01
	OCR1A=copy_uint16CTCValue;
    1536:	ea e4       	ldi	r30, 0x4A	; 74
    1538:	f0 e0       	ldi	r31, 0x00	; 0
    153a:	89 81       	ldd	r24, Y+1	; 0x01
    153c:	9a 81       	ldd	r25, Y+2	; 0x02
    153e:	91 83       	std	Z+1, r25	; 0x01
    1540:	80 83       	st	Z, r24
	/*OutPut Compare match A option*/
	//OCR1A=copy_uint16CTCValue;
	/*OCR1A=OCR1AH;
		OCR1A|=OCR1AL<<8;
		OCR1A=copy_uint16CTCValue;*/
}
    1542:	0f 90       	pop	r0
    1544:	0f 90       	pop	r0
    1546:	cf 91       	pop	r28
    1548:	df 91       	pop	r29
    154a:	08 95       	ret

0000154c <MTIMER1_VidSetCTCRegister_ICR1>:
void MTIMER1_VidSetCTCRegister_ICR1(uint16 copy_uint16CTCValue)
{
    154c:	df 93       	push	r29
    154e:	cf 93       	push	r28
    1550:	00 d0       	rcall	.+0      	; 0x1552 <MTIMER1_VidSetCTCRegister_ICR1+0x6>
    1552:	cd b7       	in	r28, 0x3d	; 61
    1554:	de b7       	in	r29, 0x3e	; 62
    1556:	9a 83       	std	Y+2, r25	; 0x02
    1558:	89 83       	std	Y+1, r24	; 0x01
	ICR1=copy_uint16CTCValue;
    155a:	e6 e4       	ldi	r30, 0x46	; 70
    155c:	f0 e0       	ldi	r31, 0x00	; 0
    155e:	89 81       	ldd	r24, Y+1	; 0x01
    1560:	9a 81       	ldd	r25, Y+2	; 0x02
    1562:	91 83       	std	Z+1, r25	; 0x01
    1564:	80 83       	st	Z, r24
}
    1566:	0f 90       	pop	r0
    1568:	0f 90       	pop	r0
    156a:	cf 91       	pop	r28
    156c:	df 91       	pop	r29
    156e:	08 95       	ret

00001570 <MTIMER1_VidTimer1_OverFlow_SetCallBack>:
void MTIMER1_VidTimer1_OverFlow_SetCallBack(void (*PtrToFun)(void))
{
    1570:	df 93       	push	r29
    1572:	cf 93       	push	r28
    1574:	00 d0       	rcall	.+0      	; 0x1576 <MTIMER1_VidTimer1_OverFlow_SetCallBack+0x6>
    1576:	cd b7       	in	r28, 0x3d	; 61
    1578:	de b7       	in	r29, 0x3e	; 62
    157a:	9a 83       	std	Y+2, r25	; 0x02
    157c:	89 83       	std	Y+1, r24	; 0x01
	MTIMER1_CALLBACK=PtrToFun;
    157e:	89 81       	ldd	r24, Y+1	; 0x01
    1580:	9a 81       	ldd	r25, Y+2	; 0x02
    1582:	90 93 96 00 	sts	0x0096, r25
    1586:	80 93 95 00 	sts	0x0095, r24
}
    158a:	0f 90       	pop	r0
    158c:	0f 90       	pop	r0
    158e:	cf 91       	pop	r28
    1590:	df 91       	pop	r29
    1592:	08 95       	ret

00001594 <MTIMER1_VidTimer1_CTC_SetCallBack>:
void MTIMER1_VidTimer1_CTC_SetCallBack(void (*PtrToFun)(void))
{
    1594:	df 93       	push	r29
    1596:	cf 93       	push	r28
    1598:	00 d0       	rcall	.+0      	; 0x159a <MTIMER1_VidTimer1_CTC_SetCallBack+0x6>
    159a:	cd b7       	in	r28, 0x3d	; 61
    159c:	de b7       	in	r29, 0x3e	; 62
    159e:	9a 83       	std	Y+2, r25	; 0x02
    15a0:	89 83       	std	Y+1, r24	; 0x01
	MTIMER1_CALLBACK=PtrToFun;
    15a2:	89 81       	ldd	r24, Y+1	; 0x01
    15a4:	9a 81       	ldd	r25, Y+2	; 0x02
    15a6:	90 93 96 00 	sts	0x0096, r25
    15aa:	80 93 95 00 	sts	0x0095, r24
}
    15ae:	0f 90       	pop	r0
    15b0:	0f 90       	pop	r0
    15b2:	cf 91       	pop	r28
    15b4:	df 91       	pop	r29
    15b6:	08 95       	ret

000015b8 <MTIMER1_uint32Read_ICR1>:

uint32 MTIMER1_uint32Read_ICR1(void)
{
    15b8:	df 93       	push	r29
    15ba:	cf 93       	push	r28
    15bc:	cd b7       	in	r28, 0x3d	; 61
    15be:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    15c0:	e6 e4       	ldi	r30, 0x46	; 70
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	80 81       	ld	r24, Z
    15c6:	91 81       	ldd	r25, Z+1	; 0x01
    15c8:	cc 01       	movw	r24, r24
    15ca:	a0 e0       	ldi	r26, 0x00	; 0
    15cc:	b0 e0       	ldi	r27, 0x00	; 0
}
    15ce:	bc 01       	movw	r22, r24
    15d0:	cd 01       	movw	r24, r26
    15d2:	cf 91       	pop	r28
    15d4:	df 91       	pop	r29
    15d6:	08 95       	ret

000015d8 <MTIMER1_VidTimer1_ICU_SetCallBack>:
void MTIMER1_VidTimer1_ICU_SetCallBack(void(*PtrToFun)(void))
{
    15d8:	df 93       	push	r29
    15da:	cf 93       	push	r28
    15dc:	00 d0       	rcall	.+0      	; 0x15de <MTIMER1_VidTimer1_ICU_SetCallBack+0x6>
    15de:	cd b7       	in	r28, 0x3d	; 61
    15e0:	de b7       	in	r29, 0x3e	; 62
    15e2:	9a 83       	std	Y+2, r25	; 0x02
    15e4:	89 83       	std	Y+1, r24	; 0x01
	MTIMER1_CALLBACK=PtrToFun;
    15e6:	89 81       	ldd	r24, Y+1	; 0x01
    15e8:	9a 81       	ldd	r25, Y+2	; 0x02
    15ea:	90 93 96 00 	sts	0x0096, r25
    15ee:	80 93 95 00 	sts	0x0095, r24
}
    15f2:	0f 90       	pop	r0
    15f4:	0f 90       	pop	r0
    15f6:	cf 91       	pop	r28
    15f8:	df 91       	pop	r29
    15fa:	08 95       	ret

000015fc <__vector_7>:
     /*Compare A*/
void __vector_7(void)  __attribute__((signal));
void __vector_7(void)
{
    15fc:	1f 92       	push	r1
    15fe:	0f 92       	push	r0
    1600:	0f b6       	in	r0, 0x3f	; 63
    1602:	0f 92       	push	r0
    1604:	11 24       	eor	r1, r1
    1606:	2f 93       	push	r18
    1608:	3f 93       	push	r19
    160a:	4f 93       	push	r20
    160c:	5f 93       	push	r21
    160e:	6f 93       	push	r22
    1610:	7f 93       	push	r23
    1612:	8f 93       	push	r24
    1614:	9f 93       	push	r25
    1616:	af 93       	push	r26
    1618:	bf 93       	push	r27
    161a:	ef 93       	push	r30
    161c:	ff 93       	push	r31
    161e:	df 93       	push	r29
    1620:	cf 93       	push	r28
    1622:	cd b7       	in	r28, 0x3d	; 61
    1624:	de b7       	in	r29, 0x3e	; 62
	MTIMER1_CALLBACK();
    1626:	e0 91 95 00 	lds	r30, 0x0095
    162a:	f0 91 96 00 	lds	r31, 0x0096
    162e:	09 95       	icall
}
    1630:	cf 91       	pop	r28
    1632:	df 91       	pop	r29
    1634:	ff 91       	pop	r31
    1636:	ef 91       	pop	r30
    1638:	bf 91       	pop	r27
    163a:	af 91       	pop	r26
    163c:	9f 91       	pop	r25
    163e:	8f 91       	pop	r24
    1640:	7f 91       	pop	r23
    1642:	6f 91       	pop	r22
    1644:	5f 91       	pop	r21
    1646:	4f 91       	pop	r20
    1648:	3f 91       	pop	r19
    164a:	2f 91       	pop	r18
    164c:	0f 90       	pop	r0
    164e:	0f be       	out	0x3f, r0	; 63
    1650:	0f 90       	pop	r0
    1652:	1f 90       	pop	r1
    1654:	18 95       	reti

00001656 <__vector_8>:
   /*Compare B*/
void __vector_8(void)  __attribute__((signal));
void __vector_8(void)
{
    1656:	1f 92       	push	r1
    1658:	0f 92       	push	r0
    165a:	0f b6       	in	r0, 0x3f	; 63
    165c:	0f 92       	push	r0
    165e:	11 24       	eor	r1, r1
    1660:	2f 93       	push	r18
    1662:	3f 93       	push	r19
    1664:	4f 93       	push	r20
    1666:	5f 93       	push	r21
    1668:	6f 93       	push	r22
    166a:	7f 93       	push	r23
    166c:	8f 93       	push	r24
    166e:	9f 93       	push	r25
    1670:	af 93       	push	r26
    1672:	bf 93       	push	r27
    1674:	ef 93       	push	r30
    1676:	ff 93       	push	r31
    1678:	df 93       	push	r29
    167a:	cf 93       	push	r28
    167c:	cd b7       	in	r28, 0x3d	; 61
    167e:	de b7       	in	r29, 0x3e	; 62
	MTIMER1_CALLBACK();
    1680:	e0 91 95 00 	lds	r30, 0x0095
    1684:	f0 91 96 00 	lds	r31, 0x0096
    1688:	09 95       	icall
}
    168a:	cf 91       	pop	r28
    168c:	df 91       	pop	r29
    168e:	ff 91       	pop	r31
    1690:	ef 91       	pop	r30
    1692:	bf 91       	pop	r27
    1694:	af 91       	pop	r26
    1696:	9f 91       	pop	r25
    1698:	8f 91       	pop	r24
    169a:	7f 91       	pop	r23
    169c:	6f 91       	pop	r22
    169e:	5f 91       	pop	r21
    16a0:	4f 91       	pop	r20
    16a2:	3f 91       	pop	r19
    16a4:	2f 91       	pop	r18
    16a6:	0f 90       	pop	r0
    16a8:	0f be       	out	0x3f, r0	; 63
    16aa:	0f 90       	pop	r0
    16ac:	1f 90       	pop	r1
    16ae:	18 95       	reti

000016b0 <__vector_9>:
   /*OverFlow */
void __vector_9(void)  __attribute__((signal));
void __vector_9(void)
{
    16b0:	1f 92       	push	r1
    16b2:	0f 92       	push	r0
    16b4:	0f b6       	in	r0, 0x3f	; 63
    16b6:	0f 92       	push	r0
    16b8:	11 24       	eor	r1, r1
    16ba:	2f 93       	push	r18
    16bc:	3f 93       	push	r19
    16be:	4f 93       	push	r20
    16c0:	5f 93       	push	r21
    16c2:	6f 93       	push	r22
    16c4:	7f 93       	push	r23
    16c6:	8f 93       	push	r24
    16c8:	9f 93       	push	r25
    16ca:	af 93       	push	r26
    16cc:	bf 93       	push	r27
    16ce:	ef 93       	push	r30
    16d0:	ff 93       	push	r31
    16d2:	df 93       	push	r29
    16d4:	cf 93       	push	r28
    16d6:	cd b7       	in	r28, 0x3d	; 61
    16d8:	de b7       	in	r29, 0x3e	; 62
	MTIMER1_CALLBACK();
    16da:	e0 91 95 00 	lds	r30, 0x0095
    16de:	f0 91 96 00 	lds	r31, 0x0096
    16e2:	09 95       	icall
}
    16e4:	cf 91       	pop	r28
    16e6:	df 91       	pop	r29
    16e8:	ff 91       	pop	r31
    16ea:	ef 91       	pop	r30
    16ec:	bf 91       	pop	r27
    16ee:	af 91       	pop	r26
    16f0:	9f 91       	pop	r25
    16f2:	8f 91       	pop	r24
    16f4:	7f 91       	pop	r23
    16f6:	6f 91       	pop	r22
    16f8:	5f 91       	pop	r21
    16fa:	4f 91       	pop	r20
    16fc:	3f 91       	pop	r19
    16fe:	2f 91       	pop	r18
    1700:	0f 90       	pop	r0
    1702:	0f be       	out	0x3f, r0	; 63
    1704:	0f 90       	pop	r0
    1706:	1f 90       	pop	r1
    1708:	18 95       	reti

0000170a <__vector_6>:
  /*ICU*/
void __vector_6(void)   __attribute__((signal));
void __vector_6(void)
{
    170a:	1f 92       	push	r1
    170c:	0f 92       	push	r0
    170e:	0f b6       	in	r0, 0x3f	; 63
    1710:	0f 92       	push	r0
    1712:	11 24       	eor	r1, r1
    1714:	2f 93       	push	r18
    1716:	3f 93       	push	r19
    1718:	4f 93       	push	r20
    171a:	5f 93       	push	r21
    171c:	6f 93       	push	r22
    171e:	7f 93       	push	r23
    1720:	8f 93       	push	r24
    1722:	9f 93       	push	r25
    1724:	af 93       	push	r26
    1726:	bf 93       	push	r27
    1728:	ef 93       	push	r30
    172a:	ff 93       	push	r31
    172c:	df 93       	push	r29
    172e:	cf 93       	push	r28
    1730:	cd b7       	in	r28, 0x3d	; 61
    1732:	de b7       	in	r29, 0x3e	; 62
	MTIMER1_CALLBACK();
    1734:	e0 91 95 00 	lds	r30, 0x0095
    1738:	f0 91 96 00 	lds	r31, 0x0096
    173c:	09 95       	icall
}
    173e:	cf 91       	pop	r28
    1740:	df 91       	pop	r29
    1742:	ff 91       	pop	r31
    1744:	ef 91       	pop	r30
    1746:	bf 91       	pop	r27
    1748:	af 91       	pop	r26
    174a:	9f 91       	pop	r25
    174c:	8f 91       	pop	r24
    174e:	7f 91       	pop	r23
    1750:	6f 91       	pop	r22
    1752:	5f 91       	pop	r21
    1754:	4f 91       	pop	r20
    1756:	3f 91       	pop	r19
    1758:	2f 91       	pop	r18
    175a:	0f 90       	pop	r0
    175c:	0f be       	out	0x3f, r0	; 63
    175e:	0f 90       	pop	r0
    1760:	1f 90       	pop	r1
    1762:	18 95       	reti

00001764 <MTIMER0_VidInit>:
#include"MTIMER0_Private.h"
#include"MTIMER0_Config.h"

void (*MTIMER0_CALLBACK)(void);
void MTIMER0_VidInit(void)
{
    1764:	df 93       	push	r29
    1766:	cf 93       	push	r28
    1768:	cd b7       	in	r28, 0x3d	; 61
    176a:	de b7       	in	r29, 0x3e	; 62
	/*1-Set Timer Mode*/
#if TIMER0_SETMODE == TIMER0_CTCMODE
	SET_BIT(TCCR0,3);
    176c:	a3 e5       	ldi	r26, 0x53	; 83
    176e:	b0 e0       	ldi	r27, 0x00	; 0
    1770:	e3 e5       	ldi	r30, 0x53	; 83
    1772:	f0 e0       	ldi	r31, 0x00	; 0
    1774:	80 81       	ld	r24, Z
    1776:	88 60       	ori	r24, 0x08	; 8
    1778:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,6);
    177a:	a3 e5       	ldi	r26, 0x53	; 83
    177c:	b0 e0       	ldi	r27, 0x00	; 0
    177e:	e3 e5       	ldi	r30, 0x53	; 83
    1780:	f0 e0       	ldi	r31, 0x00	; 0
    1782:	80 81       	ld	r24, Z
    1784:	8f 7b       	andi	r24, 0xBF	; 191
    1786:	8c 93       	st	X, r24
	SET_BIT(TCCR0,5);
	#elif TIMER0_CTCMODE_OC0PINMODE==TIMER0_CTCMODE_CLR_OC0PIN
	CLR_BIT(TCCR0,4);
	SET_BIT(TCCR0,5);
	#elif TIMER0_CTCMODE_OC0PINMODE==TIMER0_CTCMODE_NOTCONNECTED_OC0PIN
	CLR_BIT(TCCR0,4);
    1788:	a3 e5       	ldi	r26, 0x53	; 83
    178a:	b0 e0       	ldi	r27, 0x00	; 0
    178c:	e3 e5       	ldi	r30, 0x53	; 83
    178e:	f0 e0       	ldi	r31, 0x00	; 0
    1790:	80 81       	ld	r24, Z
    1792:	8f 7e       	andi	r24, 0xEF	; 239
    1794:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,4);
    1796:	a3 e5       	ldi	r26, 0x53	; 83
    1798:	b0 e0       	ldi	r27, 0x00	; 0
    179a:	e3 e5       	ldi	r30, 0x53	; 83
    179c:	f0 e0       	ldi	r31, 0x00	; 0
    179e:	80 81       	ld	r24, Z
    17a0:	8f 7e       	andi	r24, 0xEF	; 239
    17a2:	8c 93       	st	X, r24
	#else #error "OC0 PIN Is Not Valid.."
	#endif
	/*CTC Enable interrupt */
	SET_BIT(TIMSK,1);
    17a4:	a9 e5       	ldi	r26, 0x59	; 89
    17a6:	b0 e0       	ldi	r27, 0x00	; 0
    17a8:	e9 e5       	ldi	r30, 0x59	; 89
    17aa:	f0 e0       	ldi	r31, 0x00	; 0
    17ac:	80 81       	ld	r24, Z
    17ae:	82 60       	ori	r24, 0x02	; 2
    17b0:	8c 93       	st	X, r24

#else
	#error"TIMER0 MODE Is Not Valid.."
#endif
	/*Set PreScaler*/
	TCCR0&=0xF8;
    17b2:	a3 e5       	ldi	r26, 0x53	; 83
    17b4:	b0 e0       	ldi	r27, 0x00	; 0
    17b6:	e3 e5       	ldi	r30, 0x53	; 83
    17b8:	f0 e0       	ldi	r31, 0x00	; 0
    17ba:	80 81       	ld	r24, Z
    17bc:	88 7f       	andi	r24, 0xF8	; 248
    17be:	8c 93       	st	X, r24
	TCCR0|=TIMER0_SETPRESCALER;
    17c0:	a3 e5       	ldi	r26, 0x53	; 83
    17c2:	b0 e0       	ldi	r27, 0x00	; 0
    17c4:	e3 e5       	ldi	r30, 0x53	; 83
    17c6:	f0 e0       	ldi	r31, 0x00	; 0
    17c8:	80 81       	ld	r24, Z
    17ca:	83 60       	ori	r24, 0x03	; 3
    17cc:	8c 93       	st	X, r24
}
    17ce:	cf 91       	pop	r28
    17d0:	df 91       	pop	r29
    17d2:	08 95       	ret

000017d4 <MTIMER0_uint32Read>:
uint8 MTIMER0_uint32Read(void)
{
    17d4:	df 93       	push	r29
    17d6:	cf 93       	push	r28
    17d8:	cd b7       	in	r28, 0x3d	; 61
    17da:	de b7       	in	r29, 0x3e	; 62
	return TCNT0;
    17dc:	e2 e5       	ldi	r30, 0x52	; 82
    17de:	f0 e0       	ldi	r31, 0x00	; 0
    17e0:	80 81       	ld	r24, Z
}
    17e2:	cf 91       	pop	r28
    17e4:	df 91       	pop	r29
    17e6:	08 95       	ret

000017e8 <MTIMER0_VidSetPreLoad>:
void MTIMER0_VidSetPreLoad(uint8 copy_uint8PreLoad)
{
    17e8:	df 93       	push	r29
    17ea:	cf 93       	push	r28
    17ec:	0f 92       	push	r0
    17ee:	cd b7       	in	r28, 0x3d	; 61
    17f0:	de b7       	in	r29, 0x3e	; 62
    17f2:	89 83       	std	Y+1, r24	; 0x01
	TCNT0=copy_uint8PreLoad;
    17f4:	e2 e5       	ldi	r30, 0x52	; 82
    17f6:	f0 e0       	ldi	r31, 0x00	; 0
    17f8:	89 81       	ldd	r24, Y+1	; 0x01
    17fa:	80 83       	st	Z, r24
}
    17fc:	0f 90       	pop	r0
    17fe:	cf 91       	pop	r28
    1800:	df 91       	pop	r29
    1802:	08 95       	ret

00001804 <MTIMER0_VidSetCTCRegister>:
void MTIMER0_VidSetCTCRegister(uint8 copy_uint8CTCValue)
{
    1804:	df 93       	push	r29
    1806:	cf 93       	push	r28
    1808:	0f 92       	push	r0
    180a:	cd b7       	in	r28, 0x3d	; 61
    180c:	de b7       	in	r29, 0x3e	; 62
    180e:	89 83       	std	Y+1, r24	; 0x01
	OCR0=copy_uint8CTCValue;
    1810:	ec e5       	ldi	r30, 0x5C	; 92
    1812:	f0 e0       	ldi	r31, 0x00	; 0
    1814:	89 81       	ldd	r24, Y+1	; 0x01
    1816:	80 83       	st	Z, r24
}
    1818:	0f 90       	pop	r0
    181a:	cf 91       	pop	r28
    181c:	df 91       	pop	r29
    181e:	08 95       	ret

00001820 <MTIMER0_VidTimerOverFlow_SetCallBack>:
void MTIMER0_VidTimerOverFlow_SetCallBack(void (*PtrToFun)(void))
{
    1820:	df 93       	push	r29
    1822:	cf 93       	push	r28
    1824:	00 d0       	rcall	.+0      	; 0x1826 <MTIMER0_VidTimerOverFlow_SetCallBack+0x6>
    1826:	cd b7       	in	r28, 0x3d	; 61
    1828:	de b7       	in	r29, 0x3e	; 62
    182a:	9a 83       	std	Y+2, r25	; 0x02
    182c:	89 83       	std	Y+1, r24	; 0x01
	MTIMER0_CALLBACK=PtrToFun;
    182e:	89 81       	ldd	r24, Y+1	; 0x01
    1830:	9a 81       	ldd	r25, Y+2	; 0x02
    1832:	90 93 98 00 	sts	0x0098, r25
    1836:	80 93 97 00 	sts	0x0097, r24
}
    183a:	0f 90       	pop	r0
    183c:	0f 90       	pop	r0
    183e:	cf 91       	pop	r28
    1840:	df 91       	pop	r29
    1842:	08 95       	ret

00001844 <MTIMER0_VidTimerCTC_SetCallBack>:
void MTIMER0_VidTimerCTC_SetCallBack(void (*PtrToFun)(void))
{
    1844:	df 93       	push	r29
    1846:	cf 93       	push	r28
    1848:	00 d0       	rcall	.+0      	; 0x184a <MTIMER0_VidTimerCTC_SetCallBack+0x6>
    184a:	cd b7       	in	r28, 0x3d	; 61
    184c:	de b7       	in	r29, 0x3e	; 62
    184e:	9a 83       	std	Y+2, r25	; 0x02
    1850:	89 83       	std	Y+1, r24	; 0x01
	MTIMER0_CALLBACK=PtrToFun;
    1852:	89 81       	ldd	r24, Y+1	; 0x01
    1854:	9a 81       	ldd	r25, Y+2	; 0x02
    1856:	90 93 98 00 	sts	0x0098, r25
    185a:	80 93 97 00 	sts	0x0097, r24
}
    185e:	0f 90       	pop	r0
    1860:	0f 90       	pop	r0
    1862:	cf 91       	pop	r28
    1864:	df 91       	pop	r29
    1866:	08 95       	ret

00001868 <__vector_10>:

/*CTC*/
void __vector_10(void)  __attribute__((signal));
void __vector_10(void)
{
    1868:	1f 92       	push	r1
    186a:	0f 92       	push	r0
    186c:	0f b6       	in	r0, 0x3f	; 63
    186e:	0f 92       	push	r0
    1870:	11 24       	eor	r1, r1
    1872:	2f 93       	push	r18
    1874:	3f 93       	push	r19
    1876:	4f 93       	push	r20
    1878:	5f 93       	push	r21
    187a:	6f 93       	push	r22
    187c:	7f 93       	push	r23
    187e:	8f 93       	push	r24
    1880:	9f 93       	push	r25
    1882:	af 93       	push	r26
    1884:	bf 93       	push	r27
    1886:	ef 93       	push	r30
    1888:	ff 93       	push	r31
    188a:	df 93       	push	r29
    188c:	cf 93       	push	r28
    188e:	cd b7       	in	r28, 0x3d	; 61
    1890:	de b7       	in	r29, 0x3e	; 62
	MTIMER0_CALLBACK();
    1892:	e0 91 97 00 	lds	r30, 0x0097
    1896:	f0 91 98 00 	lds	r31, 0x0098
    189a:	09 95       	icall
}
    189c:	cf 91       	pop	r28
    189e:	df 91       	pop	r29
    18a0:	ff 91       	pop	r31
    18a2:	ef 91       	pop	r30
    18a4:	bf 91       	pop	r27
    18a6:	af 91       	pop	r26
    18a8:	9f 91       	pop	r25
    18aa:	8f 91       	pop	r24
    18ac:	7f 91       	pop	r23
    18ae:	6f 91       	pop	r22
    18b0:	5f 91       	pop	r21
    18b2:	4f 91       	pop	r20
    18b4:	3f 91       	pop	r19
    18b6:	2f 91       	pop	r18
    18b8:	0f 90       	pop	r0
    18ba:	0f be       	out	0x3f, r0	; 63
    18bc:	0f 90       	pop	r0
    18be:	1f 90       	pop	r1
    18c0:	18 95       	reti

000018c2 <__vector_11>:
/*OVERFLOW*/
void __vector_11(void)  __attribute__((signal));
void __vector_11(void)
{
    18c2:	1f 92       	push	r1
    18c4:	0f 92       	push	r0
    18c6:	0f b6       	in	r0, 0x3f	; 63
    18c8:	0f 92       	push	r0
    18ca:	11 24       	eor	r1, r1
    18cc:	2f 93       	push	r18
    18ce:	3f 93       	push	r19
    18d0:	4f 93       	push	r20
    18d2:	5f 93       	push	r21
    18d4:	6f 93       	push	r22
    18d6:	7f 93       	push	r23
    18d8:	8f 93       	push	r24
    18da:	9f 93       	push	r25
    18dc:	af 93       	push	r26
    18de:	bf 93       	push	r27
    18e0:	ef 93       	push	r30
    18e2:	ff 93       	push	r31
    18e4:	df 93       	push	r29
    18e6:	cf 93       	push	r28
    18e8:	cd b7       	in	r28, 0x3d	; 61
    18ea:	de b7       	in	r29, 0x3e	; 62
	MTIMER0_CALLBACK();
    18ec:	e0 91 97 00 	lds	r30, 0x0097
    18f0:	f0 91 98 00 	lds	r31, 0x0098
    18f4:	09 95       	icall
}
    18f6:	cf 91       	pop	r28
    18f8:	df 91       	pop	r29
    18fa:	ff 91       	pop	r31
    18fc:	ef 91       	pop	r30
    18fe:	bf 91       	pop	r27
    1900:	af 91       	pop	r26
    1902:	9f 91       	pop	r25
    1904:	8f 91       	pop	r24
    1906:	7f 91       	pop	r23
    1908:	6f 91       	pop	r22
    190a:	5f 91       	pop	r21
    190c:	4f 91       	pop	r20
    190e:	3f 91       	pop	r19
    1910:	2f 91       	pop	r18
    1912:	0f 90       	pop	r0
    1914:	0f be       	out	0x3f, r0	; 63
    1916:	0f 90       	pop	r0
    1918:	1f 90       	pop	r1
    191a:	18 95       	reti

0000191c <MSPI_VidMasterInit>:
#include"MSPI_Private.h"
#include"MSPI_Config.h"

void (*MSPI_CALLBACK)(void);
void MSPI_VidMasterInit(void)
{
    191c:	df 93       	push	r29
    191e:	cf 93       	push	r28
    1920:	cd b7       	in	r28, 0x3d	; 61
    1922:	de b7       	in	r29, 0x3e	; 62
	/*Set Data Order */
#if MSPI_DATAORDER == MSPI_LSB_DATAORDER
	SET_BIT(SPCR,5);
    1924:	ad e2       	ldi	r26, 0x2D	; 45
    1926:	b0 e0       	ldi	r27, 0x00	; 0
    1928:	ed e2       	ldi	r30, 0x2D	; 45
    192a:	f0 e0       	ldi	r31, 0x00	; 0
    192c:	80 81       	ld	r24, Z
    192e:	80 62       	ori	r24, 0x20	; 32
    1930:	8c 93       	st	X, r24
#else
#error"Data Order Option Is Not Valid.."
#endif
	/*Set Clock Polarity And Phase*/
#if MSPI_SETCLOCKPOLARIT == MSPI_RISING_POLARITY
	CLR_BIT(SPCR,3);
    1932:	ad e2       	ldi	r26, 0x2D	; 45
    1934:	b0 e0       	ldi	r27, 0x00	; 0
    1936:	ed e2       	ldi	r30, 0x2D	; 45
    1938:	f0 e0       	ldi	r31, 0x00	; 0
    193a:	80 81       	ld	r24, Z
    193c:	87 7f       	andi	r24, 0xF7	; 247
    193e:	8c 93       	st	X, r24
#else
#error"Clock Polarity Option Is Not Valid.."
#endif

#if MSPI_SETCLOCKPHASE == MSPI_SETUP_PHASE
	SET_BIT(SPCR,2);
    1940:	ad e2       	ldi	r26, 0x2D	; 45
    1942:	b0 e0       	ldi	r27, 0x00	; 0
    1944:	ed e2       	ldi	r30, 0x2D	; 45
    1946:	f0 e0       	ldi	r31, 0x00	; 0
    1948:	80 81       	ld	r24, Z
    194a:	84 60       	ori	r24, 0x04	; 4
    194c:	8c 93       	st	X, r24
#else
#error"Clock Phase Option Is Not Valid.."
#endif
	/*Set Double Speed*/
#if MSPI_SETDOUBLESPEED == MSPI_DOUBLESPEED
	SET_BIT(SPSR,0);
    194e:	ae e2       	ldi	r26, 0x2E	; 46
    1950:	b0 e0       	ldi	r27, 0x00	; 0
    1952:	ee e2       	ldi	r30, 0x2E	; 46
    1954:	f0 e0       	ldi	r31, 0x00	; 0
    1956:	80 81       	ld	r24, Z
    1958:	81 60       	ori	r24, 0x01	; 1
    195a:	8c 93       	st	X, r24
	CLR_BIT(SPSR,0);
#else
#error"Double Speed Option Is Not Valid.."
#endif
	       /*Set PreScaler */
	SPCR&=0x3F;
    195c:	ad e2       	ldi	r26, 0x2D	; 45
    195e:	b0 e0       	ldi	r27, 0x00	; 0
    1960:	ed e2       	ldi	r30, 0x2D	; 45
    1962:	f0 e0       	ldi	r31, 0x00	; 0
    1964:	80 81       	ld	r24, Z
    1966:	8f 73       	andi	r24, 0x3F	; 63
    1968:	8c 93       	st	X, r24
	SPCR|=MSPI_PRESCALER;
    196a:	ad e2       	ldi	r26, 0x2D	; 45
    196c:	b0 e0       	ldi	r27, 0x00	; 0
    196e:	ed e2       	ldi	r30, 0x2D	; 45
    1970:	f0 e0       	ldi	r31, 0x00	; 0
    1972:	80 81       	ld	r24, Z
    1974:	81 60       	ori	r24, 0x01	; 1
    1976:	8c 93       	st	X, r24
	      /*SET as Master*/
	SET_BIT(SPCR,4);
    1978:	ad e2       	ldi	r26, 0x2D	; 45
    197a:	b0 e0       	ldi	r27, 0x00	; 0
    197c:	ed e2       	ldi	r30, 0x2D	; 45
    197e:	f0 e0       	ldi	r31, 0x00	; 0
    1980:	80 81       	ld	r24, Z
    1982:	80 61       	ori	r24, 0x10	; 16
    1984:	8c 93       	st	X, r24
	      /*Enable SPI*/
	SET_BIT(SPCR,6);
    1986:	ad e2       	ldi	r26, 0x2D	; 45
    1988:	b0 e0       	ldi	r27, 0x00	; 0
    198a:	ed e2       	ldi	r30, 0x2D	; 45
    198c:	f0 e0       	ldi	r31, 0x00	; 0
    198e:	80 81       	ld	r24, Z
    1990:	80 64       	ori	r24, 0x40	; 64
    1992:	8c 93       	st	X, r24
	/*Enable SPI interrupt*/
	SET_BIT(SPCR,7);
    1994:	ad e2       	ldi	r26, 0x2D	; 45
    1996:	b0 e0       	ldi	r27, 0x00	; 0
    1998:	ed e2       	ldi	r30, 0x2D	; 45
    199a:	f0 e0       	ldi	r31, 0x00	; 0
    199c:	80 81       	ld	r24, Z
    199e:	80 68       	ori	r24, 0x80	; 128
    19a0:	8c 93       	st	X, r24
}
    19a2:	cf 91       	pop	r28
    19a4:	df 91       	pop	r29
    19a6:	08 95       	ret

000019a8 <MSPI_VidSalveInit>:
void MSPI_VidSalveInit(void)
{
    19a8:	df 93       	push	r29
    19aa:	cf 93       	push	r28
    19ac:	cd b7       	in	r28, 0x3d	; 61
    19ae:	de b7       	in	r29, 0x3e	; 62
	/*Set Data Order */
#if MSPI_DATAORDER == MSPI_LSB_DATAORDER
	SET_BIT(SPCR,5);
    19b0:	ad e2       	ldi	r26, 0x2D	; 45
    19b2:	b0 e0       	ldi	r27, 0x00	; 0
    19b4:	ed e2       	ldi	r30, 0x2D	; 45
    19b6:	f0 e0       	ldi	r31, 0x00	; 0
    19b8:	80 81       	ld	r24, Z
    19ba:	80 62       	ori	r24, 0x20	; 32
    19bc:	8c 93       	st	X, r24
#else
#error"Data Order Option Is Not Valid.."
#endif
	/*Set Clock Polarity And Phase*/
#if MSPI_SETCLOCKPOLARIT == MSPI_RISING_POLARITY
	CLR_BIT(SPCR,3);
    19be:	ad e2       	ldi	r26, 0x2D	; 45
    19c0:	b0 e0       	ldi	r27, 0x00	; 0
    19c2:	ed e2       	ldi	r30, 0x2D	; 45
    19c4:	f0 e0       	ldi	r31, 0x00	; 0
    19c6:	80 81       	ld	r24, Z
    19c8:	87 7f       	andi	r24, 0xF7	; 247
    19ca:	8c 93       	st	X, r24
#else
#error"Clock Polarity Option Is Not Valid.."
#endif

#if MSPI_SETCLOCKPHASE == MSPI_SETUP_PHASE
	SET_BIT(SPCR,2);
    19cc:	ad e2       	ldi	r26, 0x2D	; 45
    19ce:	b0 e0       	ldi	r27, 0x00	; 0
    19d0:	ed e2       	ldi	r30, 0x2D	; 45
    19d2:	f0 e0       	ldi	r31, 0x00	; 0
    19d4:	80 81       	ld	r24, Z
    19d6:	84 60       	ori	r24, 0x04	; 4
    19d8:	8c 93       	st	X, r24
#else
#error"Clock Phase Option Is Not Valid.."
#endif

	       /*SET as Salve*/
	CLR_BIT(SPCR,4);
    19da:	ad e2       	ldi	r26, 0x2D	; 45
    19dc:	b0 e0       	ldi	r27, 0x00	; 0
    19de:	ed e2       	ldi	r30, 0x2D	; 45
    19e0:	f0 e0       	ldi	r31, 0x00	; 0
    19e2:	80 81       	ld	r24, Z
    19e4:	8f 7e       	andi	r24, 0xEF	; 239
    19e6:	8c 93       	st	X, r24
	       /*Enable SPI*/
	SET_BIT(SPCR,6);
    19e8:	ad e2       	ldi	r26, 0x2D	; 45
    19ea:	b0 e0       	ldi	r27, 0x00	; 0
    19ec:	ed e2       	ldi	r30, 0x2D	; 45
    19ee:	f0 e0       	ldi	r31, 0x00	; 0
    19f0:	80 81       	ld	r24, Z
    19f2:	80 64       	ori	r24, 0x40	; 64
    19f4:	8c 93       	st	X, r24
	      /*Enable SPI interrupt*/
		SET_BIT(SPCR,7);
    19f6:	ad e2       	ldi	r26, 0x2D	; 45
    19f8:	b0 e0       	ldi	r27, 0x00	; 0
    19fa:	ed e2       	ldi	r30, 0x2D	; 45
    19fc:	f0 e0       	ldi	r31, 0x00	; 0
    19fe:	80 81       	ld	r24, Z
    1a00:	80 68       	ori	r24, 0x80	; 128
    1a02:	8c 93       	st	X, r24

}
    1a04:	cf 91       	pop	r28
    1a06:	df 91       	pop	r29
    1a08:	08 95       	ret

00001a0a <MSPI_uint8SendReceiveChar>:
uint8 MSPI_uint8SendReceiveChar(uint8 copy_uint8Char)
{
    1a0a:	df 93       	push	r29
    1a0c:	cf 93       	push	r28
    1a0e:	0f 92       	push	r0
    1a10:	cd b7       	in	r28, 0x3d	; 61
    1a12:	de b7       	in	r29, 0x3e	; 62
    1a14:	89 83       	std	Y+1, r24	; 0x01
	SPDR=copy_uint8Char;
    1a16:	ef e2       	ldi	r30, 0x2F	; 47
    1a18:	f0 e0       	ldi	r31, 0x00	; 0
    1a1a:	89 81       	ldd	r24, Y+1	; 0x01
    1a1c:	80 83       	st	Z, r24
	while(GET_BIT(SPSR,6)==0);
    1a1e:	ee e2       	ldi	r30, 0x2E	; 46
    1a20:	f0 e0       	ldi	r31, 0x00	; 0
    1a22:	80 81       	ld	r24, Z
    1a24:	82 95       	swap	r24
    1a26:	86 95       	lsr	r24
    1a28:	86 95       	lsr	r24
    1a2a:	83 70       	andi	r24, 0x03	; 3
    1a2c:	88 2f       	mov	r24, r24
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	81 70       	andi	r24, 0x01	; 1
    1a32:	90 70       	andi	r25, 0x00	; 0
    1a34:	00 97       	sbiw	r24, 0x00	; 0
    1a36:	99 f3       	breq	.-26     	; 0x1a1e <MSPI_uint8SendReceiveChar+0x14>
	return SPDR;
    1a38:	ef e2       	ldi	r30, 0x2F	; 47
    1a3a:	f0 e0       	ldi	r31, 0x00	; 0
    1a3c:	80 81       	ld	r24, Z
}
    1a3e:	0f 90       	pop	r0
    1a40:	cf 91       	pop	r28
    1a42:	df 91       	pop	r29
    1a44:	08 95       	ret

00001a46 <MSPI_VidSPI_SetCallBack>:
void MSPI_VidSPI_SetCallBack(void(*PtrToFun)(void))
{
    1a46:	df 93       	push	r29
    1a48:	cf 93       	push	r28
    1a4a:	00 d0       	rcall	.+0      	; 0x1a4c <MSPI_VidSPI_SetCallBack+0x6>
    1a4c:	cd b7       	in	r28, 0x3d	; 61
    1a4e:	de b7       	in	r29, 0x3e	; 62
    1a50:	9a 83       	std	Y+2, r25	; 0x02
    1a52:	89 83       	std	Y+1, r24	; 0x01
	MSPI_CALLBACK=PtrToFun;
    1a54:	89 81       	ldd	r24, Y+1	; 0x01
    1a56:	9a 81       	ldd	r25, Y+2	; 0x02
    1a58:	90 93 9a 00 	sts	0x009A, r25
    1a5c:	80 93 99 00 	sts	0x0099, r24
}
    1a60:	0f 90       	pop	r0
    1a62:	0f 90       	pop	r0
    1a64:	cf 91       	pop	r28
    1a66:	df 91       	pop	r29
    1a68:	08 95       	ret

00001a6a <__vector_12>:
void __vector_12(void)    __attribute__((signal));
void __vector_12(void)
{
    1a6a:	1f 92       	push	r1
    1a6c:	0f 92       	push	r0
    1a6e:	0f b6       	in	r0, 0x3f	; 63
    1a70:	0f 92       	push	r0
    1a72:	11 24       	eor	r1, r1
    1a74:	2f 93       	push	r18
    1a76:	3f 93       	push	r19
    1a78:	4f 93       	push	r20
    1a7a:	5f 93       	push	r21
    1a7c:	6f 93       	push	r22
    1a7e:	7f 93       	push	r23
    1a80:	8f 93       	push	r24
    1a82:	9f 93       	push	r25
    1a84:	af 93       	push	r26
    1a86:	bf 93       	push	r27
    1a88:	ef 93       	push	r30
    1a8a:	ff 93       	push	r31
    1a8c:	df 93       	push	r29
    1a8e:	cf 93       	push	r28
    1a90:	cd b7       	in	r28, 0x3d	; 61
    1a92:	de b7       	in	r29, 0x3e	; 62
	MSPI_CALLBACK();
    1a94:	e0 91 99 00 	lds	r30, 0x0099
    1a98:	f0 91 9a 00 	lds	r31, 0x009A
    1a9c:	09 95       	icall
}
    1a9e:	cf 91       	pop	r28
    1aa0:	df 91       	pop	r29
    1aa2:	ff 91       	pop	r31
    1aa4:	ef 91       	pop	r30
    1aa6:	bf 91       	pop	r27
    1aa8:	af 91       	pop	r26
    1aaa:	9f 91       	pop	r25
    1aac:	8f 91       	pop	r24
    1aae:	7f 91       	pop	r23
    1ab0:	6f 91       	pop	r22
    1ab2:	5f 91       	pop	r21
    1ab4:	4f 91       	pop	r20
    1ab6:	3f 91       	pop	r19
    1ab8:	2f 91       	pop	r18
    1aba:	0f 90       	pop	r0
    1abc:	0f be       	out	0x3f, r0	; 63
    1abe:	0f 90       	pop	r0
    1ac0:	1f 90       	pop	r1
    1ac2:	18 95       	reti

00001ac4 <MGIE_Enable>:

#include"../../LIB/LSTD_TYPES.h"
#include"../../LIB/LBIT_MATH.h"
#include"MGIE_Private.h"
void MGIE_Enable(void)
{
    1ac4:	df 93       	push	r29
    1ac6:	cf 93       	push	r28
    1ac8:	cd b7       	in	r28, 0x3d	; 61
    1aca:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
    1acc:	af e5       	ldi	r26, 0x5F	; 95
    1ace:	b0 e0       	ldi	r27, 0x00	; 0
    1ad0:	ef e5       	ldi	r30, 0x5F	; 95
    1ad2:	f0 e0       	ldi	r31, 0x00	; 0
    1ad4:	80 81       	ld	r24, Z
    1ad6:	80 68       	ori	r24, 0x80	; 128
    1ad8:	8c 93       	st	X, r24
}
    1ada:	cf 91       	pop	r28
    1adc:	df 91       	pop	r29
    1ade:	08 95       	ret

00001ae0 <MGIE_Disable>:
void MGIE_Disable(void)
{
    1ae0:	df 93       	push	r29
    1ae2:	cf 93       	push	r28
    1ae4:	cd b7       	in	r28, 0x3d	; 61
    1ae6:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,7);
    1ae8:	af e5       	ldi	r26, 0x5F	; 95
    1aea:	b0 e0       	ldi	r27, 0x00	; 0
    1aec:	ef e5       	ldi	r30, 0x5F	; 95
    1aee:	f0 e0       	ldi	r31, 0x00	; 0
    1af0:	80 81       	ld	r24, Z
    1af2:	8f 77       	andi	r24, 0x7F	; 127
    1af4:	8c 93       	st	X, r24
}
    1af6:	cf 91       	pop	r28
    1af8:	df 91       	pop	r29
    1afa:	08 95       	ret

00001afc <MEXTI_VidInitEXTI0>:
#include "MEXTI_Config.h"

void (*CALLBACK)(void);

void MEXTI_VidInitEXTI0(void)
{
    1afc:	df 93       	push	r29
    1afe:	cf 93       	push	r28
    1b00:	cd b7       	in	r28, 0x3d	; 61
    1b02:	de b7       	in	r29, 0x3e	; 62
	/*Select sense control*/
#if SET_SENCECONTROL_EXTI0==MEXTI_RISING_EDGE
	SET_BIT(MCUCR,1);
	SET_BIT(MCUCR,0);
#elif SET_SENCECONTROL_EXTI0==MEXTI_FALLING_EDGE
	SET_BIT(MCUCR,1);
    1b04:	a5 e5       	ldi	r26, 0x55	; 85
    1b06:	b0 e0       	ldi	r27, 0x00	; 0
    1b08:	e5 e5       	ldi	r30, 0x55	; 85
    1b0a:	f0 e0       	ldi	r31, 0x00	; 0
    1b0c:	80 81       	ld	r24, Z
    1b0e:	82 60       	ori	r24, 0x02	; 2
    1b10:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,0);
    1b12:	a5 e5       	ldi	r26, 0x55	; 85
    1b14:	b0 e0       	ldi	r27, 0x00	; 0
    1b16:	e5 e5       	ldi	r30, 0x55	; 85
    1b18:	f0 e0       	ldi	r31, 0x00	; 0
    1b1a:	80 81       	ld	r24, Z
    1b1c:	8e 7f       	andi	r24, 0xFE	; 254
    1b1e:	8c 93       	st	X, r24
#else
#error "Sense Control option of EXTI0 is not valid"

#endif
	/*Enable EXTI 0*/
	SET_BIT(GICR,6);
    1b20:	ab e5       	ldi	r26, 0x5B	; 91
    1b22:	b0 e0       	ldi	r27, 0x00	; 0
    1b24:	eb e5       	ldi	r30, 0x5B	; 91
    1b26:	f0 e0       	ldi	r31, 0x00	; 0
    1b28:	80 81       	ld	r24, Z
    1b2a:	80 64       	ori	r24, 0x40	; 64
    1b2c:	8c 93       	st	X, r24

}
    1b2e:	cf 91       	pop	r28
    1b30:	df 91       	pop	r29
    1b32:	08 95       	ret

00001b34 <MEXTI_VidInitEXTI1>:
void MEXTI_VidInitEXTI1(void)
{
    1b34:	df 93       	push	r29
    1b36:	cf 93       	push	r28
    1b38:	cd b7       	in	r28, 0x3d	; 61
    1b3a:	de b7       	in	r29, 0x3e	; 62
	/*Select Sense Control */
#if SET_SENCECONTROL_EXTI1==MEXTI_RISING_EDGE
	SET_BIT(MCUCR,3);
    1b3c:	a5 e5       	ldi	r26, 0x55	; 85
    1b3e:	b0 e0       	ldi	r27, 0x00	; 0
    1b40:	e5 e5       	ldi	r30, 0x55	; 85
    1b42:	f0 e0       	ldi	r31, 0x00	; 0
    1b44:	80 81       	ld	r24, Z
    1b46:	88 60       	ori	r24, 0x08	; 8
    1b48:	8c 93       	st	X, r24
	SET_BIT(MCUCR,2);
    1b4a:	a5 e5       	ldi	r26, 0x55	; 85
    1b4c:	b0 e0       	ldi	r27, 0x00	; 0
    1b4e:	e5 e5       	ldi	r30, 0x55	; 85
    1b50:	f0 e0       	ldi	r31, 0x00	; 0
    1b52:	80 81       	ld	r24, Z
    1b54:	84 60       	ori	r24, 0x04	; 4
    1b56:	8c 93       	st	X, r24
#else
#error "Sense Control option of EXTI1 is not valid"

#endif
	/* Enable EXTI 1*/
	SET_BIT(GICR,7);
    1b58:	ab e5       	ldi	r26, 0x5B	; 91
    1b5a:	b0 e0       	ldi	r27, 0x00	; 0
    1b5c:	eb e5       	ldi	r30, 0x5B	; 91
    1b5e:	f0 e0       	ldi	r31, 0x00	; 0
    1b60:	80 81       	ld	r24, Z
    1b62:	80 68       	ori	r24, 0x80	; 128
    1b64:	8c 93       	st	X, r24
}
    1b66:	cf 91       	pop	r28
    1b68:	df 91       	pop	r29
    1b6a:	08 95       	ret

00001b6c <MEXTI_VidInitEXTI2>:
void MEXTI_VidInitEXTI2(void)
{
    1b6c:	df 93       	push	r29
    1b6e:	cf 93       	push	r28
    1b70:	cd b7       	in	r28, 0x3d	; 61
    1b72:	de b7       	in	r29, 0x3e	; 62
	/*Select Sense Control */
	#if SET_SENCECONTROL_EXTI2==MEXTI_RISING_EDGE
		SET_BIT(MCUCSR,6);
	#elif SET_SENCECONTROL_EXTI2==MEXTI_FALLING_EDGE
		CLR_BIT(MCUCSR,6);
    1b74:	a4 e5       	ldi	r26, 0x54	; 84
    1b76:	b0 e0       	ldi	r27, 0x00	; 0
    1b78:	e4 e5       	ldi	r30, 0x54	; 84
    1b7a:	f0 e0       	ldi	r31, 0x00	; 0
    1b7c:	80 81       	ld	r24, Z
    1b7e:	8f 7b       	andi	r24, 0xBF	; 191
    1b80:	8c 93       	st	X, r24
	#else
	#error "Sense Control option of EXTI2 is not valid"

	#endif
		/* Enable EXTI 2*/
		SET_BIT(GICR,5);
    1b82:	ab e5       	ldi	r26, 0x5B	; 91
    1b84:	b0 e0       	ldi	r27, 0x00	; 0
    1b86:	eb e5       	ldi	r30, 0x5B	; 91
    1b88:	f0 e0       	ldi	r31, 0x00	; 0
    1b8a:	80 81       	ld	r24, Z
    1b8c:	80 62       	ori	r24, 0x20	; 32
    1b8e:	8c 93       	st	X, r24

}
    1b90:	cf 91       	pop	r28
    1b92:	df 91       	pop	r29
    1b94:	08 95       	ret

00001b96 <MEXTI_VidSenseControlSelect>:
void MEXTI_VidSenseControlSelect(uint8 copy_uint8EXTI_ID,uint8 copy_uint8EXTI_SenseControl)
{
    1b96:	df 93       	push	r29
    1b98:	cf 93       	push	r28
    1b9a:	00 d0       	rcall	.+0      	; 0x1b9c <MEXTI_VidSenseControlSelect+0x6>
    1b9c:	00 d0       	rcall	.+0      	; 0x1b9e <MEXTI_VidSenseControlSelect+0x8>
    1b9e:	cd b7       	in	r28, 0x3d	; 61
    1ba0:	de b7       	in	r29, 0x3e	; 62
    1ba2:	89 83       	std	Y+1, r24	; 0x01
    1ba4:	6a 83       	std	Y+2, r22	; 0x02
	switch (copy_uint8EXTI_ID)
    1ba6:	89 81       	ldd	r24, Y+1	; 0x01
    1ba8:	28 2f       	mov	r18, r24
    1baa:	30 e0       	ldi	r19, 0x00	; 0
    1bac:	3c 83       	std	Y+4, r19	; 0x04
    1bae:	2b 83       	std	Y+3, r18	; 0x03
    1bb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb2:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb4:	81 30       	cpi	r24, 0x01	; 1
    1bb6:	91 05       	cpc	r25, r1
    1bb8:	09 f4       	brne	.+2      	; 0x1bbc <MEXTI_VidSenseControlSelect+0x26>
    1bba:	54 c0       	rjmp	.+168    	; 0x1c64 <MEXTI_VidSenseControlSelect+0xce>
    1bbc:	2b 81       	ldd	r18, Y+3	; 0x03
    1bbe:	3c 81       	ldd	r19, Y+4	; 0x04
    1bc0:	22 30       	cpi	r18, 0x02	; 2
    1bc2:	31 05       	cpc	r19, r1
    1bc4:	09 f4       	brne	.+2      	; 0x1bc8 <MEXTI_VidSenseControlSelect+0x32>
    1bc6:	96 c0       	rjmp	.+300    	; 0x1cf4 <MEXTI_VidSenseControlSelect+0x15e>
    1bc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bca:	9c 81       	ldd	r25, Y+4	; 0x04
    1bcc:	00 97       	sbiw	r24, 0x00	; 0
    1bce:	09 f0       	breq	.+2      	; 0x1bd2 <MEXTI_VidSenseControlSelect+0x3c>
    1bd0:	a6 c0       	rjmp	.+332    	; 0x1d1e <MEXTI_VidSenseControlSelect+0x188>
	{
	case EXTI0:
		if(copy_uint8EXTI_SenseControl==MEXTI_RISING_EDGE)
    1bd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd4:	88 23       	and	r24, r24
    1bd6:	79 f4       	brne	.+30     	; 0x1bf6 <MEXTI_VidSenseControlSelect+0x60>
		{
			SET_BIT(MCUCR,1);
    1bd8:	a5 e5       	ldi	r26, 0x55	; 85
    1bda:	b0 e0       	ldi	r27, 0x00	; 0
    1bdc:	e5 e5       	ldi	r30, 0x55	; 85
    1bde:	f0 e0       	ldi	r31, 0x00	; 0
    1be0:	80 81       	ld	r24, Z
    1be2:	82 60       	ori	r24, 0x02	; 2
    1be4:	8c 93       	st	X, r24
			SET_BIT(MCUCR,0);
    1be6:	a5 e5       	ldi	r26, 0x55	; 85
    1be8:	b0 e0       	ldi	r27, 0x00	; 0
    1bea:	e5 e5       	ldi	r30, 0x55	; 85
    1bec:	f0 e0       	ldi	r31, 0x00	; 0
    1bee:	80 81       	ld	r24, Z
    1bf0:	81 60       	ori	r24, 0x01	; 1
    1bf2:	8c 93       	st	X, r24
    1bf4:	94 c0       	rjmp	.+296    	; 0x1d1e <MEXTI_VidSenseControlSelect+0x188>
		}
		else if(copy_uint8EXTI_SenseControl==MEXTI_FALLING_EDGE)
    1bf6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf8:	81 30       	cpi	r24, 0x01	; 1
    1bfa:	79 f4       	brne	.+30     	; 0x1c1a <MEXTI_VidSenseControlSelect+0x84>
		{
			SET_BIT(MCUCR,1);
    1bfc:	a5 e5       	ldi	r26, 0x55	; 85
    1bfe:	b0 e0       	ldi	r27, 0x00	; 0
    1c00:	e5 e5       	ldi	r30, 0x55	; 85
    1c02:	f0 e0       	ldi	r31, 0x00	; 0
    1c04:	80 81       	ld	r24, Z
    1c06:	82 60       	ori	r24, 0x02	; 2
    1c08:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,0);
    1c0a:	a5 e5       	ldi	r26, 0x55	; 85
    1c0c:	b0 e0       	ldi	r27, 0x00	; 0
    1c0e:	e5 e5       	ldi	r30, 0x55	; 85
    1c10:	f0 e0       	ldi	r31, 0x00	; 0
    1c12:	80 81       	ld	r24, Z
    1c14:	8e 7f       	andi	r24, 0xFE	; 254
    1c16:	8c 93       	st	X, r24
    1c18:	82 c0       	rjmp	.+260    	; 0x1d1e <MEXTI_VidSenseControlSelect+0x188>
		}
		else if(copy_uint8EXTI_SenseControl==MEXTI_ANYLOGICALCHANGE)
    1c1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c1c:	82 30       	cpi	r24, 0x02	; 2
    1c1e:	79 f4       	brne	.+30     	; 0x1c3e <MEXTI_VidSenseControlSelect+0xa8>
		{
			CLR_BIT(MCUCR,1);
    1c20:	a5 e5       	ldi	r26, 0x55	; 85
    1c22:	b0 e0       	ldi	r27, 0x00	; 0
    1c24:	e5 e5       	ldi	r30, 0x55	; 85
    1c26:	f0 e0       	ldi	r31, 0x00	; 0
    1c28:	80 81       	ld	r24, Z
    1c2a:	8d 7f       	andi	r24, 0xFD	; 253
    1c2c:	8c 93       	st	X, r24
			SET_BIT(MCUCR,0);
    1c2e:	a5 e5       	ldi	r26, 0x55	; 85
    1c30:	b0 e0       	ldi	r27, 0x00	; 0
    1c32:	e5 e5       	ldi	r30, 0x55	; 85
    1c34:	f0 e0       	ldi	r31, 0x00	; 0
    1c36:	80 81       	ld	r24, Z
    1c38:	81 60       	ori	r24, 0x01	; 1
    1c3a:	8c 93       	st	X, r24
    1c3c:	70 c0       	rjmp	.+224    	; 0x1d1e <MEXTI_VidSenseControlSelect+0x188>
		}
		else if(copy_uint8EXTI_SenseControl==MEXTI_LOW_LEVEL)
    1c3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c40:	83 30       	cpi	r24, 0x03	; 3
    1c42:	09 f0       	breq	.+2      	; 0x1c46 <MEXTI_VidSenseControlSelect+0xb0>
    1c44:	6c c0       	rjmp	.+216    	; 0x1d1e <MEXTI_VidSenseControlSelect+0x188>
		{
			CLR_BIT(MCUCR,1);
    1c46:	a5 e5       	ldi	r26, 0x55	; 85
    1c48:	b0 e0       	ldi	r27, 0x00	; 0
    1c4a:	e5 e5       	ldi	r30, 0x55	; 85
    1c4c:	f0 e0       	ldi	r31, 0x00	; 0
    1c4e:	80 81       	ld	r24, Z
    1c50:	8d 7f       	andi	r24, 0xFD	; 253
    1c52:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,0);
    1c54:	a5 e5       	ldi	r26, 0x55	; 85
    1c56:	b0 e0       	ldi	r27, 0x00	; 0
    1c58:	e5 e5       	ldi	r30, 0x55	; 85
    1c5a:	f0 e0       	ldi	r31, 0x00	; 0
    1c5c:	80 81       	ld	r24, Z
    1c5e:	8e 7f       	andi	r24, 0xFE	; 254
    1c60:	8c 93       	st	X, r24
    1c62:	5d c0       	rjmp	.+186    	; 0x1d1e <MEXTI_VidSenseControlSelect+0x188>
			/*do nothing*/
		}
		break;

	case EXTI1:
		if(copy_uint8EXTI_SenseControl==MEXTI_RISING_EDGE)
    1c64:	8a 81       	ldd	r24, Y+2	; 0x02
    1c66:	88 23       	and	r24, r24
    1c68:	79 f4       	brne	.+30     	; 0x1c88 <MEXTI_VidSenseControlSelect+0xf2>
		{
			SET_BIT(MCUCR,3);
    1c6a:	a5 e5       	ldi	r26, 0x55	; 85
    1c6c:	b0 e0       	ldi	r27, 0x00	; 0
    1c6e:	e5 e5       	ldi	r30, 0x55	; 85
    1c70:	f0 e0       	ldi	r31, 0x00	; 0
    1c72:	80 81       	ld	r24, Z
    1c74:	88 60       	ori	r24, 0x08	; 8
    1c76:	8c 93       	st	X, r24
			SET_BIT(MCUCR,2);
    1c78:	a5 e5       	ldi	r26, 0x55	; 85
    1c7a:	b0 e0       	ldi	r27, 0x00	; 0
    1c7c:	e5 e5       	ldi	r30, 0x55	; 85
    1c7e:	f0 e0       	ldi	r31, 0x00	; 0
    1c80:	80 81       	ld	r24, Z
    1c82:	84 60       	ori	r24, 0x04	; 4
    1c84:	8c 93       	st	X, r24
    1c86:	4b c0       	rjmp	.+150    	; 0x1d1e <MEXTI_VidSenseControlSelect+0x188>
		}
		else if(copy_uint8EXTI_SenseControl==MEXTI_FALLING_EDGE)
    1c88:	8a 81       	ldd	r24, Y+2	; 0x02
    1c8a:	81 30       	cpi	r24, 0x01	; 1
    1c8c:	79 f4       	brne	.+30     	; 0x1cac <MEXTI_VidSenseControlSelect+0x116>
		{
			SET_BIT(MCUCR,3);
    1c8e:	a5 e5       	ldi	r26, 0x55	; 85
    1c90:	b0 e0       	ldi	r27, 0x00	; 0
    1c92:	e5 e5       	ldi	r30, 0x55	; 85
    1c94:	f0 e0       	ldi	r31, 0x00	; 0
    1c96:	80 81       	ld	r24, Z
    1c98:	88 60       	ori	r24, 0x08	; 8
    1c9a:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,2);
    1c9c:	a5 e5       	ldi	r26, 0x55	; 85
    1c9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ca0:	e5 e5       	ldi	r30, 0x55	; 85
    1ca2:	f0 e0       	ldi	r31, 0x00	; 0
    1ca4:	80 81       	ld	r24, Z
    1ca6:	8b 7f       	andi	r24, 0xFB	; 251
    1ca8:	8c 93       	st	X, r24
    1caa:	39 c0       	rjmp	.+114    	; 0x1d1e <MEXTI_VidSenseControlSelect+0x188>
		}
		else if(copy_uint8EXTI_SenseControl==MEXTI_ANYLOGICALCHANGE)
    1cac:	8a 81       	ldd	r24, Y+2	; 0x02
    1cae:	82 30       	cpi	r24, 0x02	; 2
    1cb0:	79 f4       	brne	.+30     	; 0x1cd0 <MEXTI_VidSenseControlSelect+0x13a>
		{
			CLR_BIT(MCUCR,3);
    1cb2:	a5 e5       	ldi	r26, 0x55	; 85
    1cb4:	b0 e0       	ldi	r27, 0x00	; 0
    1cb6:	e5 e5       	ldi	r30, 0x55	; 85
    1cb8:	f0 e0       	ldi	r31, 0x00	; 0
    1cba:	80 81       	ld	r24, Z
    1cbc:	87 7f       	andi	r24, 0xF7	; 247
    1cbe:	8c 93       	st	X, r24
			SET_BIT(MCUCR,2);
    1cc0:	a5 e5       	ldi	r26, 0x55	; 85
    1cc2:	b0 e0       	ldi	r27, 0x00	; 0
    1cc4:	e5 e5       	ldi	r30, 0x55	; 85
    1cc6:	f0 e0       	ldi	r31, 0x00	; 0
    1cc8:	80 81       	ld	r24, Z
    1cca:	84 60       	ori	r24, 0x04	; 4
    1ccc:	8c 93       	st	X, r24
    1cce:	27 c0       	rjmp	.+78     	; 0x1d1e <MEXTI_VidSenseControlSelect+0x188>
		}
		else if(copy_uint8EXTI_SenseControl==MEXTI_LOW_LEVEL)
    1cd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd2:	83 30       	cpi	r24, 0x03	; 3
    1cd4:	21 f5       	brne	.+72     	; 0x1d1e <MEXTI_VidSenseControlSelect+0x188>
		{
			CLR_BIT(MCUCR,3);
    1cd6:	a5 e5       	ldi	r26, 0x55	; 85
    1cd8:	b0 e0       	ldi	r27, 0x00	; 0
    1cda:	e5 e5       	ldi	r30, 0x55	; 85
    1cdc:	f0 e0       	ldi	r31, 0x00	; 0
    1cde:	80 81       	ld	r24, Z
    1ce0:	87 7f       	andi	r24, 0xF7	; 247
    1ce2:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,2);
    1ce4:	a5 e5       	ldi	r26, 0x55	; 85
    1ce6:	b0 e0       	ldi	r27, 0x00	; 0
    1ce8:	e5 e5       	ldi	r30, 0x55	; 85
    1cea:	f0 e0       	ldi	r31, 0x00	; 0
    1cec:	80 81       	ld	r24, Z
    1cee:	8b 7f       	andi	r24, 0xFB	; 251
    1cf0:	8c 93       	st	X, r24
    1cf2:	15 c0       	rjmp	.+42     	; 0x1d1e <MEXTI_VidSenseControlSelect+0x188>
			/*do nothing*/
		}
		break;

	case EXTI2:
		if(copy_uint8EXTI_SenseControl==MEXTI_RISING_EDGE)
    1cf4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf6:	88 23       	and	r24, r24
    1cf8:	41 f4       	brne	.+16     	; 0x1d0a <MEXTI_VidSenseControlSelect+0x174>
		{
			SET_BIT(MCUCSR,6);
    1cfa:	a4 e5       	ldi	r26, 0x54	; 84
    1cfc:	b0 e0       	ldi	r27, 0x00	; 0
    1cfe:	e4 e5       	ldi	r30, 0x54	; 84
    1d00:	f0 e0       	ldi	r31, 0x00	; 0
    1d02:	80 81       	ld	r24, Z
    1d04:	80 64       	ori	r24, 0x40	; 64
    1d06:	8c 93       	st	X, r24
    1d08:	0a c0       	rjmp	.+20     	; 0x1d1e <MEXTI_VidSenseControlSelect+0x188>
		}
		else if(copy_uint8EXTI_SenseControl==MEXTI_FALLING_EDGE)
    1d0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0c:	81 30       	cpi	r24, 0x01	; 1
    1d0e:	39 f4       	brne	.+14     	; 0x1d1e <MEXTI_VidSenseControlSelect+0x188>
		{
			CLR_BIT(MCUCSR,6);		}
    1d10:	a4 e5       	ldi	r26, 0x54	; 84
    1d12:	b0 e0       	ldi	r27, 0x00	; 0
    1d14:	e4 e5       	ldi	r30, 0x54	; 84
    1d16:	f0 e0       	ldi	r31, 0x00	; 0
    1d18:	80 81       	ld	r24, Z
    1d1a:	8f 7b       	andi	r24, 0xBF	; 191
    1d1c:	8c 93       	st	X, r24
			/*do nothing*/
		}
		break;
	}

}
    1d1e:	0f 90       	pop	r0
    1d20:	0f 90       	pop	r0
    1d22:	0f 90       	pop	r0
    1d24:	0f 90       	pop	r0
    1d26:	cf 91       	pop	r28
    1d28:	df 91       	pop	r29
    1d2a:	08 95       	ret

00001d2c <MEXTI0_VidSetCallBack>:
void MEXTI0_VidSetCallBack(void (*PtrToFun)(void))
{
    1d2c:	df 93       	push	r29
    1d2e:	cf 93       	push	r28
    1d30:	00 d0       	rcall	.+0      	; 0x1d32 <MEXTI0_VidSetCallBack+0x6>
    1d32:	cd b7       	in	r28, 0x3d	; 61
    1d34:	de b7       	in	r29, 0x3e	; 62
    1d36:	9a 83       	std	Y+2, r25	; 0x02
    1d38:	89 83       	std	Y+1, r24	; 0x01
	CALLBACK=PtrToFun;
    1d3a:	89 81       	ldd	r24, Y+1	; 0x01
    1d3c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d3e:	90 93 92 00 	sts	0x0092, r25
    1d42:	80 93 91 00 	sts	0x0091, r24
}
    1d46:	0f 90       	pop	r0
    1d48:	0f 90       	pop	r0
    1d4a:	cf 91       	pop	r28
    1d4c:	df 91       	pop	r29
    1d4e:	08 95       	ret

00001d50 <MEXTI1_VidSetCallBack>:
void MEXTI1_VidSetCallBack(void (*PtrToFun)(void))
{
    1d50:	df 93       	push	r29
    1d52:	cf 93       	push	r28
    1d54:	00 d0       	rcall	.+0      	; 0x1d56 <MEXTI1_VidSetCallBack+0x6>
    1d56:	cd b7       	in	r28, 0x3d	; 61
    1d58:	de b7       	in	r29, 0x3e	; 62
    1d5a:	9a 83       	std	Y+2, r25	; 0x02
    1d5c:	89 83       	std	Y+1, r24	; 0x01
	CALLBACK=PtrToFun;
    1d5e:	89 81       	ldd	r24, Y+1	; 0x01
    1d60:	9a 81       	ldd	r25, Y+2	; 0x02
    1d62:	90 93 92 00 	sts	0x0092, r25
    1d66:	80 93 91 00 	sts	0x0091, r24
}
    1d6a:	0f 90       	pop	r0
    1d6c:	0f 90       	pop	r0
    1d6e:	cf 91       	pop	r28
    1d70:	df 91       	pop	r29
    1d72:	08 95       	ret

00001d74 <MEXTI2_VidSetCallBack>:
void MEXTI2_VidSetCallBack(void (*PtrToFun)(void))
{
    1d74:	df 93       	push	r29
    1d76:	cf 93       	push	r28
    1d78:	00 d0       	rcall	.+0      	; 0x1d7a <MEXTI2_VidSetCallBack+0x6>
    1d7a:	cd b7       	in	r28, 0x3d	; 61
    1d7c:	de b7       	in	r29, 0x3e	; 62
    1d7e:	9a 83       	std	Y+2, r25	; 0x02
    1d80:	89 83       	std	Y+1, r24	; 0x01
	CALLBACK=PtrToFun;
    1d82:	89 81       	ldd	r24, Y+1	; 0x01
    1d84:	9a 81       	ldd	r25, Y+2	; 0x02
    1d86:	90 93 92 00 	sts	0x0092, r25
    1d8a:	80 93 91 00 	sts	0x0091, r24
}
    1d8e:	0f 90       	pop	r0
    1d90:	0f 90       	pop	r0
    1d92:	cf 91       	pop	r28
    1d94:	df 91       	pop	r29
    1d96:	08 95       	ret

00001d98 <__vector_1>:
/*EXTI0*/
void __vector_1(void)   __attribute__((signal));
void __vector_1(void)
{
    1d98:	1f 92       	push	r1
    1d9a:	0f 92       	push	r0
    1d9c:	0f b6       	in	r0, 0x3f	; 63
    1d9e:	0f 92       	push	r0
    1da0:	11 24       	eor	r1, r1
    1da2:	2f 93       	push	r18
    1da4:	3f 93       	push	r19
    1da6:	4f 93       	push	r20
    1da8:	5f 93       	push	r21
    1daa:	6f 93       	push	r22
    1dac:	7f 93       	push	r23
    1dae:	8f 93       	push	r24
    1db0:	9f 93       	push	r25
    1db2:	af 93       	push	r26
    1db4:	bf 93       	push	r27
    1db6:	ef 93       	push	r30
    1db8:	ff 93       	push	r31
    1dba:	df 93       	push	r29
    1dbc:	cf 93       	push	r28
    1dbe:	cd b7       	in	r28, 0x3d	; 61
    1dc0:	de b7       	in	r29, 0x3e	; 62
	CALLBACK();
    1dc2:	e0 91 91 00 	lds	r30, 0x0091
    1dc6:	f0 91 92 00 	lds	r31, 0x0092
    1dca:	09 95       	icall
}
    1dcc:	cf 91       	pop	r28
    1dce:	df 91       	pop	r29
    1dd0:	ff 91       	pop	r31
    1dd2:	ef 91       	pop	r30
    1dd4:	bf 91       	pop	r27
    1dd6:	af 91       	pop	r26
    1dd8:	9f 91       	pop	r25
    1dda:	8f 91       	pop	r24
    1ddc:	7f 91       	pop	r23
    1dde:	6f 91       	pop	r22
    1de0:	5f 91       	pop	r21
    1de2:	4f 91       	pop	r20
    1de4:	3f 91       	pop	r19
    1de6:	2f 91       	pop	r18
    1de8:	0f 90       	pop	r0
    1dea:	0f be       	out	0x3f, r0	; 63
    1dec:	0f 90       	pop	r0
    1dee:	1f 90       	pop	r1
    1df0:	18 95       	reti

00001df2 <__vector_2>:
/*EXTI 1 */
void __vector_2(void)   __attribute__((signal));
void __vector_2(void)
{
    1df2:	1f 92       	push	r1
    1df4:	0f 92       	push	r0
    1df6:	0f b6       	in	r0, 0x3f	; 63
    1df8:	0f 92       	push	r0
    1dfa:	11 24       	eor	r1, r1
    1dfc:	2f 93       	push	r18
    1dfe:	3f 93       	push	r19
    1e00:	4f 93       	push	r20
    1e02:	5f 93       	push	r21
    1e04:	6f 93       	push	r22
    1e06:	7f 93       	push	r23
    1e08:	8f 93       	push	r24
    1e0a:	9f 93       	push	r25
    1e0c:	af 93       	push	r26
    1e0e:	bf 93       	push	r27
    1e10:	ef 93       	push	r30
    1e12:	ff 93       	push	r31
    1e14:	df 93       	push	r29
    1e16:	cf 93       	push	r28
    1e18:	cd b7       	in	r28, 0x3d	; 61
    1e1a:	de b7       	in	r29, 0x3e	; 62
	CALLBACK();
    1e1c:	e0 91 91 00 	lds	r30, 0x0091
    1e20:	f0 91 92 00 	lds	r31, 0x0092
    1e24:	09 95       	icall
}
    1e26:	cf 91       	pop	r28
    1e28:	df 91       	pop	r29
    1e2a:	ff 91       	pop	r31
    1e2c:	ef 91       	pop	r30
    1e2e:	bf 91       	pop	r27
    1e30:	af 91       	pop	r26
    1e32:	9f 91       	pop	r25
    1e34:	8f 91       	pop	r24
    1e36:	7f 91       	pop	r23
    1e38:	6f 91       	pop	r22
    1e3a:	5f 91       	pop	r21
    1e3c:	4f 91       	pop	r20
    1e3e:	3f 91       	pop	r19
    1e40:	2f 91       	pop	r18
    1e42:	0f 90       	pop	r0
    1e44:	0f be       	out	0x3f, r0	; 63
    1e46:	0f 90       	pop	r0
    1e48:	1f 90       	pop	r1
    1e4a:	18 95       	reti

00001e4c <__vector_3>:
/*EXTI2*/
void __vector_3(void)   __attribute__((signal));
void __vector_3(void)
{
    1e4c:	1f 92       	push	r1
    1e4e:	0f 92       	push	r0
    1e50:	0f b6       	in	r0, 0x3f	; 63
    1e52:	0f 92       	push	r0
    1e54:	11 24       	eor	r1, r1
    1e56:	2f 93       	push	r18
    1e58:	3f 93       	push	r19
    1e5a:	4f 93       	push	r20
    1e5c:	5f 93       	push	r21
    1e5e:	6f 93       	push	r22
    1e60:	7f 93       	push	r23
    1e62:	8f 93       	push	r24
    1e64:	9f 93       	push	r25
    1e66:	af 93       	push	r26
    1e68:	bf 93       	push	r27
    1e6a:	ef 93       	push	r30
    1e6c:	ff 93       	push	r31
    1e6e:	df 93       	push	r29
    1e70:	cf 93       	push	r28
    1e72:	cd b7       	in	r28, 0x3d	; 61
    1e74:	de b7       	in	r29, 0x3e	; 62
	CALLBACK();
    1e76:	e0 91 91 00 	lds	r30, 0x0091
    1e7a:	f0 91 92 00 	lds	r31, 0x0092
    1e7e:	09 95       	icall
}
    1e80:	cf 91       	pop	r28
    1e82:	df 91       	pop	r29
    1e84:	ff 91       	pop	r31
    1e86:	ef 91       	pop	r30
    1e88:	bf 91       	pop	r27
    1e8a:	af 91       	pop	r26
    1e8c:	9f 91       	pop	r25
    1e8e:	8f 91       	pop	r24
    1e90:	7f 91       	pop	r23
    1e92:	6f 91       	pop	r22
    1e94:	5f 91       	pop	r21
    1e96:	4f 91       	pop	r20
    1e98:	3f 91       	pop	r19
    1e9a:	2f 91       	pop	r18
    1e9c:	0f 90       	pop	r0
    1e9e:	0f be       	out	0x3f, r0	; 63
    1ea0:	0f 90       	pop	r0
    1ea2:	1f 90       	pop	r1
    1ea4:	18 95       	reti

00001ea6 <MDIO_Errorstate_SetPinDirection>:

/********* Set pin direction************/

ErrorState MDIO_Errorstate_SetPinDirection (uint8 copy_uint8PortID , uint8 copy_uint8PinNumber,uint8 copy_uint8PinDirection)

{
    1ea6:	df 93       	push	r29
    1ea8:	cf 93       	push	r28
    1eaa:	cd b7       	in	r28, 0x3d	; 61
    1eac:	de b7       	in	r29, 0x3e	; 62
    1eae:	28 97       	sbiw	r28, 0x08	; 8
    1eb0:	0f b6       	in	r0, 0x3f	; 63
    1eb2:	f8 94       	cli
    1eb4:	de bf       	out	0x3e, r29	; 62
    1eb6:	0f be       	out	0x3f, r0	; 63
    1eb8:	cd bf       	out	0x3d, r28	; 61
    1eba:	8a 83       	std	Y+2, r24	; 0x02
    1ebc:	6b 83       	std	Y+3, r22	; 0x03
    1ebe:	4c 83       	std	Y+4, r20	; 0x04
	ErrorState loc_Errorstate_Error_state = OK;
    1ec0:	81 e0       	ldi	r24, 0x01	; 1
    1ec2:	89 83       	std	Y+1, r24	; 0x01

	if (copy_uint8PinNumber<8)
    1ec4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec6:	88 30       	cpi	r24, 0x08	; 8
    1ec8:	08 f0       	brcs	.+2      	; 0x1ecc <MDIO_Errorstate_SetPinDirection+0x26>
    1eca:	f1 c0       	rjmp	.+482    	; 0x20ae <MDIO_Errorstate_SetPinDirection+0x208>
	{
		if(copy_uint8PinDirection==PIN_OUTPUT)
    1ecc:	8c 81       	ldd	r24, Y+4	; 0x04
    1ece:	81 30       	cpi	r24, 0x01	; 1
    1ed0:	09 f0       	breq	.+2      	; 0x1ed4 <MDIO_Errorstate_SetPinDirection+0x2e>
    1ed2:	71 c0       	rjmp	.+226    	; 0x1fb6 <MDIO_Errorstate_SetPinDirection+0x110>
		{
			switch(copy_uint8PortID)
    1ed4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed6:	28 2f       	mov	r18, r24
    1ed8:	30 e0       	ldi	r19, 0x00	; 0
    1eda:	38 87       	std	Y+8, r19	; 0x08
    1edc:	2f 83       	std	Y+7, r18	; 0x07
    1ede:	8f 81       	ldd	r24, Y+7	; 0x07
    1ee0:	98 85       	ldd	r25, Y+8	; 0x08
    1ee2:	81 30       	cpi	r24, 0x01	; 1
    1ee4:	91 05       	cpc	r25, r1
    1ee6:	49 f1       	breq	.+82     	; 0x1f3a <MDIO_Errorstate_SetPinDirection+0x94>
    1ee8:	2f 81       	ldd	r18, Y+7	; 0x07
    1eea:	38 85       	ldd	r19, Y+8	; 0x08
    1eec:	22 30       	cpi	r18, 0x02	; 2
    1eee:	31 05       	cpc	r19, r1
    1ef0:	2c f4       	brge	.+10     	; 0x1efc <MDIO_Errorstate_SetPinDirection+0x56>
    1ef2:	8f 81       	ldd	r24, Y+7	; 0x07
    1ef4:	98 85       	ldd	r25, Y+8	; 0x08
    1ef6:	00 97       	sbiw	r24, 0x00	; 0
    1ef8:	61 f0       	breq	.+24     	; 0x1f12 <MDIO_Errorstate_SetPinDirection+0x6c>
    1efa:	5b c0       	rjmp	.+182    	; 0x1fb2 <MDIO_Errorstate_SetPinDirection+0x10c>
    1efc:	2f 81       	ldd	r18, Y+7	; 0x07
    1efe:	38 85       	ldd	r19, Y+8	; 0x08
    1f00:	22 30       	cpi	r18, 0x02	; 2
    1f02:	31 05       	cpc	r19, r1
    1f04:	71 f1       	breq	.+92     	; 0x1f62 <MDIO_Errorstate_SetPinDirection+0xbc>
    1f06:	8f 81       	ldd	r24, Y+7	; 0x07
    1f08:	98 85       	ldd	r25, Y+8	; 0x08
    1f0a:	83 30       	cpi	r24, 0x03	; 3
    1f0c:	91 05       	cpc	r25, r1
    1f0e:	e9 f1       	breq	.+122    	; 0x1f8a <MDIO_Errorstate_SetPinDirection+0xe4>
    1f10:	50 c0       	rjmp	.+160    	; 0x1fb2 <MDIO_Errorstate_SetPinDirection+0x10c>
			{
			case MDIO_PORTA:
				SET_BIT(DDRA,copy_uint8PinNumber);
    1f12:	aa e3       	ldi	r26, 0x3A	; 58
    1f14:	b0 e0       	ldi	r27, 0x00	; 0
    1f16:	ea e3       	ldi	r30, 0x3A	; 58
    1f18:	f0 e0       	ldi	r31, 0x00	; 0
    1f1a:	80 81       	ld	r24, Z
    1f1c:	48 2f       	mov	r20, r24
    1f1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f20:	28 2f       	mov	r18, r24
    1f22:	30 e0       	ldi	r19, 0x00	; 0
    1f24:	81 e0       	ldi	r24, 0x01	; 1
    1f26:	90 e0       	ldi	r25, 0x00	; 0
    1f28:	02 2e       	mov	r0, r18
    1f2a:	02 c0       	rjmp	.+4      	; 0x1f30 <MDIO_Errorstate_SetPinDirection+0x8a>
    1f2c:	88 0f       	add	r24, r24
    1f2e:	99 1f       	adc	r25, r25
    1f30:	0a 94       	dec	r0
    1f32:	e2 f7       	brpl	.-8      	; 0x1f2c <MDIO_Errorstate_SetPinDirection+0x86>
    1f34:	84 2b       	or	r24, r20
    1f36:	8c 93       	st	X, r24
    1f38:	bb c0       	rjmp	.+374    	; 0x20b0 <MDIO_Errorstate_SetPinDirection+0x20a>
				break;
			case MDIO_PORTB:
				SET_BIT(DDRB,copy_uint8PinNumber);
    1f3a:	a7 e3       	ldi	r26, 0x37	; 55
    1f3c:	b0 e0       	ldi	r27, 0x00	; 0
    1f3e:	e7 e3       	ldi	r30, 0x37	; 55
    1f40:	f0 e0       	ldi	r31, 0x00	; 0
    1f42:	80 81       	ld	r24, Z
    1f44:	48 2f       	mov	r20, r24
    1f46:	8b 81       	ldd	r24, Y+3	; 0x03
    1f48:	28 2f       	mov	r18, r24
    1f4a:	30 e0       	ldi	r19, 0x00	; 0
    1f4c:	81 e0       	ldi	r24, 0x01	; 1
    1f4e:	90 e0       	ldi	r25, 0x00	; 0
    1f50:	02 2e       	mov	r0, r18
    1f52:	02 c0       	rjmp	.+4      	; 0x1f58 <MDIO_Errorstate_SetPinDirection+0xb2>
    1f54:	88 0f       	add	r24, r24
    1f56:	99 1f       	adc	r25, r25
    1f58:	0a 94       	dec	r0
    1f5a:	e2 f7       	brpl	.-8      	; 0x1f54 <MDIO_Errorstate_SetPinDirection+0xae>
    1f5c:	84 2b       	or	r24, r20
    1f5e:	8c 93       	st	X, r24
    1f60:	a7 c0       	rjmp	.+334    	; 0x20b0 <MDIO_Errorstate_SetPinDirection+0x20a>
				break;
			case MDIO_PORTC:
				SET_BIT(DDRC,copy_uint8PinNumber);
    1f62:	a4 e3       	ldi	r26, 0x34	; 52
    1f64:	b0 e0       	ldi	r27, 0x00	; 0
    1f66:	e4 e3       	ldi	r30, 0x34	; 52
    1f68:	f0 e0       	ldi	r31, 0x00	; 0
    1f6a:	80 81       	ld	r24, Z
    1f6c:	48 2f       	mov	r20, r24
    1f6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f70:	28 2f       	mov	r18, r24
    1f72:	30 e0       	ldi	r19, 0x00	; 0
    1f74:	81 e0       	ldi	r24, 0x01	; 1
    1f76:	90 e0       	ldi	r25, 0x00	; 0
    1f78:	02 2e       	mov	r0, r18
    1f7a:	02 c0       	rjmp	.+4      	; 0x1f80 <MDIO_Errorstate_SetPinDirection+0xda>
    1f7c:	88 0f       	add	r24, r24
    1f7e:	99 1f       	adc	r25, r25
    1f80:	0a 94       	dec	r0
    1f82:	e2 f7       	brpl	.-8      	; 0x1f7c <MDIO_Errorstate_SetPinDirection+0xd6>
    1f84:	84 2b       	or	r24, r20
    1f86:	8c 93       	st	X, r24
    1f88:	93 c0       	rjmp	.+294    	; 0x20b0 <MDIO_Errorstate_SetPinDirection+0x20a>
				break;
			case MDIO_PORTD:
				SET_BIT(DDRD,copy_uint8PinNumber);
    1f8a:	a1 e3       	ldi	r26, 0x31	; 49
    1f8c:	b0 e0       	ldi	r27, 0x00	; 0
    1f8e:	e1 e3       	ldi	r30, 0x31	; 49
    1f90:	f0 e0       	ldi	r31, 0x00	; 0
    1f92:	80 81       	ld	r24, Z
    1f94:	48 2f       	mov	r20, r24
    1f96:	8b 81       	ldd	r24, Y+3	; 0x03
    1f98:	28 2f       	mov	r18, r24
    1f9a:	30 e0       	ldi	r19, 0x00	; 0
    1f9c:	81 e0       	ldi	r24, 0x01	; 1
    1f9e:	90 e0       	ldi	r25, 0x00	; 0
    1fa0:	02 2e       	mov	r0, r18
    1fa2:	02 c0       	rjmp	.+4      	; 0x1fa8 <MDIO_Errorstate_SetPinDirection+0x102>
    1fa4:	88 0f       	add	r24, r24
    1fa6:	99 1f       	adc	r25, r25
    1fa8:	0a 94       	dec	r0
    1faa:	e2 f7       	brpl	.-8      	; 0x1fa4 <MDIO_Errorstate_SetPinDirection+0xfe>
    1fac:	84 2b       	or	r24, r20
    1fae:	8c 93       	st	X, r24
    1fb0:	7f c0       	rjmp	.+254    	; 0x20b0 <MDIO_Errorstate_SetPinDirection+0x20a>
				break;
			default :
				loc_Errorstate_Error_state=NOK;
    1fb2:	19 82       	std	Y+1, r1	; 0x01
    1fb4:	7d c0       	rjmp	.+250    	; 0x20b0 <MDIO_Errorstate_SetPinDirection+0x20a>
				break;
			}
		}

		else if(copy_uint8PinDirection==PIN_INPUT)
    1fb6:	8c 81       	ldd	r24, Y+4	; 0x04
    1fb8:	88 23       	and	r24, r24
    1fba:	09 f0       	breq	.+2      	; 0x1fbe <MDIO_Errorstate_SetPinDirection+0x118>
    1fbc:	76 c0       	rjmp	.+236    	; 0x20aa <MDIO_Errorstate_SetPinDirection+0x204>
		{
			switch(copy_uint8PortID)
    1fbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc0:	28 2f       	mov	r18, r24
    1fc2:	30 e0       	ldi	r19, 0x00	; 0
    1fc4:	3e 83       	std	Y+6, r19	; 0x06
    1fc6:	2d 83       	std	Y+5, r18	; 0x05
    1fc8:	8d 81       	ldd	r24, Y+5	; 0x05
    1fca:	9e 81       	ldd	r25, Y+6	; 0x06
    1fcc:	81 30       	cpi	r24, 0x01	; 1
    1fce:	91 05       	cpc	r25, r1
    1fd0:	59 f1       	breq	.+86     	; 0x2028 <MDIO_Errorstate_SetPinDirection+0x182>
    1fd2:	2d 81       	ldd	r18, Y+5	; 0x05
    1fd4:	3e 81       	ldd	r19, Y+6	; 0x06
    1fd6:	22 30       	cpi	r18, 0x02	; 2
    1fd8:	31 05       	cpc	r19, r1
    1fda:	2c f4       	brge	.+10     	; 0x1fe6 <MDIO_Errorstate_SetPinDirection+0x140>
    1fdc:	8d 81       	ldd	r24, Y+5	; 0x05
    1fde:	9e 81       	ldd	r25, Y+6	; 0x06
    1fe0:	00 97       	sbiw	r24, 0x00	; 0
    1fe2:	69 f0       	breq	.+26     	; 0x1ffe <MDIO_Errorstate_SetPinDirection+0x158>
    1fe4:	60 c0       	rjmp	.+192    	; 0x20a6 <MDIO_Errorstate_SetPinDirection+0x200>
    1fe6:	2d 81       	ldd	r18, Y+5	; 0x05
    1fe8:	3e 81       	ldd	r19, Y+6	; 0x06
    1fea:	22 30       	cpi	r18, 0x02	; 2
    1fec:	31 05       	cpc	r19, r1
    1fee:	89 f1       	breq	.+98     	; 0x2052 <MDIO_Errorstate_SetPinDirection+0x1ac>
    1ff0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ff2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ff4:	83 30       	cpi	r24, 0x03	; 3
    1ff6:	91 05       	cpc	r25, r1
    1ff8:	09 f4       	brne	.+2      	; 0x1ffc <MDIO_Errorstate_SetPinDirection+0x156>
    1ffa:	40 c0       	rjmp	.+128    	; 0x207c <MDIO_Errorstate_SetPinDirection+0x1d6>
    1ffc:	54 c0       	rjmp	.+168    	; 0x20a6 <MDIO_Errorstate_SetPinDirection+0x200>
			{
			case MDIO_PORTA:
				CLR_BIT(DDRA,copy_uint8PinNumber);
    1ffe:	aa e3       	ldi	r26, 0x3A	; 58
    2000:	b0 e0       	ldi	r27, 0x00	; 0
    2002:	ea e3       	ldi	r30, 0x3A	; 58
    2004:	f0 e0       	ldi	r31, 0x00	; 0
    2006:	80 81       	ld	r24, Z
    2008:	48 2f       	mov	r20, r24
    200a:	8b 81       	ldd	r24, Y+3	; 0x03
    200c:	28 2f       	mov	r18, r24
    200e:	30 e0       	ldi	r19, 0x00	; 0
    2010:	81 e0       	ldi	r24, 0x01	; 1
    2012:	90 e0       	ldi	r25, 0x00	; 0
    2014:	02 2e       	mov	r0, r18
    2016:	02 c0       	rjmp	.+4      	; 0x201c <MDIO_Errorstate_SetPinDirection+0x176>
    2018:	88 0f       	add	r24, r24
    201a:	99 1f       	adc	r25, r25
    201c:	0a 94       	dec	r0
    201e:	e2 f7       	brpl	.-8      	; 0x2018 <MDIO_Errorstate_SetPinDirection+0x172>
    2020:	80 95       	com	r24
    2022:	84 23       	and	r24, r20
    2024:	8c 93       	st	X, r24
    2026:	44 c0       	rjmp	.+136    	; 0x20b0 <MDIO_Errorstate_SetPinDirection+0x20a>
				break;
			case MDIO_PORTB:
				CLR_BIT(DDRB,copy_uint8PinNumber);
    2028:	a7 e3       	ldi	r26, 0x37	; 55
    202a:	b0 e0       	ldi	r27, 0x00	; 0
    202c:	e7 e3       	ldi	r30, 0x37	; 55
    202e:	f0 e0       	ldi	r31, 0x00	; 0
    2030:	80 81       	ld	r24, Z
    2032:	48 2f       	mov	r20, r24
    2034:	8b 81       	ldd	r24, Y+3	; 0x03
    2036:	28 2f       	mov	r18, r24
    2038:	30 e0       	ldi	r19, 0x00	; 0
    203a:	81 e0       	ldi	r24, 0x01	; 1
    203c:	90 e0       	ldi	r25, 0x00	; 0
    203e:	02 2e       	mov	r0, r18
    2040:	02 c0       	rjmp	.+4      	; 0x2046 <MDIO_Errorstate_SetPinDirection+0x1a0>
    2042:	88 0f       	add	r24, r24
    2044:	99 1f       	adc	r25, r25
    2046:	0a 94       	dec	r0
    2048:	e2 f7       	brpl	.-8      	; 0x2042 <MDIO_Errorstate_SetPinDirection+0x19c>
    204a:	80 95       	com	r24
    204c:	84 23       	and	r24, r20
    204e:	8c 93       	st	X, r24
    2050:	2f c0       	rjmp	.+94     	; 0x20b0 <MDIO_Errorstate_SetPinDirection+0x20a>
				break;
			case MDIO_PORTC:
				CLR_BIT(DDRC,copy_uint8PinNumber);
    2052:	a4 e3       	ldi	r26, 0x34	; 52
    2054:	b0 e0       	ldi	r27, 0x00	; 0
    2056:	e4 e3       	ldi	r30, 0x34	; 52
    2058:	f0 e0       	ldi	r31, 0x00	; 0
    205a:	80 81       	ld	r24, Z
    205c:	48 2f       	mov	r20, r24
    205e:	8b 81       	ldd	r24, Y+3	; 0x03
    2060:	28 2f       	mov	r18, r24
    2062:	30 e0       	ldi	r19, 0x00	; 0
    2064:	81 e0       	ldi	r24, 0x01	; 1
    2066:	90 e0       	ldi	r25, 0x00	; 0
    2068:	02 2e       	mov	r0, r18
    206a:	02 c0       	rjmp	.+4      	; 0x2070 <MDIO_Errorstate_SetPinDirection+0x1ca>
    206c:	88 0f       	add	r24, r24
    206e:	99 1f       	adc	r25, r25
    2070:	0a 94       	dec	r0
    2072:	e2 f7       	brpl	.-8      	; 0x206c <MDIO_Errorstate_SetPinDirection+0x1c6>
    2074:	80 95       	com	r24
    2076:	84 23       	and	r24, r20
    2078:	8c 93       	st	X, r24
    207a:	1a c0       	rjmp	.+52     	; 0x20b0 <MDIO_Errorstate_SetPinDirection+0x20a>
				break;
			case MDIO_PORTD:
				CLR_BIT(DDRD,copy_uint8PinNumber);
    207c:	a1 e3       	ldi	r26, 0x31	; 49
    207e:	b0 e0       	ldi	r27, 0x00	; 0
    2080:	e1 e3       	ldi	r30, 0x31	; 49
    2082:	f0 e0       	ldi	r31, 0x00	; 0
    2084:	80 81       	ld	r24, Z
    2086:	48 2f       	mov	r20, r24
    2088:	8b 81       	ldd	r24, Y+3	; 0x03
    208a:	28 2f       	mov	r18, r24
    208c:	30 e0       	ldi	r19, 0x00	; 0
    208e:	81 e0       	ldi	r24, 0x01	; 1
    2090:	90 e0       	ldi	r25, 0x00	; 0
    2092:	02 2e       	mov	r0, r18
    2094:	02 c0       	rjmp	.+4      	; 0x209a <MDIO_Errorstate_SetPinDirection+0x1f4>
    2096:	88 0f       	add	r24, r24
    2098:	99 1f       	adc	r25, r25
    209a:	0a 94       	dec	r0
    209c:	e2 f7       	brpl	.-8      	; 0x2096 <MDIO_Errorstate_SetPinDirection+0x1f0>
    209e:	80 95       	com	r24
    20a0:	84 23       	and	r24, r20
    20a2:	8c 93       	st	X, r24
    20a4:	05 c0       	rjmp	.+10     	; 0x20b0 <MDIO_Errorstate_SetPinDirection+0x20a>
				break;
			default :
				loc_Errorstate_Error_state=NOK;
    20a6:	19 82       	std	Y+1, r1	; 0x01
    20a8:	03 c0       	rjmp	.+6      	; 0x20b0 <MDIO_Errorstate_SetPinDirection+0x20a>
			}
		}
		else
		{
			loc_Errorstate_Error_state=NOK;
    20aa:	19 82       	std	Y+1, r1	; 0x01
    20ac:	01 c0       	rjmp	.+2      	; 0x20b0 <MDIO_Errorstate_SetPinDirection+0x20a>
		}
	}
	else
	{
		loc_Errorstate_Error_state=NOK;
    20ae:	19 82       	std	Y+1, r1	; 0x01
	}
	return loc_Errorstate_Error_state ;
    20b0:	89 81       	ldd	r24, Y+1	; 0x01
}
    20b2:	28 96       	adiw	r28, 0x08	; 8
    20b4:	0f b6       	in	r0, 0x3f	; 63
    20b6:	f8 94       	cli
    20b8:	de bf       	out	0x3e, r29	; 62
    20ba:	0f be       	out	0x3f, r0	; 63
    20bc:	cd bf       	out	0x3d, r28	; 61
    20be:	cf 91       	pop	r28
    20c0:	df 91       	pop	r29
    20c2:	08 95       	ret

000020c4 <MDIO_Errorstate_SetPinValue>:

/********* Set pin value************/
ErrorState MDIO_Errorstate_SetPinValue (uint8 copy_uint8PortID , uint8 copy_uint8PinNumber,uint8 copy_uint8PinValue)
{
    20c4:	df 93       	push	r29
    20c6:	cf 93       	push	r28
    20c8:	cd b7       	in	r28, 0x3d	; 61
    20ca:	de b7       	in	r29, 0x3e	; 62
    20cc:	28 97       	sbiw	r28, 0x08	; 8
    20ce:	0f b6       	in	r0, 0x3f	; 63
    20d0:	f8 94       	cli
    20d2:	de bf       	out	0x3e, r29	; 62
    20d4:	0f be       	out	0x3f, r0	; 63
    20d6:	cd bf       	out	0x3d, r28	; 61
    20d8:	8a 83       	std	Y+2, r24	; 0x02
    20da:	6b 83       	std	Y+3, r22	; 0x03
    20dc:	4c 83       	std	Y+4, r20	; 0x04
	{
		ErrorState loc_Errorstate_Error_state = OK;
    20de:	81 e0       	ldi	r24, 0x01	; 1
    20e0:	89 83       	std	Y+1, r24	; 0x01

		if (copy_uint8PinNumber<8)
    20e2:	8b 81       	ldd	r24, Y+3	; 0x03
    20e4:	88 30       	cpi	r24, 0x08	; 8
    20e6:	08 f0       	brcs	.+2      	; 0x20ea <MDIO_Errorstate_SetPinValue+0x26>
    20e8:	f1 c0       	rjmp	.+482    	; 0x22cc <MDIO_Errorstate_SetPinValue+0x208>
		{
			if(copy_uint8PinValue==PIN_HIGH)
    20ea:	8c 81       	ldd	r24, Y+4	; 0x04
    20ec:	81 30       	cpi	r24, 0x01	; 1
    20ee:	09 f0       	breq	.+2      	; 0x20f2 <MDIO_Errorstate_SetPinValue+0x2e>
    20f0:	71 c0       	rjmp	.+226    	; 0x21d4 <MDIO_Errorstate_SetPinValue+0x110>
			{
				switch(copy_uint8PortID)
    20f2:	8a 81       	ldd	r24, Y+2	; 0x02
    20f4:	28 2f       	mov	r18, r24
    20f6:	30 e0       	ldi	r19, 0x00	; 0
    20f8:	38 87       	std	Y+8, r19	; 0x08
    20fa:	2f 83       	std	Y+7, r18	; 0x07
    20fc:	8f 81       	ldd	r24, Y+7	; 0x07
    20fe:	98 85       	ldd	r25, Y+8	; 0x08
    2100:	81 30       	cpi	r24, 0x01	; 1
    2102:	91 05       	cpc	r25, r1
    2104:	49 f1       	breq	.+82     	; 0x2158 <MDIO_Errorstate_SetPinValue+0x94>
    2106:	2f 81       	ldd	r18, Y+7	; 0x07
    2108:	38 85       	ldd	r19, Y+8	; 0x08
    210a:	22 30       	cpi	r18, 0x02	; 2
    210c:	31 05       	cpc	r19, r1
    210e:	2c f4       	brge	.+10     	; 0x211a <MDIO_Errorstate_SetPinValue+0x56>
    2110:	8f 81       	ldd	r24, Y+7	; 0x07
    2112:	98 85       	ldd	r25, Y+8	; 0x08
    2114:	00 97       	sbiw	r24, 0x00	; 0
    2116:	61 f0       	breq	.+24     	; 0x2130 <MDIO_Errorstate_SetPinValue+0x6c>
    2118:	5b c0       	rjmp	.+182    	; 0x21d0 <MDIO_Errorstate_SetPinValue+0x10c>
    211a:	2f 81       	ldd	r18, Y+7	; 0x07
    211c:	38 85       	ldd	r19, Y+8	; 0x08
    211e:	22 30       	cpi	r18, 0x02	; 2
    2120:	31 05       	cpc	r19, r1
    2122:	71 f1       	breq	.+92     	; 0x2180 <MDIO_Errorstate_SetPinValue+0xbc>
    2124:	8f 81       	ldd	r24, Y+7	; 0x07
    2126:	98 85       	ldd	r25, Y+8	; 0x08
    2128:	83 30       	cpi	r24, 0x03	; 3
    212a:	91 05       	cpc	r25, r1
    212c:	e9 f1       	breq	.+122    	; 0x21a8 <MDIO_Errorstate_SetPinValue+0xe4>
    212e:	50 c0       	rjmp	.+160    	; 0x21d0 <MDIO_Errorstate_SetPinValue+0x10c>
				{
				case MDIO_PORTA:
					SET_BIT(PORTA,copy_uint8PinNumber);
    2130:	ab e3       	ldi	r26, 0x3B	; 59
    2132:	b0 e0       	ldi	r27, 0x00	; 0
    2134:	eb e3       	ldi	r30, 0x3B	; 59
    2136:	f0 e0       	ldi	r31, 0x00	; 0
    2138:	80 81       	ld	r24, Z
    213a:	48 2f       	mov	r20, r24
    213c:	8b 81       	ldd	r24, Y+3	; 0x03
    213e:	28 2f       	mov	r18, r24
    2140:	30 e0       	ldi	r19, 0x00	; 0
    2142:	81 e0       	ldi	r24, 0x01	; 1
    2144:	90 e0       	ldi	r25, 0x00	; 0
    2146:	02 2e       	mov	r0, r18
    2148:	02 c0       	rjmp	.+4      	; 0x214e <MDIO_Errorstate_SetPinValue+0x8a>
    214a:	88 0f       	add	r24, r24
    214c:	99 1f       	adc	r25, r25
    214e:	0a 94       	dec	r0
    2150:	e2 f7       	brpl	.-8      	; 0x214a <MDIO_Errorstate_SetPinValue+0x86>
    2152:	84 2b       	or	r24, r20
    2154:	8c 93       	st	X, r24
    2156:	bb c0       	rjmp	.+374    	; 0x22ce <MDIO_Errorstate_SetPinValue+0x20a>
					break;
				case MDIO_PORTB:
					SET_BIT(PORTB,copy_uint8PinNumber);
    2158:	a8 e3       	ldi	r26, 0x38	; 56
    215a:	b0 e0       	ldi	r27, 0x00	; 0
    215c:	e8 e3       	ldi	r30, 0x38	; 56
    215e:	f0 e0       	ldi	r31, 0x00	; 0
    2160:	80 81       	ld	r24, Z
    2162:	48 2f       	mov	r20, r24
    2164:	8b 81       	ldd	r24, Y+3	; 0x03
    2166:	28 2f       	mov	r18, r24
    2168:	30 e0       	ldi	r19, 0x00	; 0
    216a:	81 e0       	ldi	r24, 0x01	; 1
    216c:	90 e0       	ldi	r25, 0x00	; 0
    216e:	02 2e       	mov	r0, r18
    2170:	02 c0       	rjmp	.+4      	; 0x2176 <MDIO_Errorstate_SetPinValue+0xb2>
    2172:	88 0f       	add	r24, r24
    2174:	99 1f       	adc	r25, r25
    2176:	0a 94       	dec	r0
    2178:	e2 f7       	brpl	.-8      	; 0x2172 <MDIO_Errorstate_SetPinValue+0xae>
    217a:	84 2b       	or	r24, r20
    217c:	8c 93       	st	X, r24
    217e:	a7 c0       	rjmp	.+334    	; 0x22ce <MDIO_Errorstate_SetPinValue+0x20a>
					break;
				case MDIO_PORTC:
					SET_BIT(PORTC,copy_uint8PinNumber);
    2180:	a5 e3       	ldi	r26, 0x35	; 53
    2182:	b0 e0       	ldi	r27, 0x00	; 0
    2184:	e5 e3       	ldi	r30, 0x35	; 53
    2186:	f0 e0       	ldi	r31, 0x00	; 0
    2188:	80 81       	ld	r24, Z
    218a:	48 2f       	mov	r20, r24
    218c:	8b 81       	ldd	r24, Y+3	; 0x03
    218e:	28 2f       	mov	r18, r24
    2190:	30 e0       	ldi	r19, 0x00	; 0
    2192:	81 e0       	ldi	r24, 0x01	; 1
    2194:	90 e0       	ldi	r25, 0x00	; 0
    2196:	02 2e       	mov	r0, r18
    2198:	02 c0       	rjmp	.+4      	; 0x219e <MDIO_Errorstate_SetPinValue+0xda>
    219a:	88 0f       	add	r24, r24
    219c:	99 1f       	adc	r25, r25
    219e:	0a 94       	dec	r0
    21a0:	e2 f7       	brpl	.-8      	; 0x219a <MDIO_Errorstate_SetPinValue+0xd6>
    21a2:	84 2b       	or	r24, r20
    21a4:	8c 93       	st	X, r24
    21a6:	93 c0       	rjmp	.+294    	; 0x22ce <MDIO_Errorstate_SetPinValue+0x20a>
					break;
				case MDIO_PORTD:
					SET_BIT(PORTD,copy_uint8PinNumber);
    21a8:	a2 e3       	ldi	r26, 0x32	; 50
    21aa:	b0 e0       	ldi	r27, 0x00	; 0
    21ac:	e2 e3       	ldi	r30, 0x32	; 50
    21ae:	f0 e0       	ldi	r31, 0x00	; 0
    21b0:	80 81       	ld	r24, Z
    21b2:	48 2f       	mov	r20, r24
    21b4:	8b 81       	ldd	r24, Y+3	; 0x03
    21b6:	28 2f       	mov	r18, r24
    21b8:	30 e0       	ldi	r19, 0x00	; 0
    21ba:	81 e0       	ldi	r24, 0x01	; 1
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	02 2e       	mov	r0, r18
    21c0:	02 c0       	rjmp	.+4      	; 0x21c6 <MDIO_Errorstate_SetPinValue+0x102>
    21c2:	88 0f       	add	r24, r24
    21c4:	99 1f       	adc	r25, r25
    21c6:	0a 94       	dec	r0
    21c8:	e2 f7       	brpl	.-8      	; 0x21c2 <MDIO_Errorstate_SetPinValue+0xfe>
    21ca:	84 2b       	or	r24, r20
    21cc:	8c 93       	st	X, r24
    21ce:	7f c0       	rjmp	.+254    	; 0x22ce <MDIO_Errorstate_SetPinValue+0x20a>
					break;
				default :
					loc_Errorstate_Error_state=NOK;
    21d0:	19 82       	std	Y+1, r1	; 0x01
    21d2:	7d c0       	rjmp	.+250    	; 0x22ce <MDIO_Errorstate_SetPinValue+0x20a>

					break;
				}
			}

			else if(copy_uint8PinValue==PIN_LOW)
    21d4:	8c 81       	ldd	r24, Y+4	; 0x04
    21d6:	88 23       	and	r24, r24
    21d8:	09 f0       	breq	.+2      	; 0x21dc <MDIO_Errorstate_SetPinValue+0x118>
    21da:	76 c0       	rjmp	.+236    	; 0x22c8 <MDIO_Errorstate_SetPinValue+0x204>
			{
				switch(copy_uint8PortID)
    21dc:	8a 81       	ldd	r24, Y+2	; 0x02
    21de:	28 2f       	mov	r18, r24
    21e0:	30 e0       	ldi	r19, 0x00	; 0
    21e2:	3e 83       	std	Y+6, r19	; 0x06
    21e4:	2d 83       	std	Y+5, r18	; 0x05
    21e6:	8d 81       	ldd	r24, Y+5	; 0x05
    21e8:	9e 81       	ldd	r25, Y+6	; 0x06
    21ea:	81 30       	cpi	r24, 0x01	; 1
    21ec:	91 05       	cpc	r25, r1
    21ee:	59 f1       	breq	.+86     	; 0x2246 <MDIO_Errorstate_SetPinValue+0x182>
    21f0:	2d 81       	ldd	r18, Y+5	; 0x05
    21f2:	3e 81       	ldd	r19, Y+6	; 0x06
    21f4:	22 30       	cpi	r18, 0x02	; 2
    21f6:	31 05       	cpc	r19, r1
    21f8:	2c f4       	brge	.+10     	; 0x2204 <MDIO_Errorstate_SetPinValue+0x140>
    21fa:	8d 81       	ldd	r24, Y+5	; 0x05
    21fc:	9e 81       	ldd	r25, Y+6	; 0x06
    21fe:	00 97       	sbiw	r24, 0x00	; 0
    2200:	69 f0       	breq	.+26     	; 0x221c <MDIO_Errorstate_SetPinValue+0x158>
    2202:	60 c0       	rjmp	.+192    	; 0x22c4 <MDIO_Errorstate_SetPinValue+0x200>
    2204:	2d 81       	ldd	r18, Y+5	; 0x05
    2206:	3e 81       	ldd	r19, Y+6	; 0x06
    2208:	22 30       	cpi	r18, 0x02	; 2
    220a:	31 05       	cpc	r19, r1
    220c:	89 f1       	breq	.+98     	; 0x2270 <MDIO_Errorstate_SetPinValue+0x1ac>
    220e:	8d 81       	ldd	r24, Y+5	; 0x05
    2210:	9e 81       	ldd	r25, Y+6	; 0x06
    2212:	83 30       	cpi	r24, 0x03	; 3
    2214:	91 05       	cpc	r25, r1
    2216:	09 f4       	brne	.+2      	; 0x221a <MDIO_Errorstate_SetPinValue+0x156>
    2218:	40 c0       	rjmp	.+128    	; 0x229a <MDIO_Errorstate_SetPinValue+0x1d6>
    221a:	54 c0       	rjmp	.+168    	; 0x22c4 <MDIO_Errorstate_SetPinValue+0x200>
				{
				case MDIO_PORTA:
					CLR_BIT(PORTA,copy_uint8PinNumber);
    221c:	ab e3       	ldi	r26, 0x3B	; 59
    221e:	b0 e0       	ldi	r27, 0x00	; 0
    2220:	eb e3       	ldi	r30, 0x3B	; 59
    2222:	f0 e0       	ldi	r31, 0x00	; 0
    2224:	80 81       	ld	r24, Z
    2226:	48 2f       	mov	r20, r24
    2228:	8b 81       	ldd	r24, Y+3	; 0x03
    222a:	28 2f       	mov	r18, r24
    222c:	30 e0       	ldi	r19, 0x00	; 0
    222e:	81 e0       	ldi	r24, 0x01	; 1
    2230:	90 e0       	ldi	r25, 0x00	; 0
    2232:	02 2e       	mov	r0, r18
    2234:	02 c0       	rjmp	.+4      	; 0x223a <MDIO_Errorstate_SetPinValue+0x176>
    2236:	88 0f       	add	r24, r24
    2238:	99 1f       	adc	r25, r25
    223a:	0a 94       	dec	r0
    223c:	e2 f7       	brpl	.-8      	; 0x2236 <MDIO_Errorstate_SetPinValue+0x172>
    223e:	80 95       	com	r24
    2240:	84 23       	and	r24, r20
    2242:	8c 93       	st	X, r24
    2244:	44 c0       	rjmp	.+136    	; 0x22ce <MDIO_Errorstate_SetPinValue+0x20a>
					break;
				case MDIO_PORTB:
					CLR_BIT(PORTB,copy_uint8PinNumber);
    2246:	a8 e3       	ldi	r26, 0x38	; 56
    2248:	b0 e0       	ldi	r27, 0x00	; 0
    224a:	e8 e3       	ldi	r30, 0x38	; 56
    224c:	f0 e0       	ldi	r31, 0x00	; 0
    224e:	80 81       	ld	r24, Z
    2250:	48 2f       	mov	r20, r24
    2252:	8b 81       	ldd	r24, Y+3	; 0x03
    2254:	28 2f       	mov	r18, r24
    2256:	30 e0       	ldi	r19, 0x00	; 0
    2258:	81 e0       	ldi	r24, 0x01	; 1
    225a:	90 e0       	ldi	r25, 0x00	; 0
    225c:	02 2e       	mov	r0, r18
    225e:	02 c0       	rjmp	.+4      	; 0x2264 <MDIO_Errorstate_SetPinValue+0x1a0>
    2260:	88 0f       	add	r24, r24
    2262:	99 1f       	adc	r25, r25
    2264:	0a 94       	dec	r0
    2266:	e2 f7       	brpl	.-8      	; 0x2260 <MDIO_Errorstate_SetPinValue+0x19c>
    2268:	80 95       	com	r24
    226a:	84 23       	and	r24, r20
    226c:	8c 93       	st	X, r24
    226e:	2f c0       	rjmp	.+94     	; 0x22ce <MDIO_Errorstate_SetPinValue+0x20a>
					break;
				case MDIO_PORTC:
					CLR_BIT(PORTC,copy_uint8PinNumber);
    2270:	a5 e3       	ldi	r26, 0x35	; 53
    2272:	b0 e0       	ldi	r27, 0x00	; 0
    2274:	e5 e3       	ldi	r30, 0x35	; 53
    2276:	f0 e0       	ldi	r31, 0x00	; 0
    2278:	80 81       	ld	r24, Z
    227a:	48 2f       	mov	r20, r24
    227c:	8b 81       	ldd	r24, Y+3	; 0x03
    227e:	28 2f       	mov	r18, r24
    2280:	30 e0       	ldi	r19, 0x00	; 0
    2282:	81 e0       	ldi	r24, 0x01	; 1
    2284:	90 e0       	ldi	r25, 0x00	; 0
    2286:	02 2e       	mov	r0, r18
    2288:	02 c0       	rjmp	.+4      	; 0x228e <MDIO_Errorstate_SetPinValue+0x1ca>
    228a:	88 0f       	add	r24, r24
    228c:	99 1f       	adc	r25, r25
    228e:	0a 94       	dec	r0
    2290:	e2 f7       	brpl	.-8      	; 0x228a <MDIO_Errorstate_SetPinValue+0x1c6>
    2292:	80 95       	com	r24
    2294:	84 23       	and	r24, r20
    2296:	8c 93       	st	X, r24
    2298:	1a c0       	rjmp	.+52     	; 0x22ce <MDIO_Errorstate_SetPinValue+0x20a>
					break;
				case MDIO_PORTD:
					CLR_BIT(PORTD,copy_uint8PinNumber);
    229a:	a2 e3       	ldi	r26, 0x32	; 50
    229c:	b0 e0       	ldi	r27, 0x00	; 0
    229e:	e2 e3       	ldi	r30, 0x32	; 50
    22a0:	f0 e0       	ldi	r31, 0x00	; 0
    22a2:	80 81       	ld	r24, Z
    22a4:	48 2f       	mov	r20, r24
    22a6:	8b 81       	ldd	r24, Y+3	; 0x03
    22a8:	28 2f       	mov	r18, r24
    22aa:	30 e0       	ldi	r19, 0x00	; 0
    22ac:	81 e0       	ldi	r24, 0x01	; 1
    22ae:	90 e0       	ldi	r25, 0x00	; 0
    22b0:	02 2e       	mov	r0, r18
    22b2:	02 c0       	rjmp	.+4      	; 0x22b8 <MDIO_Errorstate_SetPinValue+0x1f4>
    22b4:	88 0f       	add	r24, r24
    22b6:	99 1f       	adc	r25, r25
    22b8:	0a 94       	dec	r0
    22ba:	e2 f7       	brpl	.-8      	; 0x22b4 <MDIO_Errorstate_SetPinValue+0x1f0>
    22bc:	80 95       	com	r24
    22be:	84 23       	and	r24, r20
    22c0:	8c 93       	st	X, r24
    22c2:	05 c0       	rjmp	.+10     	; 0x22ce <MDIO_Errorstate_SetPinValue+0x20a>
					break;
				default :
					loc_Errorstate_Error_state=NOK;
    22c4:	19 82       	std	Y+1, r1	; 0x01
    22c6:	03 c0       	rjmp	.+6      	; 0x22ce <MDIO_Errorstate_SetPinValue+0x20a>
				}
			}
			else
			{
				loc_Errorstate_Error_state=NOK;
    22c8:	19 82       	std	Y+1, r1	; 0x01
    22ca:	01 c0       	rjmp	.+2      	; 0x22ce <MDIO_Errorstate_SetPinValue+0x20a>
			}
		}
		else
		{
			loc_Errorstate_Error_state=NOK;
    22cc:	19 82       	std	Y+1, r1	; 0x01
		}
		return loc_Errorstate_Error_state ;
    22ce:	89 81       	ldd	r24, Y+1	; 0x01
	}
}
    22d0:	28 96       	adiw	r28, 0x08	; 8
    22d2:	0f b6       	in	r0, 0x3f	; 63
    22d4:	f8 94       	cli
    22d6:	de bf       	out	0x3e, r29	; 62
    22d8:	0f be       	out	0x3f, r0	; 63
    22da:	cd bf       	out	0x3d, r28	; 61
    22dc:	cf 91       	pop	r28
    22de:	df 91       	pop	r29
    22e0:	08 95       	ret

000022e2 <MDIO_Errorstate_GetPinValue>:


/********* get pin value************/
ErrorState MDIO_Errorstate_GetPinValue (uint8 copy_uint8PortID , uint8 copy_uint8PinNumber,uint8 *puint8PinValue)
{
    22e2:	df 93       	push	r29
    22e4:	cf 93       	push	r28
    22e6:	cd b7       	in	r28, 0x3d	; 61
    22e8:	de b7       	in	r29, 0x3e	; 62
    22ea:	27 97       	sbiw	r28, 0x07	; 7
    22ec:	0f b6       	in	r0, 0x3f	; 63
    22ee:	f8 94       	cli
    22f0:	de bf       	out	0x3e, r29	; 62
    22f2:	0f be       	out	0x3f, r0	; 63
    22f4:	cd bf       	out	0x3d, r28	; 61
    22f6:	8a 83       	std	Y+2, r24	; 0x02
    22f8:	6b 83       	std	Y+3, r22	; 0x03
    22fa:	5d 83       	std	Y+5, r21	; 0x05
    22fc:	4c 83       	std	Y+4, r20	; 0x04
	ErrorState loc_Errorstate_Error_state = OK;
    22fe:	81 e0       	ldi	r24, 0x01	; 1
    2300:	89 83       	std	Y+1, r24	; 0x01
	if (copy_uint8PinNumber<8)
    2302:	8b 81       	ldd	r24, Y+3	; 0x03
    2304:	88 30       	cpi	r24, 0x08	; 8
    2306:	08 f0       	brcs	.+2      	; 0x230a <MDIO_Errorstate_GetPinValue+0x28>
    2308:	73 c0       	rjmp	.+230    	; 0x23f0 <MDIO_Errorstate_GetPinValue+0x10e>
	{
		switch(copy_uint8PortID)
    230a:	8a 81       	ldd	r24, Y+2	; 0x02
    230c:	28 2f       	mov	r18, r24
    230e:	30 e0       	ldi	r19, 0x00	; 0
    2310:	3f 83       	std	Y+7, r19	; 0x07
    2312:	2e 83       	std	Y+6, r18	; 0x06
    2314:	4e 81       	ldd	r20, Y+6	; 0x06
    2316:	5f 81       	ldd	r21, Y+7	; 0x07
    2318:	41 30       	cpi	r20, 0x01	; 1
    231a:	51 05       	cpc	r21, r1
    231c:	59 f1       	breq	.+86     	; 0x2374 <MDIO_Errorstate_GetPinValue+0x92>
    231e:	8e 81       	ldd	r24, Y+6	; 0x06
    2320:	9f 81       	ldd	r25, Y+7	; 0x07
    2322:	82 30       	cpi	r24, 0x02	; 2
    2324:	91 05       	cpc	r25, r1
    2326:	34 f4       	brge	.+12     	; 0x2334 <MDIO_Errorstate_GetPinValue+0x52>
    2328:	2e 81       	ldd	r18, Y+6	; 0x06
    232a:	3f 81       	ldd	r19, Y+7	; 0x07
    232c:	21 15       	cp	r18, r1
    232e:	31 05       	cpc	r19, r1
    2330:	69 f0       	breq	.+26     	; 0x234c <MDIO_Errorstate_GetPinValue+0x6a>
    2332:	5c c0       	rjmp	.+184    	; 0x23ec <MDIO_Errorstate_GetPinValue+0x10a>
    2334:	4e 81       	ldd	r20, Y+6	; 0x06
    2336:	5f 81       	ldd	r21, Y+7	; 0x07
    2338:	42 30       	cpi	r20, 0x02	; 2
    233a:	51 05       	cpc	r21, r1
    233c:	79 f1       	breq	.+94     	; 0x239c <MDIO_Errorstate_GetPinValue+0xba>
    233e:	8e 81       	ldd	r24, Y+6	; 0x06
    2340:	9f 81       	ldd	r25, Y+7	; 0x07
    2342:	83 30       	cpi	r24, 0x03	; 3
    2344:	91 05       	cpc	r25, r1
    2346:	09 f4       	brne	.+2      	; 0x234a <MDIO_Errorstate_GetPinValue+0x68>
    2348:	3d c0       	rjmp	.+122    	; 0x23c4 <MDIO_Errorstate_GetPinValue+0xe2>
    234a:	50 c0       	rjmp	.+160    	; 0x23ec <MDIO_Errorstate_GetPinValue+0x10a>
		{
		case MDIO_PORTA:
			*puint8PinValue= GET_BIT(PINA,copy_uint8PinNumber);
    234c:	e9 e3       	ldi	r30, 0x39	; 57
    234e:	f0 e0       	ldi	r31, 0x00	; 0
    2350:	80 81       	ld	r24, Z
    2352:	28 2f       	mov	r18, r24
    2354:	30 e0       	ldi	r19, 0x00	; 0
    2356:	8b 81       	ldd	r24, Y+3	; 0x03
    2358:	88 2f       	mov	r24, r24
    235a:	90 e0       	ldi	r25, 0x00	; 0
    235c:	a9 01       	movw	r20, r18
    235e:	02 c0       	rjmp	.+4      	; 0x2364 <MDIO_Errorstate_GetPinValue+0x82>
    2360:	55 95       	asr	r21
    2362:	47 95       	ror	r20
    2364:	8a 95       	dec	r24
    2366:	e2 f7       	brpl	.-8      	; 0x2360 <MDIO_Errorstate_GetPinValue+0x7e>
    2368:	ca 01       	movw	r24, r20
    236a:	81 70       	andi	r24, 0x01	; 1
    236c:	ec 81       	ldd	r30, Y+4	; 0x04
    236e:	fd 81       	ldd	r31, Y+5	; 0x05
    2370:	80 83       	st	Z, r24
    2372:	3f c0       	rjmp	.+126    	; 0x23f2 <MDIO_Errorstate_GetPinValue+0x110>
			break;
		case MDIO_PORTB:
			*puint8PinValue=GET_BIT(PINB,copy_uint8PinNumber);
    2374:	e6 e3       	ldi	r30, 0x36	; 54
    2376:	f0 e0       	ldi	r31, 0x00	; 0
    2378:	80 81       	ld	r24, Z
    237a:	28 2f       	mov	r18, r24
    237c:	30 e0       	ldi	r19, 0x00	; 0
    237e:	8b 81       	ldd	r24, Y+3	; 0x03
    2380:	88 2f       	mov	r24, r24
    2382:	90 e0       	ldi	r25, 0x00	; 0
    2384:	a9 01       	movw	r20, r18
    2386:	02 c0       	rjmp	.+4      	; 0x238c <MDIO_Errorstate_GetPinValue+0xaa>
    2388:	55 95       	asr	r21
    238a:	47 95       	ror	r20
    238c:	8a 95       	dec	r24
    238e:	e2 f7       	brpl	.-8      	; 0x2388 <MDIO_Errorstate_GetPinValue+0xa6>
    2390:	ca 01       	movw	r24, r20
    2392:	81 70       	andi	r24, 0x01	; 1
    2394:	ec 81       	ldd	r30, Y+4	; 0x04
    2396:	fd 81       	ldd	r31, Y+5	; 0x05
    2398:	80 83       	st	Z, r24
    239a:	2b c0       	rjmp	.+86     	; 0x23f2 <MDIO_Errorstate_GetPinValue+0x110>
			break;
		case MDIO_PORTC:
			*puint8PinValue=GET_BIT(PINC,copy_uint8PinNumber);
    239c:	e3 e3       	ldi	r30, 0x33	; 51
    239e:	f0 e0       	ldi	r31, 0x00	; 0
    23a0:	80 81       	ld	r24, Z
    23a2:	28 2f       	mov	r18, r24
    23a4:	30 e0       	ldi	r19, 0x00	; 0
    23a6:	8b 81       	ldd	r24, Y+3	; 0x03
    23a8:	88 2f       	mov	r24, r24
    23aa:	90 e0       	ldi	r25, 0x00	; 0
    23ac:	a9 01       	movw	r20, r18
    23ae:	02 c0       	rjmp	.+4      	; 0x23b4 <MDIO_Errorstate_GetPinValue+0xd2>
    23b0:	55 95       	asr	r21
    23b2:	47 95       	ror	r20
    23b4:	8a 95       	dec	r24
    23b6:	e2 f7       	brpl	.-8      	; 0x23b0 <MDIO_Errorstate_GetPinValue+0xce>
    23b8:	ca 01       	movw	r24, r20
    23ba:	81 70       	andi	r24, 0x01	; 1
    23bc:	ec 81       	ldd	r30, Y+4	; 0x04
    23be:	fd 81       	ldd	r31, Y+5	; 0x05
    23c0:	80 83       	st	Z, r24
    23c2:	17 c0       	rjmp	.+46     	; 0x23f2 <MDIO_Errorstate_GetPinValue+0x110>
			break;
		case MDIO_PORTD:
			*puint8PinValue=GET_BIT(PIND,copy_uint8PinNumber);
    23c4:	e0 e3       	ldi	r30, 0x30	; 48
    23c6:	f0 e0       	ldi	r31, 0x00	; 0
    23c8:	80 81       	ld	r24, Z
    23ca:	28 2f       	mov	r18, r24
    23cc:	30 e0       	ldi	r19, 0x00	; 0
    23ce:	8b 81       	ldd	r24, Y+3	; 0x03
    23d0:	88 2f       	mov	r24, r24
    23d2:	90 e0       	ldi	r25, 0x00	; 0
    23d4:	a9 01       	movw	r20, r18
    23d6:	02 c0       	rjmp	.+4      	; 0x23dc <MDIO_Errorstate_GetPinValue+0xfa>
    23d8:	55 95       	asr	r21
    23da:	47 95       	ror	r20
    23dc:	8a 95       	dec	r24
    23de:	e2 f7       	brpl	.-8      	; 0x23d8 <MDIO_Errorstate_GetPinValue+0xf6>
    23e0:	ca 01       	movw	r24, r20
    23e2:	81 70       	andi	r24, 0x01	; 1
    23e4:	ec 81       	ldd	r30, Y+4	; 0x04
    23e6:	fd 81       	ldd	r31, Y+5	; 0x05
    23e8:	80 83       	st	Z, r24
    23ea:	03 c0       	rjmp	.+6      	; 0x23f2 <MDIO_Errorstate_GetPinValue+0x110>
			break;
		default :
			loc_Errorstate_Error_state=NOK;
    23ec:	19 82       	std	Y+1, r1	; 0x01
    23ee:	01 c0       	rjmp	.+2      	; 0x23f2 <MDIO_Errorstate_GetPinValue+0x110>

		}
	}
	else
	{
		loc_Errorstate_Error_state=NOK;
    23f0:	19 82       	std	Y+1, r1	; 0x01
	}
	return loc_Errorstate_Error_state;
    23f2:	89 81       	ldd	r24, Y+1	; 0x01
}
    23f4:	27 96       	adiw	r28, 0x07	; 7
    23f6:	0f b6       	in	r0, 0x3f	; 63
    23f8:	f8 94       	cli
    23fa:	de bf       	out	0x3e, r29	; 62
    23fc:	0f be       	out	0x3f, r0	; 63
    23fe:	cd bf       	out	0x3d, r28	; 61
    2400:	cf 91       	pop	r28
    2402:	df 91       	pop	r29
    2404:	08 95       	ret

00002406 <MDIO_Errorstate_SetPortDirection>:

/********* set port direction & value************/
ErrorState MDIO_Errorstate_SetPortDirection (uint8 copy_uint8PortID , uint8 copy_uint8PortDirection)
{
    2406:	df 93       	push	r29
    2408:	cf 93       	push	r28
    240a:	00 d0       	rcall	.+0      	; 0x240c <MDIO_Errorstate_SetPortDirection+0x6>
    240c:	00 d0       	rcall	.+0      	; 0x240e <MDIO_Errorstate_SetPortDirection+0x8>
    240e:	0f 92       	push	r0
    2410:	cd b7       	in	r28, 0x3d	; 61
    2412:	de b7       	in	r29, 0x3e	; 62
    2414:	8a 83       	std	Y+2, r24	; 0x02
    2416:	6b 83       	std	Y+3, r22	; 0x03
	ErrorState loc_Errorstate_Error_state = OK;
    2418:	81 e0       	ldi	r24, 0x01	; 1
    241a:	89 83       	std	Y+1, r24	; 0x01

	if((copy_uint8PortDirection== PORT_OUTPUT) ||(copy_uint8PortDirection==PORT_INPUT))
    241c:	8b 81       	ldd	r24, Y+3	; 0x03
    241e:	8f 3f       	cpi	r24, 0xFF	; 255
    2420:	19 f0       	breq	.+6      	; 0x2428 <MDIO_Errorstate_SetPortDirection+0x22>
    2422:	8b 81       	ldd	r24, Y+3	; 0x03
    2424:	88 23       	and	r24, r24
    2426:	a9 f5       	brne	.+106    	; 0x2492 <MDIO_Errorstate_SetPortDirection+0x8c>
	{
		switch(copy_uint8PortID)
    2428:	8a 81       	ldd	r24, Y+2	; 0x02
    242a:	28 2f       	mov	r18, r24
    242c:	30 e0       	ldi	r19, 0x00	; 0
    242e:	3d 83       	std	Y+5, r19	; 0x05
    2430:	2c 83       	std	Y+4, r18	; 0x04
    2432:	8c 81       	ldd	r24, Y+4	; 0x04
    2434:	9d 81       	ldd	r25, Y+5	; 0x05
    2436:	81 30       	cpi	r24, 0x01	; 1
    2438:	91 05       	cpc	r25, r1
    243a:	d1 f0       	breq	.+52     	; 0x2470 <MDIO_Errorstate_SetPortDirection+0x6a>
    243c:	2c 81       	ldd	r18, Y+4	; 0x04
    243e:	3d 81       	ldd	r19, Y+5	; 0x05
    2440:	22 30       	cpi	r18, 0x02	; 2
    2442:	31 05       	cpc	r19, r1
    2444:	2c f4       	brge	.+10     	; 0x2450 <MDIO_Errorstate_SetPortDirection+0x4a>
    2446:	8c 81       	ldd	r24, Y+4	; 0x04
    2448:	9d 81       	ldd	r25, Y+5	; 0x05
    244a:	00 97       	sbiw	r24, 0x00	; 0
    244c:	61 f0       	breq	.+24     	; 0x2466 <MDIO_Errorstate_SetPortDirection+0x60>
    244e:	1f c0       	rjmp	.+62     	; 0x248e <MDIO_Errorstate_SetPortDirection+0x88>
    2450:	2c 81       	ldd	r18, Y+4	; 0x04
    2452:	3d 81       	ldd	r19, Y+5	; 0x05
    2454:	22 30       	cpi	r18, 0x02	; 2
    2456:	31 05       	cpc	r19, r1
    2458:	81 f0       	breq	.+32     	; 0x247a <MDIO_Errorstate_SetPortDirection+0x74>
    245a:	8c 81       	ldd	r24, Y+4	; 0x04
    245c:	9d 81       	ldd	r25, Y+5	; 0x05
    245e:	83 30       	cpi	r24, 0x03	; 3
    2460:	91 05       	cpc	r25, r1
    2462:	81 f0       	breq	.+32     	; 0x2484 <MDIO_Errorstate_SetPortDirection+0x7e>
    2464:	14 c0       	rjmp	.+40     	; 0x248e <MDIO_Errorstate_SetPortDirection+0x88>
		{
		case MDIO_PORTA:
			DDRA=copy_uint8PortDirection;
    2466:	ea e3       	ldi	r30, 0x3A	; 58
    2468:	f0 e0       	ldi	r31, 0x00	; 0
    246a:	8b 81       	ldd	r24, Y+3	; 0x03
    246c:	80 83       	st	Z, r24
    246e:	12 c0       	rjmp	.+36     	; 0x2494 <MDIO_Errorstate_SetPortDirection+0x8e>

			break;
		case MDIO_PORTB:
			DDRB=copy_uint8PortDirection;
    2470:	e7 e3       	ldi	r30, 0x37	; 55
    2472:	f0 e0       	ldi	r31, 0x00	; 0
    2474:	8b 81       	ldd	r24, Y+3	; 0x03
    2476:	80 83       	st	Z, r24
    2478:	0d c0       	rjmp	.+26     	; 0x2494 <MDIO_Errorstate_SetPortDirection+0x8e>
			break;
		case MDIO_PORTC:
			DDRC=copy_uint8PortDirection;
    247a:	e4 e3       	ldi	r30, 0x34	; 52
    247c:	f0 e0       	ldi	r31, 0x00	; 0
    247e:	8b 81       	ldd	r24, Y+3	; 0x03
    2480:	80 83       	st	Z, r24
    2482:	08 c0       	rjmp	.+16     	; 0x2494 <MDIO_Errorstate_SetPortDirection+0x8e>
			break;
		case MDIO_PORTD:
			DDRD=copy_uint8PortDirection;
    2484:	e1 e3       	ldi	r30, 0x31	; 49
    2486:	f0 e0       	ldi	r31, 0x00	; 0
    2488:	8b 81       	ldd	r24, Y+3	; 0x03
    248a:	80 83       	st	Z, r24
    248c:	03 c0       	rjmp	.+6      	; 0x2494 <MDIO_Errorstate_SetPortDirection+0x8e>
			break;
		default :
			loc_Errorstate_Error_state=NOK;
    248e:	19 82       	std	Y+1, r1	; 0x01
    2490:	01 c0       	rjmp	.+2      	; 0x2494 <MDIO_Errorstate_SetPortDirection+0x8e>
			break;
		}
	}
	else
	{
		loc_Errorstate_Error_state=NOK;
    2492:	19 82       	std	Y+1, r1	; 0x01
	}
	return loc_Errorstate_Error_state;
    2494:	89 81       	ldd	r24, Y+1	; 0x01
}
    2496:	0f 90       	pop	r0
    2498:	0f 90       	pop	r0
    249a:	0f 90       	pop	r0
    249c:	0f 90       	pop	r0
    249e:	0f 90       	pop	r0
    24a0:	cf 91       	pop	r28
    24a2:	df 91       	pop	r29
    24a4:	08 95       	ret

000024a6 <MDIO_Errorstate_SetPortValue>:

/*************** set port value ***********/
ErrorState MDIO_Errorstate_SetPortValue (uint8 copy_uint8PortID ,uint8 copy_uint8PortValue)
{
    24a6:	df 93       	push	r29
    24a8:	cf 93       	push	r28
    24aa:	00 d0       	rcall	.+0      	; 0x24ac <MDIO_Errorstate_SetPortValue+0x6>
    24ac:	00 d0       	rcall	.+0      	; 0x24ae <MDIO_Errorstate_SetPortValue+0x8>
    24ae:	0f 92       	push	r0
    24b0:	cd b7       	in	r28, 0x3d	; 61
    24b2:	de b7       	in	r29, 0x3e	; 62
    24b4:	8a 83       	std	Y+2, r24	; 0x02
    24b6:	6b 83       	std	Y+3, r22	; 0x03
	ErrorState loc_Errorstate_Error_state = OK;
    24b8:	81 e0       	ldi	r24, 0x01	; 1
    24ba:	89 83       	std	Y+1, r24	; 0x01

	if(copy_uint8PortValue<=PORT_HIGH)
	{
		switch(copy_uint8PortID)
    24bc:	8a 81       	ldd	r24, Y+2	; 0x02
    24be:	28 2f       	mov	r18, r24
    24c0:	30 e0       	ldi	r19, 0x00	; 0
    24c2:	3d 83       	std	Y+5, r19	; 0x05
    24c4:	2c 83       	std	Y+4, r18	; 0x04
    24c6:	8c 81       	ldd	r24, Y+4	; 0x04
    24c8:	9d 81       	ldd	r25, Y+5	; 0x05
    24ca:	81 30       	cpi	r24, 0x01	; 1
    24cc:	91 05       	cpc	r25, r1
    24ce:	d1 f0       	breq	.+52     	; 0x2504 <MDIO_Errorstate_SetPortValue+0x5e>
    24d0:	2c 81       	ldd	r18, Y+4	; 0x04
    24d2:	3d 81       	ldd	r19, Y+5	; 0x05
    24d4:	22 30       	cpi	r18, 0x02	; 2
    24d6:	31 05       	cpc	r19, r1
    24d8:	2c f4       	brge	.+10     	; 0x24e4 <MDIO_Errorstate_SetPortValue+0x3e>
    24da:	8c 81       	ldd	r24, Y+4	; 0x04
    24dc:	9d 81       	ldd	r25, Y+5	; 0x05
    24de:	00 97       	sbiw	r24, 0x00	; 0
    24e0:	61 f0       	breq	.+24     	; 0x24fa <MDIO_Errorstate_SetPortValue+0x54>
    24e2:	1f c0       	rjmp	.+62     	; 0x2522 <MDIO_Errorstate_SetPortValue+0x7c>
    24e4:	2c 81       	ldd	r18, Y+4	; 0x04
    24e6:	3d 81       	ldd	r19, Y+5	; 0x05
    24e8:	22 30       	cpi	r18, 0x02	; 2
    24ea:	31 05       	cpc	r19, r1
    24ec:	81 f0       	breq	.+32     	; 0x250e <MDIO_Errorstate_SetPortValue+0x68>
    24ee:	8c 81       	ldd	r24, Y+4	; 0x04
    24f0:	9d 81       	ldd	r25, Y+5	; 0x05
    24f2:	83 30       	cpi	r24, 0x03	; 3
    24f4:	91 05       	cpc	r25, r1
    24f6:	81 f0       	breq	.+32     	; 0x2518 <MDIO_Errorstate_SetPortValue+0x72>
    24f8:	14 c0       	rjmp	.+40     	; 0x2522 <MDIO_Errorstate_SetPortValue+0x7c>
		{
		case MDIO_PORTA:
			DDRA=copy_uint8PortValue;
    24fa:	ea e3       	ldi	r30, 0x3A	; 58
    24fc:	f0 e0       	ldi	r31, 0x00	; 0
    24fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2500:	80 83       	st	Z, r24
    2502:	10 c0       	rjmp	.+32     	; 0x2524 <MDIO_Errorstate_SetPortValue+0x7e>

			break;
		case MDIO_PORTB:
			PORTB=copy_uint8PortValue;
    2504:	e8 e3       	ldi	r30, 0x38	; 56
    2506:	f0 e0       	ldi	r31, 0x00	; 0
    2508:	8b 81       	ldd	r24, Y+3	; 0x03
    250a:	80 83       	st	Z, r24
    250c:	0b c0       	rjmp	.+22     	; 0x2524 <MDIO_Errorstate_SetPortValue+0x7e>
			break;
		case MDIO_PORTC:
			PORTC=copy_uint8PortValue;
    250e:	e5 e3       	ldi	r30, 0x35	; 53
    2510:	f0 e0       	ldi	r31, 0x00	; 0
    2512:	8b 81       	ldd	r24, Y+3	; 0x03
    2514:	80 83       	st	Z, r24
    2516:	06 c0       	rjmp	.+12     	; 0x2524 <MDIO_Errorstate_SetPortValue+0x7e>
			break;
		case MDIO_PORTD:
			PORTD=copy_uint8PortValue;
    2518:	e2 e3       	ldi	r30, 0x32	; 50
    251a:	f0 e0       	ldi	r31, 0x00	; 0
    251c:	8b 81       	ldd	r24, Y+3	; 0x03
    251e:	80 83       	st	Z, r24
    2520:	01 c0       	rjmp	.+2      	; 0x2524 <MDIO_Errorstate_SetPortValue+0x7e>
			break;
		default :
			loc_Errorstate_Error_state=NOK;
    2522:	19 82       	std	Y+1, r1	; 0x01
	}
		else
		{
			loc_Errorstate_Error_state=NOK;
		}
		return loc_Errorstate_Error_state;
    2524:	89 81       	ldd	r24, Y+1	; 0x01
	}
    2526:	0f 90       	pop	r0
    2528:	0f 90       	pop	r0
    252a:	0f 90       	pop	r0
    252c:	0f 90       	pop	r0
    252e:	0f 90       	pop	r0
    2530:	cf 91       	pop	r28
    2532:	df 91       	pop	r29
    2534:	08 95       	ret

00002536 <MDIO_Errorstate_Set4MostBits>:

ErrorState MDIO_Errorstate_Set4MostBits (uint8 copy_uint8PortID ,uint8 copy_uint8PortValue)
{
    2536:	df 93       	push	r29
    2538:	cf 93       	push	r28
    253a:	00 d0       	rcall	.+0      	; 0x253c <MDIO_Errorstate_Set4MostBits+0x6>
    253c:	00 d0       	rcall	.+0      	; 0x253e <MDIO_Errorstate_Set4MostBits+0x8>
    253e:	0f 92       	push	r0
    2540:	cd b7       	in	r28, 0x3d	; 61
    2542:	de b7       	in	r29, 0x3e	; 62
    2544:	8a 83       	std	Y+2, r24	; 0x02
    2546:	6b 83       	std	Y+3, r22	; 0x03
	ErrorState Loc_Errorstate_Error_state = OK;
    2548:	81 e0       	ldi	r24, 0x01	; 1
    254a:	89 83       	std	Y+1, r24	; 0x01
	switch(copy_uint8PortID)
    254c:	8a 81       	ldd	r24, Y+2	; 0x02
    254e:	28 2f       	mov	r18, r24
    2550:	30 e0       	ldi	r19, 0x00	; 0
    2552:	3d 83       	std	Y+5, r19	; 0x05
    2554:	2c 83       	std	Y+4, r18	; 0x04
    2556:	8c 81       	ldd	r24, Y+4	; 0x04
    2558:	9d 81       	ldd	r25, Y+5	; 0x05
    255a:	81 30       	cpi	r24, 0x01	; 1
    255c:	91 05       	cpc	r25, r1
    255e:	29 f1       	breq	.+74     	; 0x25aa <MDIO_Errorstate_Set4MostBits+0x74>
    2560:	2c 81       	ldd	r18, Y+4	; 0x04
    2562:	3d 81       	ldd	r19, Y+5	; 0x05
    2564:	22 30       	cpi	r18, 0x02	; 2
    2566:	31 05       	cpc	r19, r1
    2568:	2c f4       	brge	.+10     	; 0x2574 <MDIO_Errorstate_Set4MostBits+0x3e>
    256a:	8c 81       	ldd	r24, Y+4	; 0x04
    256c:	9d 81       	ldd	r25, Y+5	; 0x05
    256e:	00 97       	sbiw	r24, 0x00	; 0
    2570:	61 f0       	breq	.+24     	; 0x258a <MDIO_Errorstate_Set4MostBits+0x54>
    2572:	4b c0       	rjmp	.+150    	; 0x260a <MDIO_Errorstate_Set4MostBits+0xd4>
    2574:	2c 81       	ldd	r18, Y+4	; 0x04
    2576:	3d 81       	ldd	r19, Y+5	; 0x05
    2578:	22 30       	cpi	r18, 0x02	; 2
    257a:	31 05       	cpc	r19, r1
    257c:	31 f1       	breq	.+76     	; 0x25ca <MDIO_Errorstate_Set4MostBits+0x94>
    257e:	8c 81       	ldd	r24, Y+4	; 0x04
    2580:	9d 81       	ldd	r25, Y+5	; 0x05
    2582:	83 30       	cpi	r24, 0x03	; 3
    2584:	91 05       	cpc	r25, r1
    2586:	89 f1       	breq	.+98     	; 0x25ea <MDIO_Errorstate_Set4MostBits+0xb4>
    2588:	40 c0       	rjmp	.+128    	; 0x260a <MDIO_Errorstate_Set4MostBits+0xd4>
			{
			case MDIO_PORTA:
				PORTA&=0x0F;
    258a:	ab e3       	ldi	r26, 0x3B	; 59
    258c:	b0 e0       	ldi	r27, 0x00	; 0
    258e:	eb e3       	ldi	r30, 0x3B	; 59
    2590:	f0 e0       	ldi	r31, 0x00	; 0
    2592:	80 81       	ld	r24, Z
    2594:	8f 70       	andi	r24, 0x0F	; 15
    2596:	8c 93       	st	X, r24
				PORTA|=copy_uint8PortValue;
    2598:	ab e3       	ldi	r26, 0x3B	; 59
    259a:	b0 e0       	ldi	r27, 0x00	; 0
    259c:	eb e3       	ldi	r30, 0x3B	; 59
    259e:	f0 e0       	ldi	r31, 0x00	; 0
    25a0:	90 81       	ld	r25, Z
    25a2:	8b 81       	ldd	r24, Y+3	; 0x03
    25a4:	89 2b       	or	r24, r25
    25a6:	8c 93       	st	X, r24
    25a8:	31 c0       	rjmp	.+98     	; 0x260c <MDIO_Errorstate_Set4MostBits+0xd6>
				break;
			case MDIO_PORTB:
				PORTB&=0x0F;
    25aa:	a8 e3       	ldi	r26, 0x38	; 56
    25ac:	b0 e0       	ldi	r27, 0x00	; 0
    25ae:	e8 e3       	ldi	r30, 0x38	; 56
    25b0:	f0 e0       	ldi	r31, 0x00	; 0
    25b2:	80 81       	ld	r24, Z
    25b4:	8f 70       	andi	r24, 0x0F	; 15
    25b6:	8c 93       	st	X, r24
				PORTB|=copy_uint8PortValue;
    25b8:	a8 e3       	ldi	r26, 0x38	; 56
    25ba:	b0 e0       	ldi	r27, 0x00	; 0
    25bc:	e8 e3       	ldi	r30, 0x38	; 56
    25be:	f0 e0       	ldi	r31, 0x00	; 0
    25c0:	90 81       	ld	r25, Z
    25c2:	8b 81       	ldd	r24, Y+3	; 0x03
    25c4:	89 2b       	or	r24, r25
    25c6:	8c 93       	st	X, r24
    25c8:	21 c0       	rjmp	.+66     	; 0x260c <MDIO_Errorstate_Set4MostBits+0xd6>
				break;
			case MDIO_PORTC:
				PORTC&=0x0F;
    25ca:	a5 e3       	ldi	r26, 0x35	; 53
    25cc:	b0 e0       	ldi	r27, 0x00	; 0
    25ce:	e5 e3       	ldi	r30, 0x35	; 53
    25d0:	f0 e0       	ldi	r31, 0x00	; 0
    25d2:	80 81       	ld	r24, Z
    25d4:	8f 70       	andi	r24, 0x0F	; 15
    25d6:	8c 93       	st	X, r24
				PORTC|=copy_uint8PortValue;
    25d8:	a5 e3       	ldi	r26, 0x35	; 53
    25da:	b0 e0       	ldi	r27, 0x00	; 0
    25dc:	e5 e3       	ldi	r30, 0x35	; 53
    25de:	f0 e0       	ldi	r31, 0x00	; 0
    25e0:	90 81       	ld	r25, Z
    25e2:	8b 81       	ldd	r24, Y+3	; 0x03
    25e4:	89 2b       	or	r24, r25
    25e6:	8c 93       	st	X, r24
    25e8:	11 c0       	rjmp	.+34     	; 0x260c <MDIO_Errorstate_Set4MostBits+0xd6>
				break;
			case MDIO_PORTD:
				PORTD&=0x0F;
    25ea:	a2 e3       	ldi	r26, 0x32	; 50
    25ec:	b0 e0       	ldi	r27, 0x00	; 0
    25ee:	e2 e3       	ldi	r30, 0x32	; 50
    25f0:	f0 e0       	ldi	r31, 0x00	; 0
    25f2:	80 81       	ld	r24, Z
    25f4:	8f 70       	andi	r24, 0x0F	; 15
    25f6:	8c 93       	st	X, r24
				PORTD|=copy_uint8PortValue;
    25f8:	a2 e3       	ldi	r26, 0x32	; 50
    25fa:	b0 e0       	ldi	r27, 0x00	; 0
    25fc:	e2 e3       	ldi	r30, 0x32	; 50
    25fe:	f0 e0       	ldi	r31, 0x00	; 0
    2600:	90 81       	ld	r25, Z
    2602:	8b 81       	ldd	r24, Y+3	; 0x03
    2604:	89 2b       	or	r24, r25
    2606:	8c 93       	st	X, r24
    2608:	01 c0       	rjmp	.+2      	; 0x260c <MDIO_Errorstate_Set4MostBits+0xd6>
				break;
			default :
				Loc_Errorstate_Error_state=NOK;
    260a:	19 82       	std	Y+1, r1	; 0x01
				break;
			}
	return Loc_Errorstate_Error_state;
    260c:	89 81       	ldd	r24, Y+1	; 0x01
}
    260e:	0f 90       	pop	r0
    2610:	0f 90       	pop	r0
    2612:	0f 90       	pop	r0
    2614:	0f 90       	pop	r0
    2616:	0f 90       	pop	r0
    2618:	cf 91       	pop	r28
    261a:	df 91       	pop	r29
    261c:	08 95       	ret

0000261e <MADC_VidSingleConversion_Init>:
#include"MADC_Config.h"

void (*MADC_CALLBACK)(void);

void MADC_VidSingleConversion_Init(void)
{
    261e:	df 93       	push	r29
    2620:	cf 93       	push	r28
    2622:	cd b7       	in	r28, 0x3d	; 61
    2624:	de b7       	in	r29, 0x3e	; 62
	/* 1-Select Reference Volt*/
#if MADC_SET_REFERENCVOLT == MADC_Vref_AVCC
	SET_BIT(ADMUX,6);
    2626:	a7 e2       	ldi	r26, 0x27	; 39
    2628:	b0 e0       	ldi	r27, 0x00	; 0
    262a:	e7 e2       	ldi	r30, 0x27	; 39
    262c:	f0 e0       	ldi	r31, 0x00	; 0
    262e:	80 81       	ld	r24, Z
    2630:	80 64       	ori	r24, 0x40	; 64
    2632:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,7);
    2634:	a7 e2       	ldi	r26, 0x27	; 39
    2636:	b0 e0       	ldi	r27, 0x00	; 0
    2638:	e7 e2       	ldi	r30, 0x27	; 39
    263a:	f0 e0       	ldi	r31, 0x00	; 0
    263c:	80 81       	ld	r24, Z
    263e:	8f 77       	andi	r24, 0x7F	; 127
    2640:	8c 93       	st	X, r24
#else
#error"Reference Volt Option Is Not Valid.."
#endif
	/* 2-Select Left Or Right Adjustment Result*/
#if MADC_SET_ADJUSTRESULT==MADC_RIGHT_ADJUST
	CLR_BIT(ADMUX,5);
    2642:	a7 e2       	ldi	r26, 0x27	; 39
    2644:	b0 e0       	ldi	r27, 0x00	; 0
    2646:	e7 e2       	ldi	r30, 0x27	; 39
    2648:	f0 e0       	ldi	r31, 0x00	; 0
    264a:	80 81       	ld	r24, Z
    264c:	8f 7d       	andi	r24, 0xDF	; 223
    264e:	8c 93       	st	X, r24
	SET_BIT(ADMUX,5);
#else
	#error"Adjustment Result Is Not Valid.. "
#endif
	/*  3-Select ADC PreScaler*/
	ADCSRA&=0xF8;
    2650:	a6 e2       	ldi	r26, 0x26	; 38
    2652:	b0 e0       	ldi	r27, 0x00	; 0
    2654:	e6 e2       	ldi	r30, 0x26	; 38
    2656:	f0 e0       	ldi	r31, 0x00	; 0
    2658:	80 81       	ld	r24, Z
    265a:	88 7f       	andi	r24, 0xF8	; 248
    265c:	8c 93       	st	X, r24
	ADCSRA|=ADC_SET_PRESCALER;
    265e:	a6 e2       	ldi	r26, 0x26	; 38
    2660:	b0 e0       	ldi	r27, 0x00	; 0
    2662:	e6 e2       	ldi	r30, 0x26	; 38
    2664:	f0 e0       	ldi	r31, 0x00	; 0
    2666:	80 81       	ld	r24, Z
    2668:	87 60       	ori	r24, 0x07	; 7
    266a:	8c 93       	st	X, r24
	 /* 4-Enable ADC peripheral*/
	SET_BIT(ADCSRA,7);
    266c:	a6 e2       	ldi	r26, 0x26	; 38
    266e:	b0 e0       	ldi	r27, 0x00	; 0
    2670:	e6 e2       	ldi	r30, 0x26	; 38
    2672:	f0 e0       	ldi	r31, 0x00	; 0
    2674:	80 81       	ld	r24, Z
    2676:	80 68       	ori	r24, 0x80	; 128
    2678:	8c 93       	st	X, r24
}
    267a:	cf 91       	pop	r28
    267c:	df 91       	pop	r29
    267e:	08 95       	ret

00002680 <MADC_VidAutoTrigger_Init>:

void MADC_VidAutoTrigger_Init(void)
{
    2680:	df 93       	push	r29
    2682:	cf 93       	push	r28
    2684:	cd b7       	in	r28, 0x3d	; 61
    2686:	de b7       	in	r29, 0x3e	; 62
	/*1-Auto trigger Enable*/
	SET_BIT(ADCSRA,5);
    2688:	a6 e2       	ldi	r26, 0x26	; 38
    268a:	b0 e0       	ldi	r27, 0x00	; 0
    268c:	e6 e2       	ldi	r30, 0x26	; 38
    268e:	f0 e0       	ldi	r31, 0x00	; 0
    2690:	80 81       	ld	r24, Z
    2692:	80 62       	ori	r24, 0x20	; 32
    2694:	8c 93       	st	X, r24
	 /*2-ADC_Auto_Trigger_Source*/
#if MADC_SET_AUTO_TRIGGER_SOURCE ==MADC_FREERUNNING

	 SFIOR&=0x1F;
    2696:	a0 e5       	ldi	r26, 0x50	; 80
    2698:	b0 e0       	ldi	r27, 0x00	; 0
    269a:	e0 e5       	ldi	r30, 0x50	; 80
    269c:	f0 e0       	ldi	r31, 0x00	; 0
    269e:	80 81       	ld	r24, Z
    26a0:	8f 71       	andi	r24, 0x1F	; 31
    26a2:	8c 93       	st	X, r24
	SFIOR|=MADC_FREERUNNING;
    26a4:	a0 e5       	ldi	r26, 0x50	; 80
    26a6:	b0 e0       	ldi	r27, 0x00	; 0
    26a8:	e0 e5       	ldi	r30, 0x50	; 80
    26aa:	f0 e0       	ldi	r31, 0x00	; 0
    26ac:	80 81       	ld	r24, Z
    26ae:	8c 93       	st	X, r24
#else
#error "Auto Trigger Source Is Not Valid.."
#endif
}
    26b0:	cf 91       	pop	r28
    26b2:	df 91       	pop	r29
    26b4:	08 95       	ret

000026b6 <MADC_VidInterrupt_Enable>:

void MADC_VidInterrupt_Enable(void)
{
    26b6:	df 93       	push	r29
    26b8:	cf 93       	push	r28
    26ba:	cd b7       	in	r28, 0x3d	; 61
    26bc:	de b7       	in	r29, 0x3e	; 62
 /* 1-Set ADC Interrupt Enable */
	SET_BIT(ADCSRA,3);
    26be:	a6 e2       	ldi	r26, 0x26	; 38
    26c0:	b0 e0       	ldi	r27, 0x00	; 0
    26c2:	e6 e2       	ldi	r30, 0x26	; 38
    26c4:	f0 e0       	ldi	r31, 0x00	; 0
    26c6:	80 81       	ld	r24, Z
    26c8:	88 60       	ori	r24, 0x08	; 8
    26ca:	8c 93       	st	X, r24
}
    26cc:	cf 91       	pop	r28
    26ce:	df 91       	pop	r29
    26d0:	08 95       	ret

000026d2 <MADC_VidADCStartSingleConversion>:

void MADC_VidADCStartSingleConversion(uint8 copy_uint8Channel)
{
    26d2:	df 93       	push	r29
    26d4:	cf 93       	push	r28
    26d6:	0f 92       	push	r0
    26d8:	cd b7       	in	r28, 0x3d	; 61
    26da:	de b7       	in	r29, 0x3e	; 62
    26dc:	89 83       	std	Y+1, r24	; 0x01
	/*1-Select Analog Channels
	 * single Ended or Differential */
#if MADC_SET_ANALOGCHANNEL ==  MADC_SINGLEENDED_CHANNEL
	ADMUX&=0xE0;
    26de:	a7 e2       	ldi	r26, 0x27	; 39
    26e0:	b0 e0       	ldi	r27, 0x00	; 0
    26e2:	e7 e2       	ldi	r30, 0x27	; 39
    26e4:	f0 e0       	ldi	r31, 0x00	; 0
    26e6:	80 81       	ld	r24, Z
    26e8:	80 7e       	andi	r24, 0xE0	; 224
    26ea:	8c 93       	st	X, r24
	ADMUX|=copy_uint8Channel;
    26ec:	a7 e2       	ldi	r26, 0x27	; 39
    26ee:	b0 e0       	ldi	r27, 0x00	; 0
    26f0:	e7 e2       	ldi	r30, 0x27	; 39
    26f2:	f0 e0       	ldi	r31, 0x00	; 0
    26f4:	90 81       	ld	r25, Z
    26f6:	89 81       	ldd	r24, Y+1	; 0x01
    26f8:	89 2b       	or	r24, r25
    26fa:	8c 93       	st	X, r24
#else
#error "Analog Channel Is Not Valid.."
#endif
	/* 2-Start Conversion*/
	SET_BIT(ADCSRA,6);
    26fc:	a6 e2       	ldi	r26, 0x26	; 38
    26fe:	b0 e0       	ldi	r27, 0x00	; 0
    2700:	e6 e2       	ldi	r30, 0x26	; 38
    2702:	f0 e0       	ldi	r31, 0x00	; 0
    2704:	80 81       	ld	r24, Z
    2706:	80 64       	ori	r24, 0x40	; 64
    2708:	8c 93       	st	X, r24
	/*wait until flag is set to 1*/
	while(GET_BIT(ADCSRA,4)==0);
    270a:	e6 e2       	ldi	r30, 0x26	; 38
    270c:	f0 e0       	ldi	r31, 0x00	; 0
    270e:	80 81       	ld	r24, Z
    2710:	82 95       	swap	r24
    2712:	8f 70       	andi	r24, 0x0F	; 15
    2714:	88 2f       	mov	r24, r24
    2716:	90 e0       	ldi	r25, 0x00	; 0
    2718:	81 70       	andi	r24, 0x01	; 1
    271a:	90 70       	andi	r25, 0x00	; 0
    271c:	00 97       	sbiw	r24, 0x00	; 0
    271e:	a9 f3       	breq	.-22     	; 0x270a <MADC_VidADCStartSingleConversion+0x38>
}
    2720:	0f 90       	pop	r0
    2722:	cf 91       	pop	r28
    2724:	df 91       	pop	r29
    2726:	08 95       	ret

00002728 <MADC_VidADCStartSingleConversion_With_Interrupt>:
void MADC_VidADCStartSingleConversion_With_Interrupt(uint8 copy_uint8Channel)
{
    2728:	df 93       	push	r29
    272a:	cf 93       	push	r28
    272c:	0f 92       	push	r0
    272e:	cd b7       	in	r28, 0x3d	; 61
    2730:	de b7       	in	r29, 0x3e	; 62
    2732:	89 83       	std	Y+1, r24	; 0x01
#if MADC_SET_ANALOGCHANNEL == MADC_SINGLEENDED_CHANNEL
	ADMUX&=0xE0;
    2734:	a7 e2       	ldi	r26, 0x27	; 39
    2736:	b0 e0       	ldi	r27, 0x00	; 0
    2738:	e7 e2       	ldi	r30, 0x27	; 39
    273a:	f0 e0       	ldi	r31, 0x00	; 0
    273c:	80 81       	ld	r24, Z
    273e:	80 7e       	andi	r24, 0xE0	; 224
    2740:	8c 93       	st	X, r24
	ADMUX|=copy_uint8Channel;
    2742:	a7 e2       	ldi	r26, 0x27	; 39
    2744:	b0 e0       	ldi	r27, 0x00	; 0
    2746:	e7 e2       	ldi	r30, 0x27	; 39
    2748:	f0 e0       	ldi	r31, 0x00	; 0
    274a:	90 81       	ld	r25, Z
    274c:	89 81       	ldd	r24, Y+1	; 0x01
    274e:	89 2b       	or	r24, r25
    2750:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,6);
    2752:	a6 e2       	ldi	r26, 0x26	; 38
    2754:	b0 e0       	ldi	r27, 0x00	; 0
    2756:	e6 e2       	ldi	r30, 0x26	; 38
    2758:	f0 e0       	ldi	r31, 0x00	; 0
    275a:	80 81       	ld	r24, Z
    275c:	80 64       	ori	r24, 0x40	; 64
    275e:	8c 93       	st	X, r24
#else
	#error "Analog Channel Is Not Valid .."
#endif
}
    2760:	0f 90       	pop	r0
    2762:	cf 91       	pop	r28
    2764:	df 91       	pop	r29
    2766:	08 95       	ret

00002768 <MADC_uint16Read>:

uint16 MADC_uint16Read(void)
{
    2768:	df 93       	push	r29
    276a:	cf 93       	push	r28
    276c:	00 d0       	rcall	.+0      	; 0x276e <MADC_uint16Read+0x6>
    276e:	cd b7       	in	r28, 0x3d	; 61
    2770:	de b7       	in	r29, 0x3e	; 62
	uint16 ADC;
	/*1- right adjust*/
#if MADC_SET_ADJUSTRESULT==MADC_RIGHT_ADJUST
	ADC=ADCL;
    2772:	e4 e2       	ldi	r30, 0x24	; 36
    2774:	f0 e0       	ldi	r31, 0x00	; 0
    2776:	80 81       	ld	r24, Z
    2778:	88 2f       	mov	r24, r24
    277a:	90 e0       	ldi	r25, 0x00	; 0
    277c:	9a 83       	std	Y+2, r25	; 0x02
    277e:	89 83       	std	Y+1, r24	; 0x01
	ADC|=ADCH<<8;
    2780:	e5 e2       	ldi	r30, 0x25	; 37
    2782:	f0 e0       	ldi	r31, 0x00	; 0
    2784:	80 81       	ld	r24, Z
    2786:	88 2f       	mov	r24, r24
    2788:	90 e0       	ldi	r25, 0x00	; 0
    278a:	98 2f       	mov	r25, r24
    278c:	88 27       	eor	r24, r24
    278e:	9c 01       	movw	r18, r24
    2790:	89 81       	ldd	r24, Y+1	; 0x01
    2792:	9a 81       	ldd	r25, Y+2	; 0x02
    2794:	82 2b       	or	r24, r18
    2796:	93 2b       	or	r25, r19
    2798:	9a 83       	std	Y+2, r25	; 0x02
    279a:	89 83       	std	Y+1, r24	; 0x01
#elif ADC_SET_ADJUSTRESULT==MADC_LEFT_ADJUST
	ADC=ADCH;
 #else
	#error"ADC Read Is Not Valid .."
#endif
	return ADC;
    279c:	89 81       	ldd	r24, Y+1	; 0x01
    279e:	9a 81       	ldd	r25, Y+2	; 0x02

}
    27a0:	0f 90       	pop	r0
    27a2:	0f 90       	pop	r0
    27a4:	cf 91       	pop	r28
    27a6:	df 91       	pop	r29
    27a8:	08 95       	ret

000027aa <MADC_SetCallBack>:
void MADC_SetCallBack(void(*PtrToFun)(void))
{
    27aa:	df 93       	push	r29
    27ac:	cf 93       	push	r28
    27ae:	00 d0       	rcall	.+0      	; 0x27b0 <MADC_SetCallBack+0x6>
    27b0:	cd b7       	in	r28, 0x3d	; 61
    27b2:	de b7       	in	r29, 0x3e	; 62
    27b4:	9a 83       	std	Y+2, r25	; 0x02
    27b6:	89 83       	std	Y+1, r24	; 0x01
	MADC_CALLBACK=PtrToFun;
    27b8:	89 81       	ldd	r24, Y+1	; 0x01
    27ba:	9a 81       	ldd	r25, Y+2	; 0x02
    27bc:	90 93 9c 00 	sts	0x009C, r25
    27c0:	80 93 9b 00 	sts	0x009B, r24
}
    27c4:	0f 90       	pop	r0
    27c6:	0f 90       	pop	r0
    27c8:	cf 91       	pop	r28
    27ca:	df 91       	pop	r29
    27cc:	08 95       	ret

000027ce <__vector_16>:
void __vector_16(void)  __attribute__((signal));
void __vector_16(void)
{
    27ce:	1f 92       	push	r1
    27d0:	0f 92       	push	r0
    27d2:	0f b6       	in	r0, 0x3f	; 63
    27d4:	0f 92       	push	r0
    27d6:	11 24       	eor	r1, r1
    27d8:	2f 93       	push	r18
    27da:	3f 93       	push	r19
    27dc:	4f 93       	push	r20
    27de:	5f 93       	push	r21
    27e0:	6f 93       	push	r22
    27e2:	7f 93       	push	r23
    27e4:	8f 93       	push	r24
    27e6:	9f 93       	push	r25
    27e8:	af 93       	push	r26
    27ea:	bf 93       	push	r27
    27ec:	ef 93       	push	r30
    27ee:	ff 93       	push	r31
    27f0:	df 93       	push	r29
    27f2:	cf 93       	push	r28
    27f4:	cd b7       	in	r28, 0x3d	; 61
    27f6:	de b7       	in	r29, 0x3e	; 62
	MADC_CALLBACK();
    27f8:	e0 91 9b 00 	lds	r30, 0x009B
    27fc:	f0 91 9c 00 	lds	r31, 0x009C
    2800:	09 95       	icall
}
    2802:	cf 91       	pop	r28
    2804:	df 91       	pop	r29
    2806:	ff 91       	pop	r31
    2808:	ef 91       	pop	r30
    280a:	bf 91       	pop	r27
    280c:	af 91       	pop	r26
    280e:	9f 91       	pop	r25
    2810:	8f 91       	pop	r24
    2812:	7f 91       	pop	r23
    2814:	6f 91       	pop	r22
    2816:	5f 91       	pop	r21
    2818:	4f 91       	pop	r20
    281a:	3f 91       	pop	r19
    281c:	2f 91       	pop	r18
    281e:	0f 90       	pop	r0
    2820:	0f be       	out	0x3f, r0	; 63
    2822:	0f 90       	pop	r0
    2824:	1f 90       	pop	r1
    2826:	18 95       	reti

00002828 <APP_TOV>:
static uint32 Global_uint32t2;
static uint16 Global_uint16Flag=0;
static uint32 Global_uint32counter=0;

void APP_TOV(void)
{
    2828:	df 93       	push	r29
    282a:	cf 93       	push	r28
    282c:	cd b7       	in	r28, 0x3d	; 61
    282e:	de b7       	in	r29, 0x3e	; 62
	Global_uint32counter++;
    2830:	80 91 84 00 	lds	r24, 0x0084
    2834:	90 91 85 00 	lds	r25, 0x0085
    2838:	a0 91 86 00 	lds	r26, 0x0086
    283c:	b0 91 87 00 	lds	r27, 0x0087
    2840:	01 96       	adiw	r24, 0x01	; 1
    2842:	a1 1d       	adc	r26, r1
    2844:	b1 1d       	adc	r27, r1
    2846:	80 93 84 00 	sts	0x0084, r24
    284a:	90 93 85 00 	sts	0x0085, r25
    284e:	a0 93 86 00 	sts	0x0086, r26
    2852:	b0 93 87 00 	sts	0x0087, r27
}
    2856:	cf 91       	pop	r28
    2858:	df 91       	pop	r29
    285a:	08 95       	ret

0000285c <APP_ICU>:
void APP_ICU (void)
{
    285c:	df 93       	push	r29
    285e:	cf 93       	push	r28
    2860:	cd b7       	in	r28, 0x3d	; 61
    2862:	de b7       	in	r29, 0x3e	; 62
	if(Global_uint16Flag==0)
    2864:	80 91 82 00 	lds	r24, 0x0082
    2868:	90 91 83 00 	lds	r25, 0x0083
    286c:	00 97       	sbiw	r24, 0x00	; 0
    286e:	f9 f4       	brne	.+62     	; 0x28ae <APP_ICU+0x52>
	{
		Global_uint32counter=0;
    2870:	10 92 84 00 	sts	0x0084, r1
    2874:	10 92 85 00 	sts	0x0085, r1
    2878:	10 92 86 00 	sts	0x0086, r1
    287c:	10 92 87 00 	sts	0x0087, r1
		Global_uint32t1=MTIMER1_uint32Read_ICR1();
    2880:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <MTIMER1_uint32Read_ICR1>
    2884:	dc 01       	movw	r26, r24
    2886:	cb 01       	movw	r24, r22
    2888:	80 93 88 00 	sts	0x0088, r24
    288c:	90 93 89 00 	sts	0x0089, r25
    2890:	a0 93 8a 00 	sts	0x008A, r26
    2894:	b0 93 8b 00 	sts	0x008B, r27
		MEXTI_VidSenseControlSelect(EXTI1,MEXTI_FALLING_EDGE);
    2898:	81 e0       	ldi	r24, 0x01	; 1
    289a:	61 e0       	ldi	r22, 0x01	; 1
    289c:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <MEXTI_VidSenseControlSelect>
		Global_uint16Flag=1;
    28a0:	81 e0       	ldi	r24, 0x01	; 1
    28a2:	90 e0       	ldi	r25, 0x00	; 0
    28a4:	90 93 83 00 	sts	0x0083, r25
    28a8:	80 93 82 00 	sts	0x0082, r24
    28ac:	1d c0       	rjmp	.+58     	; 0x28e8 <APP_ICU+0x8c>
	}
	else if(Global_uint16Flag==1)
    28ae:	80 91 82 00 	lds	r24, 0x0082
    28b2:	90 91 83 00 	lds	r25, 0x0083
    28b6:	81 30       	cpi	r24, 0x01	; 1
    28b8:	91 05       	cpc	r25, r1
    28ba:	b1 f4       	brne	.+44     	; 0x28e8 <APP_ICU+0x8c>
	{
		Global_uint32t2=MTIMER1_uint32Read_ICR1();
    28bc:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <MTIMER1_uint32Read_ICR1>
    28c0:	dc 01       	movw	r26, r24
    28c2:	cb 01       	movw	r24, r22
    28c4:	80 93 8c 00 	sts	0x008C, r24
    28c8:	90 93 8d 00 	sts	0x008D, r25
    28cc:	a0 93 8e 00 	sts	0x008E, r26
    28d0:	b0 93 8f 00 	sts	0x008F, r27
		MEXTI_VidSenseControlSelect(EXTI1,MEXTI_RISING_EDGE);
    28d4:	81 e0       	ldi	r24, 0x01	; 1
    28d6:	60 e0       	ldi	r22, 0x00	; 0
    28d8:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <MEXTI_VidSenseControlSelect>
		Global_uint16Flag=2;
    28dc:	82 e0       	ldi	r24, 0x02	; 2
    28de:	90 e0       	ldi	r25, 0x00	; 0
    28e0:	90 93 83 00 	sts	0x0083, r25
    28e4:	80 93 82 00 	sts	0x0082, r24
	}
}
    28e8:	cf 91       	pop	r28
    28ea:	df 91       	pop	r29
    28ec:	08 95       	ret

000028ee <HULTRASONIC_VidInit>:
void HULTRASONIC_VidInit(void)
{
    28ee:	df 93       	push	r29
    28f0:	cf 93       	push	r28
    28f2:	cd b7       	in	r28, 0x3d	; 61
    28f4:	de b7       	in	r29, 0x3e	; 62
	/*initialize timer1 in overflow mode */
	MTIMER1_VidInit();
    28f6:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <MTIMER1_VidInit>
	MTIMER1_VidTimer1_ICU_SetCallBack(APP_ICU);
    28fa:	8e e2       	ldi	r24, 0x2E	; 46
    28fc:	94 e1       	ldi	r25, 0x14	; 20
    28fe:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <MTIMER1_VidTimer1_ICU_SetCallBack>
	MTIMER1_VidTimer1_OverFlow_SetCallBack(APP_TOV);
    2902:	84 e1       	ldi	r24, 0x14	; 20
    2904:	94 e1       	ldi	r25, 0x14	; 20
    2906:	0e 94 b8 0a 	call	0x1570	; 0x1570 <MTIMER1_VidTimer1_OverFlow_SetCallBack>

	/*initialize interrupt 1*/
	MEXTI_VidInitEXTI1();
    290a:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <MEXTI_VidInitEXTI1>
	MGIE_Enable();
    290e:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <MGIE_Enable>
}
    2912:	cf 91       	pop	r28
    2914:	df 91       	pop	r29
    2916:	08 95       	ret

00002918 <HULTRASONIC_VidStart>:

void HULTRASONIC_VidStart(uint8 copy_TriggerPort,uint8 copy_TriggerPin)
{
    2918:	df 93       	push	r29
    291a:	cf 93       	push	r28
    291c:	cd b7       	in	r28, 0x3d	; 61
    291e:	de b7       	in	r29, 0x3e	; 62
    2920:	6a 97       	sbiw	r28, 0x1a	; 26
    2922:	0f b6       	in	r0, 0x3f	; 63
    2924:	f8 94       	cli
    2926:	de bf       	out	0x3e, r29	; 62
    2928:	0f be       	out	0x3f, r0	; 63
    292a:	cd bf       	out	0x3d, r28	; 61
    292c:	89 8f       	std	Y+25, r24	; 0x19
    292e:	6a 8f       	std	Y+26, r22	; 0x1a
	/*Set Trigger port as output*/
	MDIO_Errorstate_SetPinDirection(copy_TriggerPort,copy_TriggerPin,PIN_OUTPUT);
    2930:	89 8d       	ldd	r24, Y+25	; 0x19
    2932:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2934:	41 e0       	ldi	r20, 0x01	; 1
    2936:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <MDIO_Errorstate_SetPinDirection>

	if(Global_uint16Flag==0)
    293a:	80 91 82 00 	lds	r24, 0x0082
    293e:	90 91 83 00 	lds	r25, 0x0083
    2942:	00 97       	sbiw	r24, 0x00	; 0
    2944:	09 f0       	breq	.+2      	; 0x2948 <HULTRASONIC_VidStart+0x30>
    2946:	cc c0       	rjmp	.+408    	; 0x2ae0 <HULTRASONIC_VidStart+0x1c8>
		{
		/*initialize trigger port and pin*/
		MDIO_Errorstate_SetPinValue(copy_TriggerPort,copy_TriggerPin,PIN_HIGH);
    2948:	89 8d       	ldd	r24, Y+25	; 0x19
    294a:	6a 8d       	ldd	r22, Y+26	; 0x1a
    294c:	41 e0       	ldi	r20, 0x01	; 1
    294e:	0e 94 62 10 	call	0x20c4	; 0x20c4 <MDIO_Errorstate_SetPinValue>
    2952:	80 e0       	ldi	r24, 0x00	; 0
    2954:	90 e0       	ldi	r25, 0x00	; 0
    2956:	a0 e2       	ldi	r26, 0x20	; 32
    2958:	b1 e4       	ldi	r27, 0x41	; 65
    295a:	8d 8b       	std	Y+21, r24	; 0x15
    295c:	9e 8b       	std	Y+22, r25	; 0x16
    295e:	af 8b       	std	Y+23, r26	; 0x17
    2960:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2962:	6d 89       	ldd	r22, Y+21	; 0x15
    2964:	7e 89       	ldd	r23, Y+22	; 0x16
    2966:	8f 89       	ldd	r24, Y+23	; 0x17
    2968:	98 8d       	ldd	r25, Y+24	; 0x18
    296a:	2b ea       	ldi	r18, 0xAB	; 171
    296c:	3a ea       	ldi	r19, 0xAA	; 170
    296e:	4a ea       	ldi	r20, 0xAA	; 170
    2970:	50 e4       	ldi	r21, 0x40	; 64
    2972:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2976:	dc 01       	movw	r26, r24
    2978:	cb 01       	movw	r24, r22
    297a:	89 8b       	std	Y+17, r24	; 0x11
    297c:	9a 8b       	std	Y+18, r25	; 0x12
    297e:	ab 8b       	std	Y+19, r26	; 0x13
    2980:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2982:	69 89       	ldd	r22, Y+17	; 0x11
    2984:	7a 89       	ldd	r23, Y+18	; 0x12
    2986:	8b 89       	ldd	r24, Y+19	; 0x13
    2988:	9c 89       	ldd	r25, Y+20	; 0x14
    298a:	20 e0       	ldi	r18, 0x00	; 0
    298c:	30 e0       	ldi	r19, 0x00	; 0
    298e:	40 e8       	ldi	r20, 0x80	; 128
    2990:	5f e3       	ldi	r21, 0x3F	; 63
    2992:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2996:	88 23       	and	r24, r24
    2998:	1c f4       	brge	.+6      	; 0x29a0 <HULTRASONIC_VidStart+0x88>
		__ticks = 1;
    299a:	81 e0       	ldi	r24, 0x01	; 1
    299c:	88 8b       	std	Y+16, r24	; 0x10
    299e:	91 c0       	rjmp	.+290    	; 0x2ac2 <HULTRASONIC_VidStart+0x1aa>
	else if (__tmp > 255)
    29a0:	69 89       	ldd	r22, Y+17	; 0x11
    29a2:	7a 89       	ldd	r23, Y+18	; 0x12
    29a4:	8b 89       	ldd	r24, Y+19	; 0x13
    29a6:	9c 89       	ldd	r25, Y+20	; 0x14
    29a8:	20 e0       	ldi	r18, 0x00	; 0
    29aa:	30 e0       	ldi	r19, 0x00	; 0
    29ac:	4f e7       	ldi	r20, 0x7F	; 127
    29ae:	53 e4       	ldi	r21, 0x43	; 67
    29b0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29b4:	18 16       	cp	r1, r24
    29b6:	0c f0       	brlt	.+2      	; 0x29ba <HULTRASONIC_VidStart+0xa2>
    29b8:	7b c0       	rjmp	.+246    	; 0x2ab0 <HULTRASONIC_VidStart+0x198>
	{
		_delay_ms(__us / 1000.0);
    29ba:	6d 89       	ldd	r22, Y+21	; 0x15
    29bc:	7e 89       	ldd	r23, Y+22	; 0x16
    29be:	8f 89       	ldd	r24, Y+23	; 0x17
    29c0:	98 8d       	ldd	r25, Y+24	; 0x18
    29c2:	20 e0       	ldi	r18, 0x00	; 0
    29c4:	30 e0       	ldi	r19, 0x00	; 0
    29c6:	4a e7       	ldi	r20, 0x7A	; 122
    29c8:	54 e4       	ldi	r21, 0x44	; 68
    29ca:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    29ce:	dc 01       	movw	r26, r24
    29d0:	cb 01       	movw	r24, r22
    29d2:	8c 87       	std	Y+12, r24	; 0x0c
    29d4:	9d 87       	std	Y+13, r25	; 0x0d
    29d6:	ae 87       	std	Y+14, r26	; 0x0e
    29d8:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29da:	6c 85       	ldd	r22, Y+12	; 0x0c
    29dc:	7d 85       	ldd	r23, Y+13	; 0x0d
    29de:	8e 85       	ldd	r24, Y+14	; 0x0e
    29e0:	9f 85       	ldd	r25, Y+15	; 0x0f
    29e2:	20 e0       	ldi	r18, 0x00	; 0
    29e4:	30 e0       	ldi	r19, 0x00	; 0
    29e6:	4a e7       	ldi	r20, 0x7A	; 122
    29e8:	55 e4       	ldi	r21, 0x45	; 69
    29ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ee:	dc 01       	movw	r26, r24
    29f0:	cb 01       	movw	r24, r22
    29f2:	88 87       	std	Y+8, r24	; 0x08
    29f4:	99 87       	std	Y+9, r25	; 0x09
    29f6:	aa 87       	std	Y+10, r26	; 0x0a
    29f8:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    29fa:	68 85       	ldd	r22, Y+8	; 0x08
    29fc:	79 85       	ldd	r23, Y+9	; 0x09
    29fe:	8a 85       	ldd	r24, Y+10	; 0x0a
    2a00:	9b 85       	ldd	r25, Y+11	; 0x0b
    2a02:	20 e0       	ldi	r18, 0x00	; 0
    2a04:	30 e0       	ldi	r19, 0x00	; 0
    2a06:	40 e8       	ldi	r20, 0x80	; 128
    2a08:	5f e3       	ldi	r21, 0x3F	; 63
    2a0a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a0e:	88 23       	and	r24, r24
    2a10:	2c f4       	brge	.+10     	; 0x2a1c <HULTRASONIC_VidStart+0x104>
		__ticks = 1;
    2a12:	81 e0       	ldi	r24, 0x01	; 1
    2a14:	90 e0       	ldi	r25, 0x00	; 0
    2a16:	9f 83       	std	Y+7, r25	; 0x07
    2a18:	8e 83       	std	Y+6, r24	; 0x06
    2a1a:	3f c0       	rjmp	.+126    	; 0x2a9a <HULTRASONIC_VidStart+0x182>
	else if (__tmp > 65535)
    2a1c:	68 85       	ldd	r22, Y+8	; 0x08
    2a1e:	79 85       	ldd	r23, Y+9	; 0x09
    2a20:	8a 85       	ldd	r24, Y+10	; 0x0a
    2a22:	9b 85       	ldd	r25, Y+11	; 0x0b
    2a24:	20 e0       	ldi	r18, 0x00	; 0
    2a26:	3f ef       	ldi	r19, 0xFF	; 255
    2a28:	4f e7       	ldi	r20, 0x7F	; 127
    2a2a:	57 e4       	ldi	r21, 0x47	; 71
    2a2c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a30:	18 16       	cp	r1, r24
    2a32:	4c f5       	brge	.+82     	; 0x2a86 <HULTRASONIC_VidStart+0x16e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a34:	6c 85       	ldd	r22, Y+12	; 0x0c
    2a36:	7d 85       	ldd	r23, Y+13	; 0x0d
    2a38:	8e 85       	ldd	r24, Y+14	; 0x0e
    2a3a:	9f 85       	ldd	r25, Y+15	; 0x0f
    2a3c:	20 e0       	ldi	r18, 0x00	; 0
    2a3e:	30 e0       	ldi	r19, 0x00	; 0
    2a40:	40 e2       	ldi	r20, 0x20	; 32
    2a42:	51 e4       	ldi	r21, 0x41	; 65
    2a44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a48:	dc 01       	movw	r26, r24
    2a4a:	cb 01       	movw	r24, r22
    2a4c:	bc 01       	movw	r22, r24
    2a4e:	cd 01       	movw	r24, r26
    2a50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a54:	dc 01       	movw	r26, r24
    2a56:	cb 01       	movw	r24, r22
    2a58:	9f 83       	std	Y+7, r25	; 0x07
    2a5a:	8e 83       	std	Y+6, r24	; 0x06
    2a5c:	0f c0       	rjmp	.+30     	; 0x2a7c <HULTRASONIC_VidStart+0x164>
    2a5e:	80 e9       	ldi	r24, 0x90	; 144
    2a60:	91 e0       	ldi	r25, 0x01	; 1
    2a62:	9d 83       	std	Y+5, r25	; 0x05
    2a64:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2a66:	8c 81       	ldd	r24, Y+4	; 0x04
    2a68:	9d 81       	ldd	r25, Y+5	; 0x05
    2a6a:	01 97       	sbiw	r24, 0x01	; 1
    2a6c:	f1 f7       	brne	.-4      	; 0x2a6a <HULTRASONIC_VidStart+0x152>
    2a6e:	9d 83       	std	Y+5, r25	; 0x05
    2a70:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a72:	8e 81       	ldd	r24, Y+6	; 0x06
    2a74:	9f 81       	ldd	r25, Y+7	; 0x07
    2a76:	01 97       	sbiw	r24, 0x01	; 1
    2a78:	9f 83       	std	Y+7, r25	; 0x07
    2a7a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a7c:	8e 81       	ldd	r24, Y+6	; 0x06
    2a7e:	9f 81       	ldd	r25, Y+7	; 0x07
    2a80:	00 97       	sbiw	r24, 0x00	; 0
    2a82:	69 f7       	brne	.-38     	; 0x2a5e <HULTRASONIC_VidStart+0x146>
    2a84:	24 c0       	rjmp	.+72     	; 0x2ace <HULTRASONIC_VidStart+0x1b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a86:	68 85       	ldd	r22, Y+8	; 0x08
    2a88:	79 85       	ldd	r23, Y+9	; 0x09
    2a8a:	8a 85       	ldd	r24, Y+10	; 0x0a
    2a8c:	9b 85       	ldd	r25, Y+11	; 0x0b
    2a8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a92:	dc 01       	movw	r26, r24
    2a94:	cb 01       	movw	r24, r22
    2a96:	9f 83       	std	Y+7, r25	; 0x07
    2a98:	8e 83       	std	Y+6, r24	; 0x06
    2a9a:	8e 81       	ldd	r24, Y+6	; 0x06
    2a9c:	9f 81       	ldd	r25, Y+7	; 0x07
    2a9e:	9b 83       	std	Y+3, r25	; 0x03
    2aa0:	8a 83       	std	Y+2, r24	; 0x02
    2aa2:	8a 81       	ldd	r24, Y+2	; 0x02
    2aa4:	9b 81       	ldd	r25, Y+3	; 0x03
    2aa6:	01 97       	sbiw	r24, 0x01	; 1
    2aa8:	f1 f7       	brne	.-4      	; 0x2aa6 <HULTRASONIC_VidStart+0x18e>
    2aaa:	9b 83       	std	Y+3, r25	; 0x03
    2aac:	8a 83       	std	Y+2, r24	; 0x02
    2aae:	0f c0       	rjmp	.+30     	; 0x2ace <HULTRASONIC_VidStart+0x1b6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2ab0:	69 89       	ldd	r22, Y+17	; 0x11
    2ab2:	7a 89       	ldd	r23, Y+18	; 0x12
    2ab4:	8b 89       	ldd	r24, Y+19	; 0x13
    2ab6:	9c 89       	ldd	r25, Y+20	; 0x14
    2ab8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2abc:	dc 01       	movw	r26, r24
    2abe:	cb 01       	movw	r24, r22
    2ac0:	88 8b       	std	Y+16, r24	; 0x10
    2ac2:	88 89       	ldd	r24, Y+16	; 0x10
    2ac4:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2ac6:	89 81       	ldd	r24, Y+1	; 0x01
    2ac8:	8a 95       	dec	r24
    2aca:	f1 f7       	brne	.-4      	; 0x2ac8 <HULTRASONIC_VidStart+0x1b0>
    2acc:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(10);
		MDIO_Errorstate_SetPinValue(copy_TriggerPort,copy_TriggerPin,PIN_LOW);
    2ace:	89 8d       	ldd	r24, Y+25	; 0x19
    2ad0:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2ad2:	40 e0       	ldi	r20, 0x00	; 0
    2ad4:	0e 94 62 10 	call	0x20c4	; 0x20c4 <MDIO_Errorstate_SetPinValue>
		MEXTI_VidSenseControlSelect(EXTI1,MEXTI_RISING_EDGE);
    2ad8:	81 e0       	ldi	r24, 0x01	; 1
    2ada:	60 e0       	ldi	r22, 0x00	; 0
    2adc:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <MEXTI_VidSenseControlSelect>
		}
}
    2ae0:	6a 96       	adiw	r28, 0x1a	; 26
    2ae2:	0f b6       	in	r0, 0x3f	; 63
    2ae4:	f8 94       	cli
    2ae6:	de bf       	out	0x3e, r29	; 62
    2ae8:	0f be       	out	0x3f, r0	; 63
    2aea:	cd bf       	out	0x3d, r28	; 61
    2aec:	cf 91       	pop	r28
    2aee:	df 91       	pop	r29
    2af0:	08 95       	ret

00002af2 <HULTRASONIC_GetDistance>:
uint8 HULTRASONIC_GetDistance(uint8 copy_TriggerPort,uint8 copy_TriggerPin)
{
    2af2:	ef 92       	push	r14
    2af4:	ff 92       	push	r15
    2af6:	0f 93       	push	r16
    2af8:	1f 93       	push	r17
    2afa:	df 93       	push	r29
    2afc:	cf 93       	push	r28
    2afe:	cd b7       	in	r28, 0x3d	; 61
    2b00:	de b7       	in	r29, 0x3e	; 62
    2b02:	6f 97       	sbiw	r28, 0x1f	; 31
    2b04:	0f b6       	in	r0, 0x3f	; 63
    2b06:	f8 94       	cli
    2b08:	de bf       	out	0x3e, r29	; 62
    2b0a:	0f be       	out	0x3f, r0	; 63
    2b0c:	cd bf       	out	0x3d, r28	; 61
    2b0e:	8e 8f       	std	Y+30, r24	; 0x1e
    2b10:	6f 8f       	std	Y+31, r22	; 0x1f
	uint8 Loc_uint8Distance;
	uint32 Loc_uint32Time;
	Global_uint32counter = 0;
    2b12:	10 92 84 00 	sts	0x0084, r1
    2b16:	10 92 85 00 	sts	0x0085, r1
    2b1a:	10 92 86 00 	sts	0x0086, r1
    2b1e:	10 92 87 00 	sts	0x0087, r1
	Global_uint16Flag = 0;
    2b22:	10 92 83 00 	sts	0x0083, r1
    2b26:	10 92 82 00 	sts	0x0082, r1

	MDIO_Errorstate_SetPinValue(copy_TriggerPort,copy_TriggerPin,PIN_HIGH);
    2b2a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2b2c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2b2e:	41 e0       	ldi	r20, 0x01	; 1
    2b30:	0e 94 62 10 	call	0x20c4	; 0x20c4 <MDIO_Errorstate_SetPinValue>
    2b34:	80 e0       	ldi	r24, 0x00	; 0
    2b36:	90 e0       	ldi	r25, 0x00	; 0
    2b38:	a0 e2       	ldi	r26, 0x20	; 32
    2b3a:	b1 e4       	ldi	r27, 0x41	; 65
    2b3c:	8d 8b       	std	Y+21, r24	; 0x15
    2b3e:	9e 8b       	std	Y+22, r25	; 0x16
    2b40:	af 8b       	std	Y+23, r26	; 0x17
    2b42:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2b44:	6d 89       	ldd	r22, Y+21	; 0x15
    2b46:	7e 89       	ldd	r23, Y+22	; 0x16
    2b48:	8f 89       	ldd	r24, Y+23	; 0x17
    2b4a:	98 8d       	ldd	r25, Y+24	; 0x18
    2b4c:	2b ea       	ldi	r18, 0xAB	; 171
    2b4e:	3a ea       	ldi	r19, 0xAA	; 170
    2b50:	4a ea       	ldi	r20, 0xAA	; 170
    2b52:	50 e4       	ldi	r21, 0x40	; 64
    2b54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b58:	dc 01       	movw	r26, r24
    2b5a:	cb 01       	movw	r24, r22
    2b5c:	89 8b       	std	Y+17, r24	; 0x11
    2b5e:	9a 8b       	std	Y+18, r25	; 0x12
    2b60:	ab 8b       	std	Y+19, r26	; 0x13
    2b62:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2b64:	69 89       	ldd	r22, Y+17	; 0x11
    2b66:	7a 89       	ldd	r23, Y+18	; 0x12
    2b68:	8b 89       	ldd	r24, Y+19	; 0x13
    2b6a:	9c 89       	ldd	r25, Y+20	; 0x14
    2b6c:	20 e0       	ldi	r18, 0x00	; 0
    2b6e:	30 e0       	ldi	r19, 0x00	; 0
    2b70:	40 e8       	ldi	r20, 0x80	; 128
    2b72:	5f e3       	ldi	r21, 0x3F	; 63
    2b74:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b78:	88 23       	and	r24, r24
    2b7a:	1c f4       	brge	.+6      	; 0x2b82 <HULTRASONIC_GetDistance+0x90>
		__ticks = 1;
    2b7c:	81 e0       	ldi	r24, 0x01	; 1
    2b7e:	88 8b       	std	Y+16, r24	; 0x10
    2b80:	91 c0       	rjmp	.+290    	; 0x2ca4 <HULTRASONIC_GetDistance+0x1b2>
	else if (__tmp > 255)
    2b82:	69 89       	ldd	r22, Y+17	; 0x11
    2b84:	7a 89       	ldd	r23, Y+18	; 0x12
    2b86:	8b 89       	ldd	r24, Y+19	; 0x13
    2b88:	9c 89       	ldd	r25, Y+20	; 0x14
    2b8a:	20 e0       	ldi	r18, 0x00	; 0
    2b8c:	30 e0       	ldi	r19, 0x00	; 0
    2b8e:	4f e7       	ldi	r20, 0x7F	; 127
    2b90:	53 e4       	ldi	r21, 0x43	; 67
    2b92:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b96:	18 16       	cp	r1, r24
    2b98:	0c f0       	brlt	.+2      	; 0x2b9c <HULTRASONIC_GetDistance+0xaa>
    2b9a:	7b c0       	rjmp	.+246    	; 0x2c92 <HULTRASONIC_GetDistance+0x1a0>
	{
		_delay_ms(__us / 1000.0);
    2b9c:	6d 89       	ldd	r22, Y+21	; 0x15
    2b9e:	7e 89       	ldd	r23, Y+22	; 0x16
    2ba0:	8f 89       	ldd	r24, Y+23	; 0x17
    2ba2:	98 8d       	ldd	r25, Y+24	; 0x18
    2ba4:	20 e0       	ldi	r18, 0x00	; 0
    2ba6:	30 e0       	ldi	r19, 0x00	; 0
    2ba8:	4a e7       	ldi	r20, 0x7A	; 122
    2baa:	54 e4       	ldi	r21, 0x44	; 68
    2bac:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2bb0:	dc 01       	movw	r26, r24
    2bb2:	cb 01       	movw	r24, r22
    2bb4:	8c 87       	std	Y+12, r24	; 0x0c
    2bb6:	9d 87       	std	Y+13, r25	; 0x0d
    2bb8:	ae 87       	std	Y+14, r26	; 0x0e
    2bba:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bbc:	6c 85       	ldd	r22, Y+12	; 0x0c
    2bbe:	7d 85       	ldd	r23, Y+13	; 0x0d
    2bc0:	8e 85       	ldd	r24, Y+14	; 0x0e
    2bc2:	9f 85       	ldd	r25, Y+15	; 0x0f
    2bc4:	20 e0       	ldi	r18, 0x00	; 0
    2bc6:	30 e0       	ldi	r19, 0x00	; 0
    2bc8:	4a e7       	ldi	r20, 0x7A	; 122
    2bca:	55 e4       	ldi	r21, 0x45	; 69
    2bcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bd0:	dc 01       	movw	r26, r24
    2bd2:	cb 01       	movw	r24, r22
    2bd4:	88 87       	std	Y+8, r24	; 0x08
    2bd6:	99 87       	std	Y+9, r25	; 0x09
    2bd8:	aa 87       	std	Y+10, r26	; 0x0a
    2bda:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2bdc:	68 85       	ldd	r22, Y+8	; 0x08
    2bde:	79 85       	ldd	r23, Y+9	; 0x09
    2be0:	8a 85       	ldd	r24, Y+10	; 0x0a
    2be2:	9b 85       	ldd	r25, Y+11	; 0x0b
    2be4:	20 e0       	ldi	r18, 0x00	; 0
    2be6:	30 e0       	ldi	r19, 0x00	; 0
    2be8:	40 e8       	ldi	r20, 0x80	; 128
    2bea:	5f e3       	ldi	r21, 0x3F	; 63
    2bec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2bf0:	88 23       	and	r24, r24
    2bf2:	2c f4       	brge	.+10     	; 0x2bfe <HULTRASONIC_GetDistance+0x10c>
		__ticks = 1;
    2bf4:	81 e0       	ldi	r24, 0x01	; 1
    2bf6:	90 e0       	ldi	r25, 0x00	; 0
    2bf8:	9f 83       	std	Y+7, r25	; 0x07
    2bfa:	8e 83       	std	Y+6, r24	; 0x06
    2bfc:	3f c0       	rjmp	.+126    	; 0x2c7c <HULTRASONIC_GetDistance+0x18a>
	else if (__tmp > 65535)
    2bfe:	68 85       	ldd	r22, Y+8	; 0x08
    2c00:	79 85       	ldd	r23, Y+9	; 0x09
    2c02:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c04:	9b 85       	ldd	r25, Y+11	; 0x0b
    2c06:	20 e0       	ldi	r18, 0x00	; 0
    2c08:	3f ef       	ldi	r19, 0xFF	; 255
    2c0a:	4f e7       	ldi	r20, 0x7F	; 127
    2c0c:	57 e4       	ldi	r21, 0x47	; 71
    2c0e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c12:	18 16       	cp	r1, r24
    2c14:	4c f5       	brge	.+82     	; 0x2c68 <HULTRASONIC_GetDistance+0x176>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c16:	6c 85       	ldd	r22, Y+12	; 0x0c
    2c18:	7d 85       	ldd	r23, Y+13	; 0x0d
    2c1a:	8e 85       	ldd	r24, Y+14	; 0x0e
    2c1c:	9f 85       	ldd	r25, Y+15	; 0x0f
    2c1e:	20 e0       	ldi	r18, 0x00	; 0
    2c20:	30 e0       	ldi	r19, 0x00	; 0
    2c22:	40 e2       	ldi	r20, 0x20	; 32
    2c24:	51 e4       	ldi	r21, 0x41	; 65
    2c26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c2a:	dc 01       	movw	r26, r24
    2c2c:	cb 01       	movw	r24, r22
    2c2e:	bc 01       	movw	r22, r24
    2c30:	cd 01       	movw	r24, r26
    2c32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c36:	dc 01       	movw	r26, r24
    2c38:	cb 01       	movw	r24, r22
    2c3a:	9f 83       	std	Y+7, r25	; 0x07
    2c3c:	8e 83       	std	Y+6, r24	; 0x06
    2c3e:	0f c0       	rjmp	.+30     	; 0x2c5e <HULTRASONIC_GetDistance+0x16c>
    2c40:	80 e9       	ldi	r24, 0x90	; 144
    2c42:	91 e0       	ldi	r25, 0x01	; 1
    2c44:	9d 83       	std	Y+5, r25	; 0x05
    2c46:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2c48:	8c 81       	ldd	r24, Y+4	; 0x04
    2c4a:	9d 81       	ldd	r25, Y+5	; 0x05
    2c4c:	01 97       	sbiw	r24, 0x01	; 1
    2c4e:	f1 f7       	brne	.-4      	; 0x2c4c <HULTRASONIC_GetDistance+0x15a>
    2c50:	9d 83       	std	Y+5, r25	; 0x05
    2c52:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c54:	8e 81       	ldd	r24, Y+6	; 0x06
    2c56:	9f 81       	ldd	r25, Y+7	; 0x07
    2c58:	01 97       	sbiw	r24, 0x01	; 1
    2c5a:	9f 83       	std	Y+7, r25	; 0x07
    2c5c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c5e:	8e 81       	ldd	r24, Y+6	; 0x06
    2c60:	9f 81       	ldd	r25, Y+7	; 0x07
    2c62:	00 97       	sbiw	r24, 0x00	; 0
    2c64:	69 f7       	brne	.-38     	; 0x2c40 <HULTRASONIC_GetDistance+0x14e>
    2c66:	24 c0       	rjmp	.+72     	; 0x2cb0 <HULTRASONIC_GetDistance+0x1be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c68:	68 85       	ldd	r22, Y+8	; 0x08
    2c6a:	79 85       	ldd	r23, Y+9	; 0x09
    2c6c:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c6e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2c70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c74:	dc 01       	movw	r26, r24
    2c76:	cb 01       	movw	r24, r22
    2c78:	9f 83       	std	Y+7, r25	; 0x07
    2c7a:	8e 83       	std	Y+6, r24	; 0x06
    2c7c:	8e 81       	ldd	r24, Y+6	; 0x06
    2c7e:	9f 81       	ldd	r25, Y+7	; 0x07
    2c80:	9b 83       	std	Y+3, r25	; 0x03
    2c82:	8a 83       	std	Y+2, r24	; 0x02
    2c84:	8a 81       	ldd	r24, Y+2	; 0x02
    2c86:	9b 81       	ldd	r25, Y+3	; 0x03
    2c88:	01 97       	sbiw	r24, 0x01	; 1
    2c8a:	f1 f7       	brne	.-4      	; 0x2c88 <HULTRASONIC_GetDistance+0x196>
    2c8c:	9b 83       	std	Y+3, r25	; 0x03
    2c8e:	8a 83       	std	Y+2, r24	; 0x02
    2c90:	0f c0       	rjmp	.+30     	; 0x2cb0 <HULTRASONIC_GetDistance+0x1be>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2c92:	69 89       	ldd	r22, Y+17	; 0x11
    2c94:	7a 89       	ldd	r23, Y+18	; 0x12
    2c96:	8b 89       	ldd	r24, Y+19	; 0x13
    2c98:	9c 89       	ldd	r25, Y+20	; 0x14
    2c9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c9e:	dc 01       	movw	r26, r24
    2ca0:	cb 01       	movw	r24, r22
    2ca2:	88 8b       	std	Y+16, r24	; 0x10
    2ca4:	88 89       	ldd	r24, Y+16	; 0x10
    2ca6:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2ca8:	89 81       	ldd	r24, Y+1	; 0x01
    2caa:	8a 95       	dec	r24
    2cac:	f1 f7       	brne	.-4      	; 0x2caa <HULTRASONIC_GetDistance+0x1b8>
    2cae:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
	MDIO_Errorstate_SetPinValue(copy_TriggerPort,copy_TriggerPin,PIN_LOW);
    2cb0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2cb2:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2cb4:	40 e0       	ldi	r20, 0x00	; 0
    2cb6:	0e 94 62 10 	call	0x20c4	; 0x20c4 <MDIO_Errorstate_SetPinValue>
	MEXTI_VidSenseControlSelect(EXTI1,MEXTI_RISING_EDGE);
    2cba:	81 e0       	ldi	r24, 0x01	; 1
    2cbc:	60 e0       	ldi	r22, 0x00	; 0
    2cbe:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <MEXTI_VidSenseControlSelect>

	while(Global_uint16Flag<2);
    2cc2:	80 91 82 00 	lds	r24, 0x0082
    2cc6:	90 91 83 00 	lds	r25, 0x0083
    2cca:	82 30       	cpi	r24, 0x02	; 2
    2ccc:	91 05       	cpc	r25, r1
    2cce:	c8 f3       	brcs	.-14     	; 0x2cc2 <HULTRASONIC_GetDistance+0x1d0>
	Loc_uint32Time=(Global_uint32t1+Global_uint32t2)+(Global_uint32counter*65535);
    2cd0:	20 91 88 00 	lds	r18, 0x0088
    2cd4:	30 91 89 00 	lds	r19, 0x0089
    2cd8:	40 91 8a 00 	lds	r20, 0x008A
    2cdc:	50 91 8b 00 	lds	r21, 0x008B
    2ce0:	80 91 8c 00 	lds	r24, 0x008C
    2ce4:	90 91 8d 00 	lds	r25, 0x008D
    2ce8:	a0 91 8e 00 	lds	r26, 0x008E
    2cec:	b0 91 8f 00 	lds	r27, 0x008F
    2cf0:	79 01       	movw	r14, r18
    2cf2:	8a 01       	movw	r16, r20
    2cf4:	e8 0e       	add	r14, r24
    2cf6:	f9 1e       	adc	r15, r25
    2cf8:	0a 1f       	adc	r16, r26
    2cfa:	1b 1f       	adc	r17, r27
    2cfc:	80 91 84 00 	lds	r24, 0x0084
    2d00:	90 91 85 00 	lds	r25, 0x0085
    2d04:	a0 91 86 00 	lds	r26, 0x0086
    2d08:	b0 91 87 00 	lds	r27, 0x0087
    2d0c:	2f ef       	ldi	r18, 0xFF	; 255
    2d0e:	3f ef       	ldi	r19, 0xFF	; 255
    2d10:	40 e0       	ldi	r20, 0x00	; 0
    2d12:	50 e0       	ldi	r21, 0x00	; 0
    2d14:	bc 01       	movw	r22, r24
    2d16:	cd 01       	movw	r24, r26
    2d18:	0e 94 df 24 	call	0x49be	; 0x49be <__mulsi3>
    2d1c:	dc 01       	movw	r26, r24
    2d1e:	cb 01       	movw	r24, r22
    2d20:	8e 0d       	add	r24, r14
    2d22:	9f 1d       	adc	r25, r15
    2d24:	a0 1f       	adc	r26, r16
    2d26:	b1 1f       	adc	r27, r17
    2d28:	89 8f       	std	Y+25, r24	; 0x19
    2d2a:	9a 8f       	std	Y+26, r25	; 0x1a
    2d2c:	ab 8f       	std	Y+27, r26	; 0x1b
    2d2e:	bc 8f       	std	Y+28, r27	; 0x1c
	Loc_uint8Distance=Loc_uint32Time/58;
    2d30:	89 8d       	ldd	r24, Y+25	; 0x19
    2d32:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2d34:	ab 8d       	ldd	r26, Y+27	; 0x1b
    2d36:	bc 8d       	ldd	r27, Y+28	; 0x1c
    2d38:	2a e3       	ldi	r18, 0x3A	; 58
    2d3a:	30 e0       	ldi	r19, 0x00	; 0
    2d3c:	40 e0       	ldi	r20, 0x00	; 0
    2d3e:	50 e0       	ldi	r21, 0x00	; 0
    2d40:	bc 01       	movw	r22, r24
    2d42:	cd 01       	movw	r24, r26
    2d44:	0e 94 12 25 	call	0x4a24	; 0x4a24 <__udivmodsi4>
    2d48:	da 01       	movw	r26, r20
    2d4a:	c9 01       	movw	r24, r18
    2d4c:	8d 8f       	std	Y+29, r24	; 0x1d
	return Loc_uint8Distance;
    2d4e:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    2d50:	6f 96       	adiw	r28, 0x1f	; 31
    2d52:	0f b6       	in	r0, 0x3f	; 63
    2d54:	f8 94       	cli
    2d56:	de bf       	out	0x3e, r29	; 62
    2d58:	0f be       	out	0x3f, r0	; 63
    2d5a:	cd bf       	out	0x3d, r28	; 61
    2d5c:	cf 91       	pop	r28
    2d5e:	df 91       	pop	r29
    2d60:	1f 91       	pop	r17
    2d62:	0f 91       	pop	r16
    2d64:	ff 90       	pop	r15
    2d66:	ef 90       	pop	r14
    2d68:	08 95       	ret

00002d6a <HULTRASONIC_GetDistanceNoBlock>:
uint8 HULTRASONIC_GetDistanceNoBlock(uint8* returnDistance)
{
    2d6a:	ef 92       	push	r14
    2d6c:	ff 92       	push	r15
    2d6e:	0f 93       	push	r16
    2d70:	1f 93       	push	r17
    2d72:	df 93       	push	r29
    2d74:	cf 93       	push	r28
    2d76:	cd b7       	in	r28, 0x3d	; 61
    2d78:	de b7       	in	r29, 0x3e	; 62
    2d7a:	28 97       	sbiw	r28, 0x08	; 8
    2d7c:	0f b6       	in	r0, 0x3f	; 63
    2d7e:	f8 94       	cli
    2d80:	de bf       	out	0x3e, r29	; 62
    2d82:	0f be       	out	0x3f, r0	; 63
    2d84:	cd bf       	out	0x3d, r28	; 61
    2d86:	9f 83       	std	Y+7, r25	; 0x07
    2d88:	8e 83       	std	Y+6, r24	; 0x06
	uint8 Loc_uint8Distance;
	uint32 Loc_uint32Time;
	if(Global_uint16Flag==2)
    2d8a:	80 91 82 00 	lds	r24, 0x0082
    2d8e:	90 91 83 00 	lds	r25, 0x0083
    2d92:	82 30       	cpi	r24, 0x02	; 2
    2d94:	91 05       	cpc	r25, r1
    2d96:	09 f0       	breq	.+2      	; 0x2d9a <HULTRASONIC_GetDistanceNoBlock+0x30>
    2d98:	4a c0       	rjmp	.+148    	; 0x2e2e <HULTRASONIC_GetDistanceNoBlock+0xc4>
		{
			Loc_uint32Time=(Global_uint32t1+Global_uint32t2)+(Global_uint32counter*65535);
    2d9a:	20 91 88 00 	lds	r18, 0x0088
    2d9e:	30 91 89 00 	lds	r19, 0x0089
    2da2:	40 91 8a 00 	lds	r20, 0x008A
    2da6:	50 91 8b 00 	lds	r21, 0x008B
    2daa:	80 91 8c 00 	lds	r24, 0x008C
    2dae:	90 91 8d 00 	lds	r25, 0x008D
    2db2:	a0 91 8e 00 	lds	r26, 0x008E
    2db6:	b0 91 8f 00 	lds	r27, 0x008F
    2dba:	79 01       	movw	r14, r18
    2dbc:	8a 01       	movw	r16, r20
    2dbe:	e8 0e       	add	r14, r24
    2dc0:	f9 1e       	adc	r15, r25
    2dc2:	0a 1f       	adc	r16, r26
    2dc4:	1b 1f       	adc	r17, r27
    2dc6:	80 91 84 00 	lds	r24, 0x0084
    2dca:	90 91 85 00 	lds	r25, 0x0085
    2dce:	a0 91 86 00 	lds	r26, 0x0086
    2dd2:	b0 91 87 00 	lds	r27, 0x0087
    2dd6:	2f ef       	ldi	r18, 0xFF	; 255
    2dd8:	3f ef       	ldi	r19, 0xFF	; 255
    2dda:	40 e0       	ldi	r20, 0x00	; 0
    2ddc:	50 e0       	ldi	r21, 0x00	; 0
    2dde:	bc 01       	movw	r22, r24
    2de0:	cd 01       	movw	r24, r26
    2de2:	0e 94 df 24 	call	0x49be	; 0x49be <__mulsi3>
    2de6:	dc 01       	movw	r26, r24
    2de8:	cb 01       	movw	r24, r22
    2dea:	8e 0d       	add	r24, r14
    2dec:	9f 1d       	adc	r25, r15
    2dee:	a0 1f       	adc	r26, r16
    2df0:	b1 1f       	adc	r27, r17
    2df2:	89 83       	std	Y+1, r24	; 0x01
    2df4:	9a 83       	std	Y+2, r25	; 0x02
    2df6:	ab 83       	std	Y+3, r26	; 0x03
    2df8:	bc 83       	std	Y+4, r27	; 0x04
			Loc_uint8Distance=Loc_uint32Time/58;
    2dfa:	89 81       	ldd	r24, Y+1	; 0x01
    2dfc:	9a 81       	ldd	r25, Y+2	; 0x02
    2dfe:	ab 81       	ldd	r26, Y+3	; 0x03
    2e00:	bc 81       	ldd	r27, Y+4	; 0x04
    2e02:	2a e3       	ldi	r18, 0x3A	; 58
    2e04:	30 e0       	ldi	r19, 0x00	; 0
    2e06:	40 e0       	ldi	r20, 0x00	; 0
    2e08:	50 e0       	ldi	r21, 0x00	; 0
    2e0a:	bc 01       	movw	r22, r24
    2e0c:	cd 01       	movw	r24, r26
    2e0e:	0e 94 12 25 	call	0x4a24	; 0x4a24 <__udivmodsi4>
    2e12:	da 01       	movw	r26, r20
    2e14:	c9 01       	movw	r24, r18
    2e16:	8d 83       	std	Y+5, r24	; 0x05
			*returnDistance=Loc_uint8Distance;
    2e18:	ee 81       	ldd	r30, Y+6	; 0x06
    2e1a:	ff 81       	ldd	r31, Y+7	; 0x07
    2e1c:	8d 81       	ldd	r24, Y+5	; 0x05
    2e1e:	80 83       	st	Z, r24
			Global_uint16Flag=0;
    2e20:	10 92 83 00 	sts	0x0083, r1
    2e24:	10 92 82 00 	sts	0x0082, r1
			return 1;
    2e28:	81 e0       	ldi	r24, 0x01	; 1
    2e2a:	88 87       	std	Y+8, r24	; 0x08
    2e2c:	01 c0       	rjmp	.+2      	; 0x2e30 <HULTRASONIC_GetDistanceNoBlock+0xc6>
		}
	return 0;
    2e2e:	18 86       	std	Y+8, r1	; 0x08
    2e30:	88 85       	ldd	r24, Y+8	; 0x08
}
    2e32:	28 96       	adiw	r28, 0x08	; 8
    2e34:	0f b6       	in	r0, 0x3f	; 63
    2e36:	f8 94       	cli
    2e38:	de bf       	out	0x3e, r29	; 62
    2e3a:	0f be       	out	0x3f, r0	; 63
    2e3c:	cd bf       	out	0x3d, r28	; 61
    2e3e:	cf 91       	pop	r28
    2e40:	df 91       	pop	r29
    2e42:	1f 91       	pop	r17
    2e44:	0f 91       	pop	r16
    2e46:	ff 90       	pop	r15
    2e48:	ef 90       	pop	r14
    2e4a:	08 95       	ret

00002e4c <HTEMP_VidInit>:
#include"../../MCAL/MDIO/MDIO_Interface.h"
#include"../../MCAL/MADC/MADC_Interface.h"
#include"HTEMPERATURE_Interface.h"

void HTEMP_VidInit(void)
{
    2e4c:	df 93       	push	r29
    2e4e:	cf 93       	push	r28
    2e50:	cd b7       	in	r28, 0x3d	; 61
    2e52:	de b7       	in	r29, 0x3e	; 62
	MADC_VidSingleConversion_Init();
    2e54:	0e 94 0f 13 	call	0x261e	; 0x261e <MADC_VidSingleConversion_Init>
}
    2e58:	cf 91       	pop	r28
    2e5a:	df 91       	pop	r29
    2e5c:	08 95       	ret

00002e5e <HTEMP_uintGetTemp>:

uint8 HTEMP_uintGetTemp(uint8 copy_uint8Channel)
{
    2e5e:	df 93       	push	r29
    2e60:	cf 93       	push	r28
    2e62:	cd b7       	in	r28, 0x3d	; 61
    2e64:	de b7       	in	r29, 0x3e	; 62
    2e66:	29 97       	sbiw	r28, 0x09	; 9
    2e68:	0f b6       	in	r0, 0x3f	; 63
    2e6a:	f8 94       	cli
    2e6c:	de bf       	out	0x3e, r29	; 62
    2e6e:	0f be       	out	0x3f, r0	; 63
    2e70:	cd bf       	out	0x3d, r28	; 61
    2e72:	89 87       	std	Y+9, r24	; 0x09
	MADC_VidADCStartSingleConversion(copy_uint8Channel);
    2e74:	89 85       	ldd	r24, Y+9	; 0x09
    2e76:	0e 94 69 13 	call	0x26d2	; 0x26d2 <MADC_VidADCStartSingleConversion>
	uint16 Loc_AnalogValueMV=0;
    2e7a:	18 86       	std	Y+8, r1	; 0x08
    2e7c:	1f 82       	std	Y+7, r1	; 0x07
	uint32 Loc_DigitalValue=0;
    2e7e:	1b 82       	std	Y+3, r1	; 0x03
    2e80:	1c 82       	std	Y+4, r1	; 0x04
    2e82:	1d 82       	std	Y+5, r1	; 0x05
    2e84:	1e 82       	std	Y+6, r1	; 0x06
	uint16 Loc_TemperatureValue=0;
    2e86:	1a 82       	std	Y+2, r1	; 0x02
    2e88:	19 82       	std	Y+1, r1	; 0x01
	Loc_DigitalValue = MADC_uint16Read();
    2e8a:	0e 94 b4 13 	call	0x2768	; 0x2768 <MADC_uint16Read>
    2e8e:	cc 01       	movw	r24, r24
    2e90:	a0 e0       	ldi	r26, 0x00	; 0
    2e92:	b0 e0       	ldi	r27, 0x00	; 0
    2e94:	8b 83       	std	Y+3, r24	; 0x03
    2e96:	9c 83       	std	Y+4, r25	; 0x04
    2e98:	ad 83       	std	Y+5, r26	; 0x05
    2e9a:	be 83       	std	Y+6, r27	; 0x06
	Loc_AnalogValueMV=(Loc_DigitalValue*5000) / (1024);
    2e9c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e9e:	9c 81       	ldd	r25, Y+4	; 0x04
    2ea0:	ad 81       	ldd	r26, Y+5	; 0x05
    2ea2:	be 81       	ldd	r27, Y+6	; 0x06
    2ea4:	28 e8       	ldi	r18, 0x88	; 136
    2ea6:	33 e1       	ldi	r19, 0x13	; 19
    2ea8:	40 e0       	ldi	r20, 0x00	; 0
    2eaa:	50 e0       	ldi	r21, 0x00	; 0
    2eac:	bc 01       	movw	r22, r24
    2eae:	cd 01       	movw	r24, r26
    2eb0:	0e 94 df 24 	call	0x49be	; 0x49be <__mulsi3>
    2eb4:	dc 01       	movw	r26, r24
    2eb6:	cb 01       	movw	r24, r22
    2eb8:	07 2e       	mov	r0, r23
    2eba:	7a e0       	ldi	r23, 0x0A	; 10
    2ebc:	b6 95       	lsr	r27
    2ebe:	a7 95       	ror	r26
    2ec0:	97 95       	ror	r25
    2ec2:	87 95       	ror	r24
    2ec4:	7a 95       	dec	r23
    2ec6:	d1 f7       	brne	.-12     	; 0x2ebc <HTEMP_uintGetTemp+0x5e>
    2ec8:	70 2d       	mov	r23, r0
    2eca:	98 87       	std	Y+8, r25	; 0x08
    2ecc:	8f 83       	std	Y+7, r24	; 0x07
	Loc_TemperatureValue=Loc_AnalogValueMV / (10);
    2ece:	8f 81       	ldd	r24, Y+7	; 0x07
    2ed0:	98 85       	ldd	r25, Y+8	; 0x08
    2ed2:	2a e0       	ldi	r18, 0x0A	; 10
    2ed4:	30 e0       	ldi	r19, 0x00	; 0
    2ed6:	b9 01       	movw	r22, r18
    2ed8:	0e 94 fe 24 	call	0x49fc	; 0x49fc <__udivmodhi4>
    2edc:	cb 01       	movw	r24, r22
    2ede:	9a 83       	std	Y+2, r25	; 0x02
    2ee0:	89 83       	std	Y+1, r24	; 0x01
	return Loc_TemperatureValue;
    2ee2:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ee4:	29 96       	adiw	r28, 0x09	; 9
    2ee6:	0f b6       	in	r0, 0x3f	; 63
    2ee8:	f8 94       	cli
    2eea:	de bf       	out	0x3e, r29	; 62
    2eec:	0f be       	out	0x3f, r0	; 63
    2eee:	cd bf       	out	0x3d, r28	; 61
    2ef0:	cf 91       	pop	r28
    2ef2:	df 91       	pop	r29
    2ef4:	08 95       	ret

00002ef6 <HStepper_Init>:
#include "../HSTEPPER/HStepper_Config.h"
#include "../HSTEPPER/HStepper_Interface.h"
#define F_CPU 16000000UL
#include<util/delay.h>
void HStepper_Init(void)
{
    2ef6:	df 93       	push	r29
    2ef8:	cf 93       	push	r28
    2efa:	cd b7       	in	r28, 0x3d	; 61
    2efc:	de b7       	in	r29, 0x3e	; 62
	MDIO_Errorstate_SetPinDirection(STEPPER_PORT,STEPPER_COIL1,PIN_OUTPUT);
    2efe:	82 e0       	ldi	r24, 0x02	; 2
    2f00:	63 e0       	ldi	r22, 0x03	; 3
    2f02:	41 e0       	ldi	r20, 0x01	; 1
    2f04:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <MDIO_Errorstate_SetPinDirection>
	MDIO_Errorstate_SetPinDirection(STEPPER_PORT,STEPPER_COIL2,PIN_OUTPUT);
    2f08:	82 e0       	ldi	r24, 0x02	; 2
    2f0a:	64 e0       	ldi	r22, 0x04	; 4
    2f0c:	41 e0       	ldi	r20, 0x01	; 1
    2f0e:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <MDIO_Errorstate_SetPinDirection>
	MDIO_Errorstate_SetPinDirection(STEPPER_PORT,STEPPER_COIL3,PIN_OUTPUT);
    2f12:	82 e0       	ldi	r24, 0x02	; 2
    2f14:	65 e0       	ldi	r22, 0x05	; 5
    2f16:	41 e0       	ldi	r20, 0x01	; 1
    2f18:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <MDIO_Errorstate_SetPinDirection>
	MDIO_Errorstate_SetPinDirection(STEPPER_PORT,STEPPER_COIL4,PIN_OUTPUT);
    2f1c:	82 e0       	ldi	r24, 0x02	; 2
    2f1e:	66 e0       	ldi	r22, 0x06	; 6
    2f20:	41 e0       	ldi	r20, 0x01	; 1
    2f22:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <MDIO_Errorstate_SetPinDirection>
}
    2f26:	cf 91       	pop	r28
    2f28:	df 91       	pop	r29
    2f2a:	08 95       	ret

00002f2c <HStepper_SetStepsDirection>:
void HStepper_SetStepsDirection(uint16 copy_uint16Steps,uint8 copy_uint8Direction)
{
    2f2c:	0f 93       	push	r16
    2f2e:	1f 93       	push	r17
    2f30:	df 93       	push	r29
    2f32:	cf 93       	push	r28
    2f34:	cd b7       	in	r28, 0x3d	; 61
    2f36:	de b7       	in	r29, 0x3e	; 62
    2f38:	c9 57       	subi	r28, 0x79	; 121
    2f3a:	d0 40       	sbci	r29, 0x00	; 0
    2f3c:	0f b6       	in	r0, 0x3f	; 63
    2f3e:	f8 94       	cli
    2f40:	de bf       	out	0x3e, r29	; 62
    2f42:	0f be       	out	0x3f, r0	; 63
    2f44:	cd bf       	out	0x3d, r28	; 61
    2f46:	fe 01       	movw	r30, r28
    2f48:	eb 58       	subi	r30, 0x8B	; 139
    2f4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f4c:	91 83       	std	Z+1, r25	; 0x01
    2f4e:	80 83       	st	Z, r24
    2f50:	fe 01       	movw	r30, r28
    2f52:	e9 58       	subi	r30, 0x89	; 137
    2f54:	ff 4f       	sbci	r31, 0xFF	; 255
    2f56:	60 83       	st	Z, r22
	switch(copy_uint8Direction)
    2f58:	fe 01       	movw	r30, r28
    2f5a:	e9 58       	subi	r30, 0x89	; 137
    2f5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f5e:	80 81       	ld	r24, Z
    2f60:	28 2f       	mov	r18, r24
    2f62:	30 e0       	ldi	r19, 0x00	; 0
    2f64:	ea 96       	adiw	r28, 0x3a	; 58
    2f66:	3f af       	std	Y+63, r19	; 0x3f
    2f68:	2e af       	std	Y+62, r18	; 0x3e
    2f6a:	ea 97       	sbiw	r28, 0x3a	; 58
    2f6c:	ea 96       	adiw	r28, 0x3a	; 58
    2f6e:	8e ad       	ldd	r24, Y+62	; 0x3e
    2f70:	9f ad       	ldd	r25, Y+63	; 0x3f
    2f72:	ea 97       	sbiw	r28, 0x3a	; 58
    2f74:	00 97       	sbiw	r24, 0x00	; 0
    2f76:	49 f0       	breq	.+18     	; 0x2f8a <HStepper_SetStepsDirection+0x5e>
    2f78:	ea 96       	adiw	r28, 0x3a	; 58
    2f7a:	ee ad       	ldd	r30, Y+62	; 0x3e
    2f7c:	ff ad       	ldd	r31, Y+63	; 0x3f
    2f7e:	ea 97       	sbiw	r28, 0x3a	; 58
    2f80:	e1 30       	cpi	r30, 0x01	; 1
    2f82:	f1 05       	cpc	r31, r1
    2f84:	09 f4       	brne	.+2      	; 0x2f88 <HStepper_SetStepsDirection+0x5c>
    2f86:	10 c3       	rjmp	.+1568   	; 0x35a8 <HStepper_SetStepsDirection+0x67c>
    2f88:	47 c5       	rjmp	.+2702   	; 0x3a18 <HStepper_SetStepsDirection+0xaec>
		{
	                         /*clock wise */
		     case CW:
			for(uint16 i=0 ;i<copy_uint16Steps;i++)
    2f8a:	fe 01       	movw	r30, r28
    2f8c:	ed 58       	subi	r30, 0x8D	; 141
    2f8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f90:	11 82       	std	Z+1, r1	; 0x01
    2f92:	10 82       	st	Z, r1
    2f94:	f9 c2       	rjmp	.+1522   	; 0x3588 <HStepper_SetStepsDirection+0x65c>
					{
					MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL1,PIN_LOW);
    2f96:	82 e0       	ldi	r24, 0x02	; 2
    2f98:	63 e0       	ldi	r22, 0x03	; 3
    2f9a:	40 e0       	ldi	r20, 0x00	; 0
    2f9c:	0e 94 62 10 	call	0x20c4	; 0x20c4 <MDIO_Errorstate_SetPinValue>
					MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL2,PIN_HIGH);
    2fa0:	82 e0       	ldi	r24, 0x02	; 2
    2fa2:	64 e0       	ldi	r22, 0x04	; 4
    2fa4:	41 e0       	ldi	r20, 0x01	; 1
    2fa6:	0e 94 62 10 	call	0x20c4	; 0x20c4 <MDIO_Errorstate_SetPinValue>
					MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL3,PIN_HIGH);
    2faa:	82 e0       	ldi	r24, 0x02	; 2
    2fac:	65 e0       	ldi	r22, 0x05	; 5
    2fae:	41 e0       	ldi	r20, 0x01	; 1
    2fb0:	0e 94 62 10 	call	0x20c4	; 0x20c4 <MDIO_Errorstate_SetPinValue>
					MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL4,PIN_HIGH);
    2fb4:	82 e0       	ldi	r24, 0x02	; 2
    2fb6:	66 e0       	ldi	r22, 0x06	; 6
    2fb8:	41 e0       	ldi	r20, 0x01	; 1
    2fba:	0e 94 62 10 	call	0x20c4	; 0x20c4 <MDIO_Errorstate_SetPinValue>
    2fbe:	fe 01       	movw	r30, r28
    2fc0:	e3 59       	subi	r30, 0x93	; 147
    2fc2:	ff 4f       	sbci	r31, 0xFF	; 255
    2fc4:	80 e0       	ldi	r24, 0x00	; 0
    2fc6:	90 e0       	ldi	r25, 0x00	; 0
    2fc8:	a0 ee       	ldi	r26, 0xE0	; 224
    2fca:	b0 e4       	ldi	r27, 0x40	; 64
    2fcc:	80 83       	st	Z, r24
    2fce:	91 83       	std	Z+1, r25	; 0x01
    2fd0:	a2 83       	std	Z+2, r26	; 0x02
    2fd2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fd4:	8e 01       	movw	r16, r28
    2fd6:	07 59       	subi	r16, 0x97	; 151
    2fd8:	1f 4f       	sbci	r17, 0xFF	; 255
    2fda:	fe 01       	movw	r30, r28
    2fdc:	e3 59       	subi	r30, 0x93	; 147
    2fde:	ff 4f       	sbci	r31, 0xFF	; 255
    2fe0:	60 81       	ld	r22, Z
    2fe2:	71 81       	ldd	r23, Z+1	; 0x01
    2fe4:	82 81       	ldd	r24, Z+2	; 0x02
    2fe6:	93 81       	ldd	r25, Z+3	; 0x03
    2fe8:	20 e0       	ldi	r18, 0x00	; 0
    2fea:	30 e0       	ldi	r19, 0x00	; 0
    2fec:	4a e7       	ldi	r20, 0x7A	; 122
    2fee:	55 e4       	ldi	r21, 0x45	; 69
    2ff0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ff4:	dc 01       	movw	r26, r24
    2ff6:	cb 01       	movw	r24, r22
    2ff8:	f8 01       	movw	r30, r16
    2ffa:	80 83       	st	Z, r24
    2ffc:	91 83       	std	Z+1, r25	; 0x01
    2ffe:	a2 83       	std	Z+2, r26	; 0x02
    3000:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3002:	fe 01       	movw	r30, r28
    3004:	e7 59       	subi	r30, 0x97	; 151
    3006:	ff 4f       	sbci	r31, 0xFF	; 255
    3008:	60 81       	ld	r22, Z
    300a:	71 81       	ldd	r23, Z+1	; 0x01
    300c:	82 81       	ldd	r24, Z+2	; 0x02
    300e:	93 81       	ldd	r25, Z+3	; 0x03
    3010:	20 e0       	ldi	r18, 0x00	; 0
    3012:	30 e0       	ldi	r19, 0x00	; 0
    3014:	40 e8       	ldi	r20, 0x80	; 128
    3016:	5f e3       	ldi	r21, 0x3F	; 63
    3018:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    301c:	88 23       	and	r24, r24
    301e:	44 f4       	brge	.+16     	; 0x3030 <HStepper_SetStepsDirection+0x104>
		__ticks = 1;
    3020:	fe 01       	movw	r30, r28
    3022:	e9 59       	subi	r30, 0x99	; 153
    3024:	ff 4f       	sbci	r31, 0xFF	; 255
    3026:	81 e0       	ldi	r24, 0x01	; 1
    3028:	90 e0       	ldi	r25, 0x00	; 0
    302a:	91 83       	std	Z+1, r25	; 0x01
    302c:	80 83       	st	Z, r24
    302e:	64 c0       	rjmp	.+200    	; 0x30f8 <HStepper_SetStepsDirection+0x1cc>
	else if (__tmp > 65535)
    3030:	fe 01       	movw	r30, r28
    3032:	e7 59       	subi	r30, 0x97	; 151
    3034:	ff 4f       	sbci	r31, 0xFF	; 255
    3036:	60 81       	ld	r22, Z
    3038:	71 81       	ldd	r23, Z+1	; 0x01
    303a:	82 81       	ldd	r24, Z+2	; 0x02
    303c:	93 81       	ldd	r25, Z+3	; 0x03
    303e:	20 e0       	ldi	r18, 0x00	; 0
    3040:	3f ef       	ldi	r19, 0xFF	; 255
    3042:	4f e7       	ldi	r20, 0x7F	; 127
    3044:	57 e4       	ldi	r21, 0x47	; 71
    3046:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    304a:	18 16       	cp	r1, r24
    304c:	0c f0       	brlt	.+2      	; 0x3050 <HStepper_SetStepsDirection+0x124>
    304e:	43 c0       	rjmp	.+134    	; 0x30d6 <HStepper_SetStepsDirection+0x1aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3050:	fe 01       	movw	r30, r28
    3052:	e3 59       	subi	r30, 0x93	; 147
    3054:	ff 4f       	sbci	r31, 0xFF	; 255
    3056:	60 81       	ld	r22, Z
    3058:	71 81       	ldd	r23, Z+1	; 0x01
    305a:	82 81       	ldd	r24, Z+2	; 0x02
    305c:	93 81       	ldd	r25, Z+3	; 0x03
    305e:	20 e0       	ldi	r18, 0x00	; 0
    3060:	30 e0       	ldi	r19, 0x00	; 0
    3062:	40 e2       	ldi	r20, 0x20	; 32
    3064:	51 e4       	ldi	r21, 0x41	; 65
    3066:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    306a:	dc 01       	movw	r26, r24
    306c:	cb 01       	movw	r24, r22
    306e:	8e 01       	movw	r16, r28
    3070:	09 59       	subi	r16, 0x99	; 153
    3072:	1f 4f       	sbci	r17, 0xFF	; 255
    3074:	bc 01       	movw	r22, r24
    3076:	cd 01       	movw	r24, r26
    3078:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    307c:	dc 01       	movw	r26, r24
    307e:	cb 01       	movw	r24, r22
    3080:	f8 01       	movw	r30, r16
    3082:	91 83       	std	Z+1, r25	; 0x01
    3084:	80 83       	st	Z, r24
    3086:	1f c0       	rjmp	.+62     	; 0x30c6 <HStepper_SetStepsDirection+0x19a>
    3088:	fe 01       	movw	r30, r28
    308a:	eb 59       	subi	r30, 0x9B	; 155
    308c:	ff 4f       	sbci	r31, 0xFF	; 255
    308e:	80 e9       	ldi	r24, 0x90	; 144
    3090:	91 e0       	ldi	r25, 0x01	; 1
    3092:	91 83       	std	Z+1, r25	; 0x01
    3094:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3096:	fe 01       	movw	r30, r28
    3098:	eb 59       	subi	r30, 0x9B	; 155
    309a:	ff 4f       	sbci	r31, 0xFF	; 255
    309c:	80 81       	ld	r24, Z
    309e:	91 81       	ldd	r25, Z+1	; 0x01
    30a0:	01 97       	sbiw	r24, 0x01	; 1
    30a2:	f1 f7       	brne	.-4      	; 0x30a0 <HStepper_SetStepsDirection+0x174>
    30a4:	fe 01       	movw	r30, r28
    30a6:	eb 59       	subi	r30, 0x9B	; 155
    30a8:	ff 4f       	sbci	r31, 0xFF	; 255
    30aa:	91 83       	std	Z+1, r25	; 0x01
    30ac:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30ae:	de 01       	movw	r26, r28
    30b0:	a9 59       	subi	r26, 0x99	; 153
    30b2:	bf 4f       	sbci	r27, 0xFF	; 255
    30b4:	fe 01       	movw	r30, r28
    30b6:	e9 59       	subi	r30, 0x99	; 153
    30b8:	ff 4f       	sbci	r31, 0xFF	; 255
    30ba:	80 81       	ld	r24, Z
    30bc:	91 81       	ldd	r25, Z+1	; 0x01
    30be:	01 97       	sbiw	r24, 0x01	; 1
    30c0:	11 96       	adiw	r26, 0x01	; 1
    30c2:	9c 93       	st	X, r25
    30c4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30c6:	fe 01       	movw	r30, r28
    30c8:	e9 59       	subi	r30, 0x99	; 153
    30ca:	ff 4f       	sbci	r31, 0xFF	; 255
    30cc:	80 81       	ld	r24, Z
    30ce:	91 81       	ldd	r25, Z+1	; 0x01
    30d0:	00 97       	sbiw	r24, 0x00	; 0
    30d2:	d1 f6       	brne	.-76     	; 0x3088 <HStepper_SetStepsDirection+0x15c>
    30d4:	27 c0       	rjmp	.+78     	; 0x3124 <HStepper_SetStepsDirection+0x1f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30d6:	8e 01       	movw	r16, r28
    30d8:	09 59       	subi	r16, 0x99	; 153
    30da:	1f 4f       	sbci	r17, 0xFF	; 255
    30dc:	fe 01       	movw	r30, r28
    30de:	e7 59       	subi	r30, 0x97	; 151
    30e0:	ff 4f       	sbci	r31, 0xFF	; 255
    30e2:	60 81       	ld	r22, Z
    30e4:	71 81       	ldd	r23, Z+1	; 0x01
    30e6:	82 81       	ldd	r24, Z+2	; 0x02
    30e8:	93 81       	ldd	r25, Z+3	; 0x03
    30ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30ee:	dc 01       	movw	r26, r24
    30f0:	cb 01       	movw	r24, r22
    30f2:	f8 01       	movw	r30, r16
    30f4:	91 83       	std	Z+1, r25	; 0x01
    30f6:	80 83       	st	Z, r24
    30f8:	de 01       	movw	r26, r28
    30fa:	ad 59       	subi	r26, 0x9D	; 157
    30fc:	bf 4f       	sbci	r27, 0xFF	; 255
    30fe:	fe 01       	movw	r30, r28
    3100:	e9 59       	subi	r30, 0x99	; 153
    3102:	ff 4f       	sbci	r31, 0xFF	; 255
    3104:	80 81       	ld	r24, Z
    3106:	91 81       	ldd	r25, Z+1	; 0x01
    3108:	8d 93       	st	X+, r24
    310a:	9c 93       	st	X, r25
    310c:	fe 01       	movw	r30, r28
    310e:	ed 59       	subi	r30, 0x9D	; 157
    3110:	ff 4f       	sbci	r31, 0xFF	; 255
    3112:	80 81       	ld	r24, Z
    3114:	91 81       	ldd	r25, Z+1	; 0x01
    3116:	01 97       	sbiw	r24, 0x01	; 1
    3118:	f1 f7       	brne	.-4      	; 0x3116 <HStepper_SetStepsDirection+0x1ea>
    311a:	fe 01       	movw	r30, r28
    311c:	ed 59       	subi	r30, 0x9D	; 157
    311e:	ff 4f       	sbci	r31, 0xFF	; 255
    3120:	91 83       	std	Z+1, r25	; 0x01
    3122:	80 83       	st	Z, r24
					_delay_ms(MAX_SPEED_DELAY);

					MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL1,PIN_HIGH);
    3124:	82 e0       	ldi	r24, 0x02	; 2
    3126:	63 e0       	ldi	r22, 0x03	; 3
    3128:	41 e0       	ldi	r20, 0x01	; 1
    312a:	0e 94 62 10 	call	0x20c4	; 0x20c4 <MDIO_Errorstate_SetPinValue>
					MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL2,PIN_LOW);
    312e:	82 e0       	ldi	r24, 0x02	; 2
    3130:	64 e0       	ldi	r22, 0x04	; 4
    3132:	40 e0       	ldi	r20, 0x00	; 0
    3134:	0e 94 62 10 	call	0x20c4	; 0x20c4 <MDIO_Errorstate_SetPinValue>
					MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL3,PIN_HIGH);
    3138:	82 e0       	ldi	r24, 0x02	; 2
    313a:	65 e0       	ldi	r22, 0x05	; 5
    313c:	41 e0       	ldi	r20, 0x01	; 1
    313e:	0e 94 62 10 	call	0x20c4	; 0x20c4 <MDIO_Errorstate_SetPinValue>
					MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL4,PIN_HIGH);
    3142:	82 e0       	ldi	r24, 0x02	; 2
    3144:	66 e0       	ldi	r22, 0x06	; 6
    3146:	41 e0       	ldi	r20, 0x01	; 1
    3148:	0e 94 62 10 	call	0x20c4	; 0x20c4 <MDIO_Errorstate_SetPinValue>
    314c:	fe 01       	movw	r30, r28
    314e:	e1 5a       	subi	r30, 0xA1	; 161
    3150:	ff 4f       	sbci	r31, 0xFF	; 255
    3152:	80 e0       	ldi	r24, 0x00	; 0
    3154:	90 e0       	ldi	r25, 0x00	; 0
    3156:	a0 ee       	ldi	r26, 0xE0	; 224
    3158:	b0 e4       	ldi	r27, 0x40	; 64
    315a:	80 83       	st	Z, r24
    315c:	91 83       	std	Z+1, r25	; 0x01
    315e:	a2 83       	std	Z+2, r26	; 0x02
    3160:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3162:	8e 01       	movw	r16, r28
    3164:	05 5a       	subi	r16, 0xA5	; 165
    3166:	1f 4f       	sbci	r17, 0xFF	; 255
    3168:	fe 01       	movw	r30, r28
    316a:	e1 5a       	subi	r30, 0xA1	; 161
    316c:	ff 4f       	sbci	r31, 0xFF	; 255
    316e:	60 81       	ld	r22, Z
    3170:	71 81       	ldd	r23, Z+1	; 0x01
    3172:	82 81       	ldd	r24, Z+2	; 0x02
    3174:	93 81       	ldd	r25, Z+3	; 0x03
    3176:	20 e0       	ldi	r18, 0x00	; 0
    3178:	30 e0       	ldi	r19, 0x00	; 0
    317a:	4a e7       	ldi	r20, 0x7A	; 122
    317c:	55 e4       	ldi	r21, 0x45	; 69
    317e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3182:	dc 01       	movw	r26, r24
    3184:	cb 01       	movw	r24, r22
    3186:	f8 01       	movw	r30, r16
    3188:	80 83       	st	Z, r24
    318a:	91 83       	std	Z+1, r25	; 0x01
    318c:	a2 83       	std	Z+2, r26	; 0x02
    318e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3190:	fe 01       	movw	r30, r28
    3192:	e5 5a       	subi	r30, 0xA5	; 165
    3194:	ff 4f       	sbci	r31, 0xFF	; 255
    3196:	60 81       	ld	r22, Z
    3198:	71 81       	ldd	r23, Z+1	; 0x01
    319a:	82 81       	ldd	r24, Z+2	; 0x02
    319c:	93 81       	ldd	r25, Z+3	; 0x03
    319e:	20 e0       	ldi	r18, 0x00	; 0
    31a0:	30 e0       	ldi	r19, 0x00	; 0
    31a2:	40 e8       	ldi	r20, 0x80	; 128
    31a4:	5f e3       	ldi	r21, 0x3F	; 63
    31a6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    31aa:	88 23       	and	r24, r24
    31ac:	44 f4       	brge	.+16     	; 0x31be <HStepper_SetStepsDirection+0x292>
		__ticks = 1;
    31ae:	fe 01       	movw	r30, r28
    31b0:	e7 5a       	subi	r30, 0xA7	; 167
    31b2:	ff 4f       	sbci	r31, 0xFF	; 255
    31b4:	81 e0       	ldi	r24, 0x01	; 1
    31b6:	90 e0       	ldi	r25, 0x00	; 0
    31b8:	91 83       	std	Z+1, r25	; 0x01
    31ba:	80 83       	st	Z, r24
    31bc:	64 c0       	rjmp	.+200    	; 0x3286 <HStepper_SetStepsDirection+0x35a>
	else if (__tmp > 65535)
    31be:	fe 01       	movw	r30, r28
    31c0:	e5 5a       	subi	r30, 0xA5	; 165
    31c2:	ff 4f       	sbci	r31, 0xFF	; 255
    31c4:	60 81       	ld	r22, Z
    31c6:	71 81       	ldd	r23, Z+1	; 0x01
    31c8:	82 81       	ldd	r24, Z+2	; 0x02
    31ca:	93 81       	ldd	r25, Z+3	; 0x03
    31cc:	20 e0       	ldi	r18, 0x00	; 0
    31ce:	3f ef       	ldi	r19, 0xFF	; 255
    31d0:	4f e7       	ldi	r20, 0x7F	; 127
    31d2:	57 e4       	ldi	r21, 0x47	; 71
    31d4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31d8:	18 16       	cp	r1, r24
    31da:	0c f0       	brlt	.+2      	; 0x31de <HStepper_SetStepsDirection+0x2b2>
    31dc:	43 c0       	rjmp	.+134    	; 0x3264 <HStepper_SetStepsDirection+0x338>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31de:	fe 01       	movw	r30, r28
    31e0:	e1 5a       	subi	r30, 0xA1	; 161
    31e2:	ff 4f       	sbci	r31, 0xFF	; 255
    31e4:	60 81       	ld	r22, Z
    31e6:	71 81       	ldd	r23, Z+1	; 0x01
    31e8:	82 81       	ldd	r24, Z+2	; 0x02
    31ea:	93 81       	ldd	r25, Z+3	; 0x03
    31ec:	20 e0       	ldi	r18, 0x00	; 0
    31ee:	30 e0       	ldi	r19, 0x00	; 0
    31f0:	40 e2       	ldi	r20, 0x20	; 32
    31f2:	51 e4       	ldi	r21, 0x41	; 65
    31f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31f8:	dc 01       	movw	r26, r24
    31fa:	cb 01       	movw	r24, r22
    31fc:	8e 01       	movw	r16, r28
    31fe:	07 5a       	subi	r16, 0xA7	; 167
    3200:	1f 4f       	sbci	r17, 0xFF	; 255
    3202:	bc 01       	movw	r22, r24
    3204:	cd 01       	movw	r24, r26
    3206:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    320a:	dc 01       	movw	r26, r24
    320c:	cb 01       	movw	r24, r22
    320e:	f8 01       	movw	r30, r16
    3210:	91 83       	std	Z+1, r25	; 0x01
    3212:	80 83       	st	Z, r24
    3214:	1f c0       	rjmp	.+62     	; 0x3254 <HStepper_SetStepsDirection+0x328>
    3216:	fe 01       	movw	r30, r28
    3218:	e9 5a       	subi	r30, 0xA9	; 169
    321a:	ff 4f       	sbci	r31, 0xFF	; 255
    321c:	80 e9       	ldi	r24, 0x90	; 144
    321e:	91 e0       	ldi	r25, 0x01	; 1
    3220:	91 83       	std	Z+1, r25	; 0x01
    3222:	80 83       	st	Z, r24
    3224:	fe 01       	movw	r30, r28
    3226:	e9 5a       	subi	r30, 0xA9	; 169
    3228:	ff 4f       	sbci	r31, 0xFF	; 255
    322a:	80 81       	ld	r24, Z
    322c:	91 81       	ldd	r25, Z+1	; 0x01
    322e:	01 97       	sbiw	r24, 0x01	; 1
    3230:	f1 f7       	brne	.-4      	; 0x322e <HStepper_SetStepsDirection+0x302>
    3232:	fe 01       	movw	r30, r28
    3234:	e9 5a       	subi	r30, 0xA9	; 169
    3236:	ff 4f       	sbci	r31, 0xFF	; 255
    3238:	91 83       	std	Z+1, r25	; 0x01
    323a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    323c:	de 01       	movw	r26, r28
    323e:	a7 5a       	subi	r26, 0xA7	; 167
    3240:	bf 4f       	sbci	r27, 0xFF	; 255
    3242:	fe 01       	movw	r30, r28
    3244:	e7 5a       	subi	r30, 0xA7	; 167
    3246:	ff 4f       	sbci	r31, 0xFF	; 255
    3248:	80 81       	ld	r24, Z
    324a:	91 81       	ldd	r25, Z+1	; 0x01
    324c:	01 97       	sbiw	r24, 0x01	; 1
    324e:	11 96       	adiw	r26, 0x01	; 1
    3250:	9c 93       	st	X, r25
    3252:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3254:	fe 01       	movw	r30, r28
    3256:	e7 5a       	subi	r30, 0xA7	; 167
    3258:	ff 4f       	sbci	r31, 0xFF	; 255
    325a:	80 81       	ld	r24, Z
    325c:	91 81       	ldd	r25, Z+1	; 0x01
    325e:	00 97       	sbiw	r24, 0x00	; 0
    3260:	d1 f6       	brne	.-76     	; 0x3216 <HStepper_SetStepsDirection+0x2ea>
    3262:	27 c0       	rjmp	.+78     	; 0x32b2 <HStepper_SetStepsDirection+0x386>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3264:	8e 01       	movw	r16, r28
    3266:	07 5a       	subi	r16, 0xA7	; 167
    3268:	1f 4f       	sbci	r17, 0xFF	; 255
    326a:	fe 01       	movw	r30, r28
    326c:	e5 5a       	subi	r30, 0xA5	; 165
    326e:	ff 4f       	sbci	r31, 0xFF	; 255
    3270:	60 81       	ld	r22, Z
    3272:	71 81       	ldd	r23, Z+1	; 0x01
    3274:	82 81       	ldd	r24, Z+2	; 0x02
    3276:	93 81       	ldd	r25, Z+3	; 0x03
    3278:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    327c:	dc 01       	movw	r26, r24
    327e:	cb 01       	movw	r24, r22
    3280:	f8 01       	movw	r30, r16
    3282:	91 83       	std	Z+1, r25	; 0x01
    3284:	80 83       	st	Z, r24
    3286:	de 01       	movw	r26, r28
    3288:	ab 5a       	subi	r26, 0xAB	; 171
    328a:	bf 4f       	sbci	r27, 0xFF	; 255
    328c:	fe 01       	movw	r30, r28
    328e:	e7 5a       	subi	r30, 0xA7	; 167
    3290:	ff 4f       	sbci	r31, 0xFF	; 255
    3292:	80 81       	ld	r24, Z
    3294:	91 81       	ldd	r25, Z+1	; 0x01
    3296:	8d 93       	st	X+, r24
    3298:	9c 93       	st	X, r25
    329a:	fe 01       	movw	r30, r28
    329c:	eb 5a       	subi	r30, 0xAB	; 171
    329e:	ff 4f       	sbci	r31, 0xFF	; 255
    32a0:	80 81       	ld	r24, Z
    32a2:	91 81       	ldd	r25, Z+1	; 0x01
    32a4:	01 97       	sbiw	r24, 0x01	; 1
    32a6:	f1 f7       	brne	.-4      	; 0x32a4 <HStepper_SetStepsDirection+0x378>
    32a8:	fe 01       	movw	r30, r28
    32aa:	eb 5a       	subi	r30, 0xAB	; 171
    32ac:	ff 4f       	sbci	r31, 0xFF	; 255
    32ae:	91 83       	std	Z+1, r25	; 0x01
    32b0:	80 83       	st	Z, r24
					_delay_ms(MAX_SPEED_DELAY);

					MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL1,PIN_HIGH);
    32b2:	82 e0       	ldi	r24, 0x02	; 2
    32b4:	63 e0       	ldi	r22, 0x03	; 3
    32b6:	41 e0       	ldi	r20, 0x01	; 1
    32b8:	0e 94 62 10 	call	0x20c4	; 0x20c4 <MDIO_Errorstate_SetPinValue>
					MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL2,PIN_HIGH);
    32bc:	82 e0       	ldi	r24, 0x02	; 2
    32be:	64 e0       	ldi	r22, 0x04	; 4
    32c0:	41 e0       	ldi	r20, 0x01	; 1
    32c2:	0e 94 62 10 	call	0x20c4	; 0x20c4 <MDIO_Errorstate_SetPinValue>
					MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL3,PIN_LOW);
    32c6:	82 e0       	ldi	r24, 0x02	; 2
    32c8:	65 e0       	ldi	r22, 0x05	; 5
    32ca:	40 e0       	ldi	r20, 0x00	; 0
    32cc:	0e 94 62 10 	call	0x20c4	; 0x20c4 <MDIO_Errorstate_SetPinValue>
					MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL4,PIN_HIGH);
    32d0:	82 e0       	ldi	r24, 0x02	; 2
    32d2:	66 e0       	ldi	r22, 0x06	; 6
    32d4:	41 e0       	ldi	r20, 0x01	; 1
    32d6:	0e 94 62 10 	call	0x20c4	; 0x20c4 <MDIO_Errorstate_SetPinValue>
    32da:	fe 01       	movw	r30, r28
    32dc:	ef 5a       	subi	r30, 0xAF	; 175
    32de:	ff 4f       	sbci	r31, 0xFF	; 255
    32e0:	80 e0       	ldi	r24, 0x00	; 0
    32e2:	90 e0       	ldi	r25, 0x00	; 0
    32e4:	a0 ee       	ldi	r26, 0xE0	; 224
    32e6:	b0 e4       	ldi	r27, 0x40	; 64
    32e8:	80 83       	st	Z, r24
    32ea:	91 83       	std	Z+1, r25	; 0x01
    32ec:	a2 83       	std	Z+2, r26	; 0x02
    32ee:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32f0:	8e 01       	movw	r16, r28
    32f2:	03 5b       	subi	r16, 0xB3	; 179
    32f4:	1f 4f       	sbci	r17, 0xFF	; 255
    32f6:	fe 01       	movw	r30, r28
    32f8:	ef 5a       	subi	r30, 0xAF	; 175
    32fa:	ff 4f       	sbci	r31, 0xFF	; 255
    32fc:	60 81       	ld	r22, Z
    32fe:	71 81       	ldd	r23, Z+1	; 0x01
    3300:	82 81       	ldd	r24, Z+2	; 0x02
    3302:	93 81       	ldd	r25, Z+3	; 0x03
    3304:	20 e0       	ldi	r18, 0x00	; 0
    3306:	30 e0       	ldi	r19, 0x00	; 0
    3308:	4a e7       	ldi	r20, 0x7A	; 122
    330a:	55 e4       	ldi	r21, 0x45	; 69
    330c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3310:	dc 01       	movw	r26, r24
    3312:	cb 01       	movw	r24, r22
    3314:	f8 01       	movw	r30, r16
    3316:	80 83       	st	Z, r24
    3318:	91 83       	std	Z+1, r25	; 0x01
    331a:	a2 83       	std	Z+2, r26	; 0x02
    331c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    331e:	fe 01       	movw	r30, r28
    3320:	e3 5b       	subi	r30, 0xB3	; 179
    3322:	ff 4f       	sbci	r31, 0xFF	; 255
    3324:	60 81       	ld	r22, Z
    3326:	71 81       	ldd	r23, Z+1	; 0x01
    3328:	82 81       	ldd	r24, Z+2	; 0x02
    332a:	93 81       	ldd	r25, Z+3	; 0x03
    332c:	20 e0       	ldi	r18, 0x00	; 0
    332e:	30 e0       	ldi	r19, 0x00	; 0
    3330:	40 e8       	ldi	r20, 0x80	; 128
    3332:	5f e3       	ldi	r21, 0x3F	; 63
    3334:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3338:	88 23       	and	r24, r24
    333a:	44 f4       	brge	.+16     	; 0x334c <HStepper_SetStepsDirection+0x420>
		__ticks = 1;
    333c:	fe 01       	movw	r30, r28
    333e:	e5 5b       	subi	r30, 0xB5	; 181
    3340:	ff 4f       	sbci	r31, 0xFF	; 255
    3342:	81 e0       	ldi	r24, 0x01	; 1
    3344:	90 e0       	ldi	r25, 0x00	; 0
    3346:	91 83       	std	Z+1, r25	; 0x01
    3348:	80 83       	st	Z, r24
    334a:	64 c0       	rjmp	.+200    	; 0x3414 <HStepper_SetStepsDirection+0x4e8>
	else if (__tmp > 65535)
    334c:	fe 01       	movw	r30, r28
    334e:	e3 5b       	subi	r30, 0xB3	; 179
    3350:	ff 4f       	sbci	r31, 0xFF	; 255
    3352:	60 81       	ld	r22, Z
    3354:	71 81       	ldd	r23, Z+1	; 0x01
    3356:	82 81       	ldd	r24, Z+2	; 0x02
    3358:	93 81       	ldd	r25, Z+3	; 0x03
    335a:	20 e0       	ldi	r18, 0x00	; 0
    335c:	3f ef       	ldi	r19, 0xFF	; 255
    335e:	4f e7       	ldi	r20, 0x7F	; 127
    3360:	57 e4       	ldi	r21, 0x47	; 71
    3362:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3366:	18 16       	cp	r1, r24
    3368:	0c f0       	brlt	.+2      	; 0x336c <HStepper_SetStepsDirection+0x440>
    336a:	43 c0       	rjmp	.+134    	; 0x33f2 <HStepper_SetStepsDirection+0x4c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    336c:	fe 01       	movw	r30, r28
    336e:	ef 5a       	subi	r30, 0xAF	; 175
    3370:	ff 4f       	sbci	r31, 0xFF	; 255
    3372:	60 81       	ld	r22, Z
    3374:	71 81       	ldd	r23, Z+1	; 0x01
    3376:	82 81       	ldd	r24, Z+2	; 0x02
    3378:	93 81       	ldd	r25, Z+3	; 0x03
    337a:	20 e0       	ldi	r18, 0x00	; 0
    337c:	30 e0       	ldi	r19, 0x00	; 0
    337e:	40 e2       	ldi	r20, 0x20	; 32
    3380:	51 e4       	ldi	r21, 0x41	; 65
    3382:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3386:	dc 01       	movw	r26, r24
    3388:	cb 01       	movw	r24, r22
    338a:	8e 01       	movw	r16, r28
    338c:	05 5b       	subi	r16, 0xB5	; 181
    338e:	1f 4f       	sbci	r17, 0xFF	; 255
    3390:	bc 01       	movw	r22, r24
    3392:	cd 01       	movw	r24, r26
    3394:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3398:	dc 01       	movw	r26, r24
    339a:	cb 01       	movw	r24, r22
    339c:	f8 01       	movw	r30, r16
    339e:	91 83       	std	Z+1, r25	; 0x01
    33a0:	80 83       	st	Z, r24
    33a2:	1f c0       	rjmp	.+62     	; 0x33e2 <HStepper_SetStepsDirection+0x4b6>
    33a4:	fe 01       	movw	r30, r28
    33a6:	e7 5b       	subi	r30, 0xB7	; 183
    33a8:	ff 4f       	sbci	r31, 0xFF	; 255
    33aa:	80 e9       	ldi	r24, 0x90	; 144
    33ac:	91 e0       	ldi	r25, 0x01	; 1
    33ae:	91 83       	std	Z+1, r25	; 0x01
    33b0:	80 83       	st	Z, r24
    33b2:	fe 01       	movw	r30, r28
    33b4:	e7 5b       	subi	r30, 0xB7	; 183
    33b6:	ff 4f       	sbci	r31, 0xFF	; 255
    33b8:	80 81       	ld	r24, Z
    33ba:	91 81       	ldd	r25, Z+1	; 0x01
    33bc:	01 97       	sbiw	r24, 0x01	; 1
    33be:	f1 f7       	brne	.-4      	; 0x33bc <HStepper_SetStepsDirection+0x490>
    33c0:	fe 01       	movw	r30, r28
    33c2:	e7 5b       	subi	r30, 0xB7	; 183
    33c4:	ff 4f       	sbci	r31, 0xFF	; 255
    33c6:	91 83       	std	Z+1, r25	; 0x01
    33c8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33ca:	de 01       	movw	r26, r28
    33cc:	a5 5b       	subi	r26, 0xB5	; 181
    33ce:	bf 4f       	sbci	r27, 0xFF	; 255
    33d0:	fe 01       	movw	r30, r28
    33d2:	e5 5b       	subi	r30, 0xB5	; 181
    33d4:	ff 4f       	sbci	r31, 0xFF	; 255
    33d6:	80 81       	ld	r24, Z
    33d8:	91 81       	ldd	r25, Z+1	; 0x01
    33da:	01 97       	sbiw	r24, 0x01	; 1
    33dc:	11 96       	adiw	r26, 0x01	; 1
    33de:	9c 93       	st	X, r25
    33e0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33e2:	fe 01       	movw	r30, r28
    33e4:	e5 5b       	subi	r30, 0xB5	; 181
    33e6:	ff 4f       	sbci	r31, 0xFF	; 255
    33e8:	80 81       	ld	r24, Z
    33ea:	91 81       	ldd	r25, Z+1	; 0x01
    33ec:	00 97       	sbiw	r24, 0x00	; 0
    33ee:	d1 f6       	brne	.-76     	; 0x33a4 <HStepper_SetStepsDirection+0x478>
    33f0:	27 c0       	rjmp	.+78     	; 0x3440 <HStepper_SetStepsDirection+0x514>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33f2:	8e 01       	movw	r16, r28
    33f4:	05 5b       	subi	r16, 0xB5	; 181
    33f6:	1f 4f       	sbci	r17, 0xFF	; 255
    33f8:	fe 01       	movw	r30, r28
    33fa:	e3 5b       	subi	r30, 0xB3	; 179
    33fc:	ff 4f       	sbci	r31, 0xFF	; 255
    33fe:	60 81       	ld	r22, Z
    3400:	71 81       	ldd	r23, Z+1	; 0x01
    3402:	82 81       	ldd	r24, Z+2	; 0x02
    3404:	93 81       	ldd	r25, Z+3	; 0x03
    3406:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    340a:	dc 01       	movw	r26, r24
    340c:	cb 01       	movw	r24, r22
    340e:	f8 01       	movw	r30, r16
    3410:	91 83       	std	Z+1, r25	; 0x01
    3412:	80 83       	st	Z, r24
    3414:	de 01       	movw	r26, r28
    3416:	a9 5b       	subi	r26, 0xB9	; 185
    3418:	bf 4f       	sbci	r27, 0xFF	; 255
    341a:	fe 01       	movw	r30, r28
    341c:	e5 5b       	subi	r30, 0xB5	; 181
    341e:	ff 4f       	sbci	r31, 0xFF	; 255
    3420:	80 81       	ld	r24, Z
    3422:	91 81       	ldd	r25, Z+1	; 0x01
    3424:	8d 93       	st	X+, r24
    3426:	9c 93       	st	X, r25
    3428:	fe 01       	movw	r30, r28
    342a:	e9 5b       	subi	r30, 0xB9	; 185
    342c:	ff 4f       	sbci	r31, 0xFF	; 255
    342e:	80 81       	ld	r24, Z
    3430:	91 81       	ldd	r25, Z+1	; 0x01
    3432:	01 97       	sbiw	r24, 0x01	; 1
    3434:	f1 f7       	brne	.-4      	; 0x3432 <HStepper_SetStepsDirection+0x506>
    3436:	fe 01       	movw	r30, r28
    3438:	e9 5b       	subi	r30, 0xB9	; 185
    343a:	ff 4f       	sbci	r31, 0xFF	; 255
    343c:	91 83       	std	Z+1, r25	; 0x01
    343e:	80 83       	st	Z, r24
					_delay_ms(MAX_SPEED_DELAY);

					MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL1,PIN_HIGH);
    3440:	82 e0       	ldi	r24, 0x02	; 2
    3442:	63 e0       	ldi	r22, 0x03	; 3
    3444:	41 e0       	ldi	r20, 0x01	; 1
    3446:	0e 94 62 10 	call	0x20c4	; 0x20c4 <MDIO_Errorstate_SetPinValue>
					MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL2,PIN_HIGH);
    344a:	82 e0       	ldi	r24, 0x02	; 2
    344c:	64 e0       	ldi	r22, 0x04	; 4
    344e:	41 e0       	ldi	r20, 0x01	; 1
    3450:	0e 94 62 10 	call	0x20c4	; 0x20c4 <MDIO_Errorstate_SetPinValue>
					MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL3,PIN_HIGH);
    3454:	82 e0       	ldi	r24, 0x02	; 2
    3456:	65 e0       	ldi	r22, 0x05	; 5
    3458:	41 e0       	ldi	r20, 0x01	; 1
    345a:	0e 94 62 10 	call	0x20c4	; 0x20c4 <MDIO_Errorstate_SetPinValue>
					MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL4,PIN_LOW);
    345e:	82 e0       	ldi	r24, 0x02	; 2
    3460:	66 e0       	ldi	r22, 0x06	; 6
    3462:	40 e0       	ldi	r20, 0x00	; 0
    3464:	0e 94 62 10 	call	0x20c4	; 0x20c4 <MDIO_Errorstate_SetPinValue>
    3468:	fe 01       	movw	r30, r28
    346a:	ed 5b       	subi	r30, 0xBD	; 189
    346c:	ff 4f       	sbci	r31, 0xFF	; 255
    346e:	80 e0       	ldi	r24, 0x00	; 0
    3470:	90 e0       	ldi	r25, 0x00	; 0
    3472:	a0 ee       	ldi	r26, 0xE0	; 224
    3474:	b0 e4       	ldi	r27, 0x40	; 64
    3476:	80 83       	st	Z, r24
    3478:	91 83       	std	Z+1, r25	; 0x01
    347a:	a2 83       	std	Z+2, r26	; 0x02
    347c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    347e:	8e 01       	movw	r16, r28
    3480:	01 5c       	subi	r16, 0xC1	; 193
    3482:	1f 4f       	sbci	r17, 0xFF	; 255
    3484:	fe 01       	movw	r30, r28
    3486:	ed 5b       	subi	r30, 0xBD	; 189
    3488:	ff 4f       	sbci	r31, 0xFF	; 255
    348a:	60 81       	ld	r22, Z
    348c:	71 81       	ldd	r23, Z+1	; 0x01
    348e:	82 81       	ldd	r24, Z+2	; 0x02
    3490:	93 81       	ldd	r25, Z+3	; 0x03
    3492:	20 e0       	ldi	r18, 0x00	; 0
    3494:	30 e0       	ldi	r19, 0x00	; 0
    3496:	4a e7       	ldi	r20, 0x7A	; 122
    3498:	55 e4       	ldi	r21, 0x45	; 69
    349a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    349e:	dc 01       	movw	r26, r24
    34a0:	cb 01       	movw	r24, r22
    34a2:	f8 01       	movw	r30, r16
    34a4:	80 83       	st	Z, r24
    34a6:	91 83       	std	Z+1, r25	; 0x01
    34a8:	a2 83       	std	Z+2, r26	; 0x02
    34aa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    34ac:	fe 01       	movw	r30, r28
    34ae:	ff 96       	adiw	r30, 0x3f	; 63
    34b0:	60 81       	ld	r22, Z
    34b2:	71 81       	ldd	r23, Z+1	; 0x01
    34b4:	82 81       	ldd	r24, Z+2	; 0x02
    34b6:	93 81       	ldd	r25, Z+3	; 0x03
    34b8:	20 e0       	ldi	r18, 0x00	; 0
    34ba:	30 e0       	ldi	r19, 0x00	; 0
    34bc:	40 e8       	ldi	r20, 0x80	; 128
    34be:	5f e3       	ldi	r21, 0x3F	; 63
    34c0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    34c4:	88 23       	and	r24, r24
    34c6:	2c f4       	brge	.+10     	; 0x34d2 <HStepper_SetStepsDirection+0x5a6>
		__ticks = 1;
    34c8:	81 e0       	ldi	r24, 0x01	; 1
    34ca:	90 e0       	ldi	r25, 0x00	; 0
    34cc:	9e af       	std	Y+62, r25	; 0x3e
    34ce:	8d af       	std	Y+61, r24	; 0x3d
    34d0:	46 c0       	rjmp	.+140    	; 0x355e <HStepper_SetStepsDirection+0x632>
	else if (__tmp > 65535)
    34d2:	fe 01       	movw	r30, r28
    34d4:	ff 96       	adiw	r30, 0x3f	; 63
    34d6:	60 81       	ld	r22, Z
    34d8:	71 81       	ldd	r23, Z+1	; 0x01
    34da:	82 81       	ldd	r24, Z+2	; 0x02
    34dc:	93 81       	ldd	r25, Z+3	; 0x03
    34de:	20 e0       	ldi	r18, 0x00	; 0
    34e0:	3f ef       	ldi	r19, 0xFF	; 255
    34e2:	4f e7       	ldi	r20, 0x7F	; 127
    34e4:	57 e4       	ldi	r21, 0x47	; 71
    34e6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    34ea:	18 16       	cp	r1, r24
    34ec:	64 f5       	brge	.+88     	; 0x3546 <HStepper_SetStepsDirection+0x61a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34ee:	fe 01       	movw	r30, r28
    34f0:	ed 5b       	subi	r30, 0xBD	; 189
    34f2:	ff 4f       	sbci	r31, 0xFF	; 255
    34f4:	60 81       	ld	r22, Z
    34f6:	71 81       	ldd	r23, Z+1	; 0x01
    34f8:	82 81       	ldd	r24, Z+2	; 0x02
    34fa:	93 81       	ldd	r25, Z+3	; 0x03
    34fc:	20 e0       	ldi	r18, 0x00	; 0
    34fe:	30 e0       	ldi	r19, 0x00	; 0
    3500:	40 e2       	ldi	r20, 0x20	; 32
    3502:	51 e4       	ldi	r21, 0x41	; 65
    3504:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3508:	dc 01       	movw	r26, r24
    350a:	cb 01       	movw	r24, r22
    350c:	bc 01       	movw	r22, r24
    350e:	cd 01       	movw	r24, r26
    3510:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3514:	dc 01       	movw	r26, r24
    3516:	cb 01       	movw	r24, r22
    3518:	9e af       	std	Y+62, r25	; 0x3e
    351a:	8d af       	std	Y+61, r24	; 0x3d
    351c:	0f c0       	rjmp	.+30     	; 0x353c <HStepper_SetStepsDirection+0x610>
    351e:	80 e9       	ldi	r24, 0x90	; 144
    3520:	91 e0       	ldi	r25, 0x01	; 1
    3522:	9c af       	std	Y+60, r25	; 0x3c
    3524:	8b af       	std	Y+59, r24	; 0x3b
    3526:	8b ad       	ldd	r24, Y+59	; 0x3b
    3528:	9c ad       	ldd	r25, Y+60	; 0x3c
    352a:	01 97       	sbiw	r24, 0x01	; 1
    352c:	f1 f7       	brne	.-4      	; 0x352a <HStepper_SetStepsDirection+0x5fe>
    352e:	9c af       	std	Y+60, r25	; 0x3c
    3530:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3532:	8d ad       	ldd	r24, Y+61	; 0x3d
    3534:	9e ad       	ldd	r25, Y+62	; 0x3e
    3536:	01 97       	sbiw	r24, 0x01	; 1
    3538:	9e af       	std	Y+62, r25	; 0x3e
    353a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    353c:	8d ad       	ldd	r24, Y+61	; 0x3d
    353e:	9e ad       	ldd	r25, Y+62	; 0x3e
    3540:	00 97       	sbiw	r24, 0x00	; 0
    3542:	69 f7       	brne	.-38     	; 0x351e <HStepper_SetStepsDirection+0x5f2>
    3544:	16 c0       	rjmp	.+44     	; 0x3572 <HStepper_SetStepsDirection+0x646>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3546:	fe 01       	movw	r30, r28
    3548:	ff 96       	adiw	r30, 0x3f	; 63
    354a:	60 81       	ld	r22, Z
    354c:	71 81       	ldd	r23, Z+1	; 0x01
    354e:	82 81       	ldd	r24, Z+2	; 0x02
    3550:	93 81       	ldd	r25, Z+3	; 0x03
    3552:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3556:	dc 01       	movw	r26, r24
    3558:	cb 01       	movw	r24, r22
    355a:	9e af       	std	Y+62, r25	; 0x3e
    355c:	8d af       	std	Y+61, r24	; 0x3d
    355e:	8d ad       	ldd	r24, Y+61	; 0x3d
    3560:	9e ad       	ldd	r25, Y+62	; 0x3e
    3562:	9a af       	std	Y+58, r25	; 0x3a
    3564:	89 af       	std	Y+57, r24	; 0x39
    3566:	89 ad       	ldd	r24, Y+57	; 0x39
    3568:	9a ad       	ldd	r25, Y+58	; 0x3a
    356a:	01 97       	sbiw	r24, 0x01	; 1
    356c:	f1 f7       	brne	.-4      	; 0x356a <HStepper_SetStepsDirection+0x63e>
    356e:	9a af       	std	Y+58, r25	; 0x3a
    3570:	89 af       	std	Y+57, r24	; 0x39
{
	switch(copy_uint8Direction)
		{
	                         /*clock wise */
		     case CW:
			for(uint16 i=0 ;i<copy_uint16Steps;i++)
    3572:	de 01       	movw	r26, r28
    3574:	ad 58       	subi	r26, 0x8D	; 141
    3576:	bf 4f       	sbci	r27, 0xFF	; 255
    3578:	fe 01       	movw	r30, r28
    357a:	ed 58       	subi	r30, 0x8D	; 141
    357c:	ff 4f       	sbci	r31, 0xFF	; 255
    357e:	80 81       	ld	r24, Z
    3580:	91 81       	ldd	r25, Z+1	; 0x01
    3582:	01 96       	adiw	r24, 0x01	; 1
    3584:	8d 93       	st	X+, r24
    3586:	9c 93       	st	X, r25
    3588:	fe 01       	movw	r30, r28
    358a:	ed 58       	subi	r30, 0x8D	; 141
    358c:	ff 4f       	sbci	r31, 0xFF	; 255
    358e:	de 01       	movw	r26, r28
    3590:	ab 58       	subi	r26, 0x8B	; 139
    3592:	bf 4f       	sbci	r27, 0xFF	; 255
    3594:	20 81       	ld	r18, Z
    3596:	31 81       	ldd	r19, Z+1	; 0x01
    3598:	8d 91       	ld	r24, X+
    359a:	9c 91       	ld	r25, X
    359c:	11 97       	sbiw	r26, 0x01	; 1
    359e:	28 17       	cp	r18, r24
    35a0:	39 07       	cpc	r19, r25
    35a2:	08 f4       	brcc	.+2      	; 0x35a6 <HStepper_SetStepsDirection+0x67a>
    35a4:	f8 cc       	rjmp	.-1552   	; 0x2f96 <HStepper_SetStepsDirection+0x6a>
    35a6:	38 c2       	rjmp	.+1136   	; 0x3a18 <HStepper_SetStepsDirection+0xaec>
					}
			break;

                                        /* counter clock wise*/
		case CCW :
			for(uint16 i=0 ;i<copy_uint16Steps;i++)
    35a8:	fe 01       	movw	r30, r28
    35aa:	ef 58       	subi	r30, 0x8F	; 143
    35ac:	ff 4f       	sbci	r31, 0xFF	; 255
    35ae:	11 82       	std	Z+1, r1	; 0x01
    35b0:	10 82       	st	Z, r1
    35b2:	23 c2       	rjmp	.+1094   	; 0x39fa <HStepper_SetStepsDirection+0xace>
			{
				MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL1,PIN_HIGH);
    35b4:	82 e0       	ldi	r24, 0x02	; 2
    35b6:	63 e0       	ldi	r22, 0x03	; 3
    35b8:	41 e0       	ldi	r20, 0x01	; 1
    35ba:	0e 94 62 10 	call	0x20c4	; 0x20c4 <MDIO_Errorstate_SetPinValue>
				MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL2,PIN_HIGH);
    35be:	82 e0       	ldi	r24, 0x02	; 2
    35c0:	64 e0       	ldi	r22, 0x04	; 4
    35c2:	41 e0       	ldi	r20, 0x01	; 1
    35c4:	0e 94 62 10 	call	0x20c4	; 0x20c4 <MDIO_Errorstate_SetPinValue>
				MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL3,PIN_HIGH);
    35c8:	82 e0       	ldi	r24, 0x02	; 2
    35ca:	65 e0       	ldi	r22, 0x05	; 5
    35cc:	41 e0       	ldi	r20, 0x01	; 1
    35ce:	0e 94 62 10 	call	0x20c4	; 0x20c4 <MDIO_Errorstate_SetPinValue>
				MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL4,PIN_LOW);
    35d2:	82 e0       	ldi	r24, 0x02	; 2
    35d4:	66 e0       	ldi	r22, 0x06	; 6
    35d6:	40 e0       	ldi	r20, 0x00	; 0
    35d8:	0e 94 62 10 	call	0x20c4	; 0x20c4 <MDIO_Errorstate_SetPinValue>
    35dc:	80 e0       	ldi	r24, 0x00	; 0
    35de:	90 e0       	ldi	r25, 0x00	; 0
    35e0:	a0 ee       	ldi	r26, 0xE0	; 224
    35e2:	b0 e4       	ldi	r27, 0x40	; 64
    35e4:	8d ab       	std	Y+53, r24	; 0x35
    35e6:	9e ab       	std	Y+54, r25	; 0x36
    35e8:	af ab       	std	Y+55, r26	; 0x37
    35ea:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35ec:	6d a9       	ldd	r22, Y+53	; 0x35
    35ee:	7e a9       	ldd	r23, Y+54	; 0x36
    35f0:	8f a9       	ldd	r24, Y+55	; 0x37
    35f2:	98 ad       	ldd	r25, Y+56	; 0x38
    35f4:	20 e0       	ldi	r18, 0x00	; 0
    35f6:	30 e0       	ldi	r19, 0x00	; 0
    35f8:	4a e7       	ldi	r20, 0x7A	; 122
    35fa:	55 e4       	ldi	r21, 0x45	; 69
    35fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3600:	dc 01       	movw	r26, r24
    3602:	cb 01       	movw	r24, r22
    3604:	89 ab       	std	Y+49, r24	; 0x31
    3606:	9a ab       	std	Y+50, r25	; 0x32
    3608:	ab ab       	std	Y+51, r26	; 0x33
    360a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    360c:	69 a9       	ldd	r22, Y+49	; 0x31
    360e:	7a a9       	ldd	r23, Y+50	; 0x32
    3610:	8b a9       	ldd	r24, Y+51	; 0x33
    3612:	9c a9       	ldd	r25, Y+52	; 0x34
    3614:	20 e0       	ldi	r18, 0x00	; 0
    3616:	30 e0       	ldi	r19, 0x00	; 0
    3618:	40 e8       	ldi	r20, 0x80	; 128
    361a:	5f e3       	ldi	r21, 0x3F	; 63
    361c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3620:	88 23       	and	r24, r24
    3622:	2c f4       	brge	.+10     	; 0x362e <HStepper_SetStepsDirection+0x702>
		__ticks = 1;
    3624:	81 e0       	ldi	r24, 0x01	; 1
    3626:	90 e0       	ldi	r25, 0x00	; 0
    3628:	98 ab       	std	Y+48, r25	; 0x30
    362a:	8f a7       	std	Y+47, r24	; 0x2f
    362c:	3f c0       	rjmp	.+126    	; 0x36ac <HStepper_SetStepsDirection+0x780>
	else if (__tmp > 65535)
    362e:	69 a9       	ldd	r22, Y+49	; 0x31
    3630:	7a a9       	ldd	r23, Y+50	; 0x32
    3632:	8b a9       	ldd	r24, Y+51	; 0x33
    3634:	9c a9       	ldd	r25, Y+52	; 0x34
    3636:	20 e0       	ldi	r18, 0x00	; 0
    3638:	3f ef       	ldi	r19, 0xFF	; 255
    363a:	4f e7       	ldi	r20, 0x7F	; 127
    363c:	57 e4       	ldi	r21, 0x47	; 71
    363e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3642:	18 16       	cp	r1, r24
    3644:	4c f5       	brge	.+82     	; 0x3698 <HStepper_SetStepsDirection+0x76c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3646:	6d a9       	ldd	r22, Y+53	; 0x35
    3648:	7e a9       	ldd	r23, Y+54	; 0x36
    364a:	8f a9       	ldd	r24, Y+55	; 0x37
    364c:	98 ad       	ldd	r25, Y+56	; 0x38
    364e:	20 e0       	ldi	r18, 0x00	; 0
    3650:	30 e0       	ldi	r19, 0x00	; 0
    3652:	40 e2       	ldi	r20, 0x20	; 32
    3654:	51 e4       	ldi	r21, 0x41	; 65
    3656:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    365a:	dc 01       	movw	r26, r24
    365c:	cb 01       	movw	r24, r22
    365e:	bc 01       	movw	r22, r24
    3660:	cd 01       	movw	r24, r26
    3662:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3666:	dc 01       	movw	r26, r24
    3668:	cb 01       	movw	r24, r22
    366a:	98 ab       	std	Y+48, r25	; 0x30
    366c:	8f a7       	std	Y+47, r24	; 0x2f
    366e:	0f c0       	rjmp	.+30     	; 0x368e <HStepper_SetStepsDirection+0x762>
    3670:	80 e9       	ldi	r24, 0x90	; 144
    3672:	91 e0       	ldi	r25, 0x01	; 1
    3674:	9e a7       	std	Y+46, r25	; 0x2e
    3676:	8d a7       	std	Y+45, r24	; 0x2d
    3678:	8d a5       	ldd	r24, Y+45	; 0x2d
    367a:	9e a5       	ldd	r25, Y+46	; 0x2e
    367c:	01 97       	sbiw	r24, 0x01	; 1
    367e:	f1 f7       	brne	.-4      	; 0x367c <HStepper_SetStepsDirection+0x750>
    3680:	9e a7       	std	Y+46, r25	; 0x2e
    3682:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3684:	8f a5       	ldd	r24, Y+47	; 0x2f
    3686:	98 a9       	ldd	r25, Y+48	; 0x30
    3688:	01 97       	sbiw	r24, 0x01	; 1
    368a:	98 ab       	std	Y+48, r25	; 0x30
    368c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    368e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3690:	98 a9       	ldd	r25, Y+48	; 0x30
    3692:	00 97       	sbiw	r24, 0x00	; 0
    3694:	69 f7       	brne	.-38     	; 0x3670 <HStepper_SetStepsDirection+0x744>
    3696:	14 c0       	rjmp	.+40     	; 0x36c0 <HStepper_SetStepsDirection+0x794>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3698:	69 a9       	ldd	r22, Y+49	; 0x31
    369a:	7a a9       	ldd	r23, Y+50	; 0x32
    369c:	8b a9       	ldd	r24, Y+51	; 0x33
    369e:	9c a9       	ldd	r25, Y+52	; 0x34
    36a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36a4:	dc 01       	movw	r26, r24
    36a6:	cb 01       	movw	r24, r22
    36a8:	98 ab       	std	Y+48, r25	; 0x30
    36aa:	8f a7       	std	Y+47, r24	; 0x2f
    36ac:	8f a5       	ldd	r24, Y+47	; 0x2f
    36ae:	98 a9       	ldd	r25, Y+48	; 0x30
    36b0:	9c a7       	std	Y+44, r25	; 0x2c
    36b2:	8b a7       	std	Y+43, r24	; 0x2b
    36b4:	8b a5       	ldd	r24, Y+43	; 0x2b
    36b6:	9c a5       	ldd	r25, Y+44	; 0x2c
    36b8:	01 97       	sbiw	r24, 0x01	; 1
    36ba:	f1 f7       	brne	.-4      	; 0x36b8 <HStepper_SetStepsDirection+0x78c>
    36bc:	9c a7       	std	Y+44, r25	; 0x2c
    36be:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(MAX_SPEED_DELAY);

				MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL1,PIN_HIGH);
    36c0:	82 e0       	ldi	r24, 0x02	; 2
    36c2:	63 e0       	ldi	r22, 0x03	; 3
    36c4:	41 e0       	ldi	r20, 0x01	; 1
    36c6:	0e 94 62 10 	call	0x20c4	; 0x20c4 <MDIO_Errorstate_SetPinValue>
				MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL2,PIN_HIGH);
    36ca:	82 e0       	ldi	r24, 0x02	; 2
    36cc:	64 e0       	ldi	r22, 0x04	; 4
    36ce:	41 e0       	ldi	r20, 0x01	; 1
    36d0:	0e 94 62 10 	call	0x20c4	; 0x20c4 <MDIO_Errorstate_SetPinValue>
				MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL3,PIN_LOW);
    36d4:	82 e0       	ldi	r24, 0x02	; 2
    36d6:	65 e0       	ldi	r22, 0x05	; 5
    36d8:	40 e0       	ldi	r20, 0x00	; 0
    36da:	0e 94 62 10 	call	0x20c4	; 0x20c4 <MDIO_Errorstate_SetPinValue>
				MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL4,PIN_HIGH);
    36de:	82 e0       	ldi	r24, 0x02	; 2
    36e0:	66 e0       	ldi	r22, 0x06	; 6
    36e2:	41 e0       	ldi	r20, 0x01	; 1
    36e4:	0e 94 62 10 	call	0x20c4	; 0x20c4 <MDIO_Errorstate_SetPinValue>
    36e8:	80 e0       	ldi	r24, 0x00	; 0
    36ea:	90 e0       	ldi	r25, 0x00	; 0
    36ec:	a0 ee       	ldi	r26, 0xE0	; 224
    36ee:	b0 e4       	ldi	r27, 0x40	; 64
    36f0:	8f a3       	std	Y+39, r24	; 0x27
    36f2:	98 a7       	std	Y+40, r25	; 0x28
    36f4:	a9 a7       	std	Y+41, r26	; 0x29
    36f6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36f8:	6f a1       	ldd	r22, Y+39	; 0x27
    36fa:	78 a5       	ldd	r23, Y+40	; 0x28
    36fc:	89 a5       	ldd	r24, Y+41	; 0x29
    36fe:	9a a5       	ldd	r25, Y+42	; 0x2a
    3700:	20 e0       	ldi	r18, 0x00	; 0
    3702:	30 e0       	ldi	r19, 0x00	; 0
    3704:	4a e7       	ldi	r20, 0x7A	; 122
    3706:	55 e4       	ldi	r21, 0x45	; 69
    3708:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    370c:	dc 01       	movw	r26, r24
    370e:	cb 01       	movw	r24, r22
    3710:	8b a3       	std	Y+35, r24	; 0x23
    3712:	9c a3       	std	Y+36, r25	; 0x24
    3714:	ad a3       	std	Y+37, r26	; 0x25
    3716:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3718:	6b a1       	ldd	r22, Y+35	; 0x23
    371a:	7c a1       	ldd	r23, Y+36	; 0x24
    371c:	8d a1       	ldd	r24, Y+37	; 0x25
    371e:	9e a1       	ldd	r25, Y+38	; 0x26
    3720:	20 e0       	ldi	r18, 0x00	; 0
    3722:	30 e0       	ldi	r19, 0x00	; 0
    3724:	40 e8       	ldi	r20, 0x80	; 128
    3726:	5f e3       	ldi	r21, 0x3F	; 63
    3728:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    372c:	88 23       	and	r24, r24
    372e:	2c f4       	brge	.+10     	; 0x373a <HStepper_SetStepsDirection+0x80e>
		__ticks = 1;
    3730:	81 e0       	ldi	r24, 0x01	; 1
    3732:	90 e0       	ldi	r25, 0x00	; 0
    3734:	9a a3       	std	Y+34, r25	; 0x22
    3736:	89 a3       	std	Y+33, r24	; 0x21
    3738:	3f c0       	rjmp	.+126    	; 0x37b8 <HStepper_SetStepsDirection+0x88c>
	else if (__tmp > 65535)
    373a:	6b a1       	ldd	r22, Y+35	; 0x23
    373c:	7c a1       	ldd	r23, Y+36	; 0x24
    373e:	8d a1       	ldd	r24, Y+37	; 0x25
    3740:	9e a1       	ldd	r25, Y+38	; 0x26
    3742:	20 e0       	ldi	r18, 0x00	; 0
    3744:	3f ef       	ldi	r19, 0xFF	; 255
    3746:	4f e7       	ldi	r20, 0x7F	; 127
    3748:	57 e4       	ldi	r21, 0x47	; 71
    374a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    374e:	18 16       	cp	r1, r24
    3750:	4c f5       	brge	.+82     	; 0x37a4 <HStepper_SetStepsDirection+0x878>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3752:	6f a1       	ldd	r22, Y+39	; 0x27
    3754:	78 a5       	ldd	r23, Y+40	; 0x28
    3756:	89 a5       	ldd	r24, Y+41	; 0x29
    3758:	9a a5       	ldd	r25, Y+42	; 0x2a
    375a:	20 e0       	ldi	r18, 0x00	; 0
    375c:	30 e0       	ldi	r19, 0x00	; 0
    375e:	40 e2       	ldi	r20, 0x20	; 32
    3760:	51 e4       	ldi	r21, 0x41	; 65
    3762:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3766:	dc 01       	movw	r26, r24
    3768:	cb 01       	movw	r24, r22
    376a:	bc 01       	movw	r22, r24
    376c:	cd 01       	movw	r24, r26
    376e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3772:	dc 01       	movw	r26, r24
    3774:	cb 01       	movw	r24, r22
    3776:	9a a3       	std	Y+34, r25	; 0x22
    3778:	89 a3       	std	Y+33, r24	; 0x21
    377a:	0f c0       	rjmp	.+30     	; 0x379a <HStepper_SetStepsDirection+0x86e>
    377c:	80 e9       	ldi	r24, 0x90	; 144
    377e:	91 e0       	ldi	r25, 0x01	; 1
    3780:	98 a3       	std	Y+32, r25	; 0x20
    3782:	8f 8f       	std	Y+31, r24	; 0x1f
    3784:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3786:	98 a1       	ldd	r25, Y+32	; 0x20
    3788:	01 97       	sbiw	r24, 0x01	; 1
    378a:	f1 f7       	brne	.-4      	; 0x3788 <HStepper_SetStepsDirection+0x85c>
    378c:	98 a3       	std	Y+32, r25	; 0x20
    378e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3790:	89 a1       	ldd	r24, Y+33	; 0x21
    3792:	9a a1       	ldd	r25, Y+34	; 0x22
    3794:	01 97       	sbiw	r24, 0x01	; 1
    3796:	9a a3       	std	Y+34, r25	; 0x22
    3798:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    379a:	89 a1       	ldd	r24, Y+33	; 0x21
    379c:	9a a1       	ldd	r25, Y+34	; 0x22
    379e:	00 97       	sbiw	r24, 0x00	; 0
    37a0:	69 f7       	brne	.-38     	; 0x377c <HStepper_SetStepsDirection+0x850>
    37a2:	14 c0       	rjmp	.+40     	; 0x37cc <HStepper_SetStepsDirection+0x8a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37a4:	6b a1       	ldd	r22, Y+35	; 0x23
    37a6:	7c a1       	ldd	r23, Y+36	; 0x24
    37a8:	8d a1       	ldd	r24, Y+37	; 0x25
    37aa:	9e a1       	ldd	r25, Y+38	; 0x26
    37ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37b0:	dc 01       	movw	r26, r24
    37b2:	cb 01       	movw	r24, r22
    37b4:	9a a3       	std	Y+34, r25	; 0x22
    37b6:	89 a3       	std	Y+33, r24	; 0x21
    37b8:	89 a1       	ldd	r24, Y+33	; 0x21
    37ba:	9a a1       	ldd	r25, Y+34	; 0x22
    37bc:	9e 8f       	std	Y+30, r25	; 0x1e
    37be:	8d 8f       	std	Y+29, r24	; 0x1d
    37c0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    37c2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    37c4:	01 97       	sbiw	r24, 0x01	; 1
    37c6:	f1 f7       	brne	.-4      	; 0x37c4 <HStepper_SetStepsDirection+0x898>
    37c8:	9e 8f       	std	Y+30, r25	; 0x1e
    37ca:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(MAX_SPEED_DELAY);
				MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL1,PIN_HIGH);
    37cc:	82 e0       	ldi	r24, 0x02	; 2
    37ce:	63 e0       	ldi	r22, 0x03	; 3
    37d0:	41 e0       	ldi	r20, 0x01	; 1
    37d2:	0e 94 62 10 	call	0x20c4	; 0x20c4 <MDIO_Errorstate_SetPinValue>
				MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL2,PIN_LOW);
    37d6:	82 e0       	ldi	r24, 0x02	; 2
    37d8:	64 e0       	ldi	r22, 0x04	; 4
    37da:	40 e0       	ldi	r20, 0x00	; 0
    37dc:	0e 94 62 10 	call	0x20c4	; 0x20c4 <MDIO_Errorstate_SetPinValue>
				MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL3,PIN_HIGH);
    37e0:	82 e0       	ldi	r24, 0x02	; 2
    37e2:	65 e0       	ldi	r22, 0x05	; 5
    37e4:	41 e0       	ldi	r20, 0x01	; 1
    37e6:	0e 94 62 10 	call	0x20c4	; 0x20c4 <MDIO_Errorstate_SetPinValue>
				MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL4,PIN_HIGH);
    37ea:	82 e0       	ldi	r24, 0x02	; 2
    37ec:	66 e0       	ldi	r22, 0x06	; 6
    37ee:	41 e0       	ldi	r20, 0x01	; 1
    37f0:	0e 94 62 10 	call	0x20c4	; 0x20c4 <MDIO_Errorstate_SetPinValue>
    37f4:	80 e0       	ldi	r24, 0x00	; 0
    37f6:	90 e0       	ldi	r25, 0x00	; 0
    37f8:	a0 ee       	ldi	r26, 0xE0	; 224
    37fa:	b0 e4       	ldi	r27, 0x40	; 64
    37fc:	89 8f       	std	Y+25, r24	; 0x19
    37fe:	9a 8f       	std	Y+26, r25	; 0x1a
    3800:	ab 8f       	std	Y+27, r26	; 0x1b
    3802:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3804:	69 8d       	ldd	r22, Y+25	; 0x19
    3806:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3808:	8b 8d       	ldd	r24, Y+27	; 0x1b
    380a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    380c:	20 e0       	ldi	r18, 0x00	; 0
    380e:	30 e0       	ldi	r19, 0x00	; 0
    3810:	4a e7       	ldi	r20, 0x7A	; 122
    3812:	55 e4       	ldi	r21, 0x45	; 69
    3814:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3818:	dc 01       	movw	r26, r24
    381a:	cb 01       	movw	r24, r22
    381c:	8d 8b       	std	Y+21, r24	; 0x15
    381e:	9e 8b       	std	Y+22, r25	; 0x16
    3820:	af 8b       	std	Y+23, r26	; 0x17
    3822:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3824:	6d 89       	ldd	r22, Y+21	; 0x15
    3826:	7e 89       	ldd	r23, Y+22	; 0x16
    3828:	8f 89       	ldd	r24, Y+23	; 0x17
    382a:	98 8d       	ldd	r25, Y+24	; 0x18
    382c:	20 e0       	ldi	r18, 0x00	; 0
    382e:	30 e0       	ldi	r19, 0x00	; 0
    3830:	40 e8       	ldi	r20, 0x80	; 128
    3832:	5f e3       	ldi	r21, 0x3F	; 63
    3834:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3838:	88 23       	and	r24, r24
    383a:	2c f4       	brge	.+10     	; 0x3846 <HStepper_SetStepsDirection+0x91a>
		__ticks = 1;
    383c:	81 e0       	ldi	r24, 0x01	; 1
    383e:	90 e0       	ldi	r25, 0x00	; 0
    3840:	9c 8b       	std	Y+20, r25	; 0x14
    3842:	8b 8b       	std	Y+19, r24	; 0x13
    3844:	3f c0       	rjmp	.+126    	; 0x38c4 <HStepper_SetStepsDirection+0x998>
	else if (__tmp > 65535)
    3846:	6d 89       	ldd	r22, Y+21	; 0x15
    3848:	7e 89       	ldd	r23, Y+22	; 0x16
    384a:	8f 89       	ldd	r24, Y+23	; 0x17
    384c:	98 8d       	ldd	r25, Y+24	; 0x18
    384e:	20 e0       	ldi	r18, 0x00	; 0
    3850:	3f ef       	ldi	r19, 0xFF	; 255
    3852:	4f e7       	ldi	r20, 0x7F	; 127
    3854:	57 e4       	ldi	r21, 0x47	; 71
    3856:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    385a:	18 16       	cp	r1, r24
    385c:	4c f5       	brge	.+82     	; 0x38b0 <HStepper_SetStepsDirection+0x984>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    385e:	69 8d       	ldd	r22, Y+25	; 0x19
    3860:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3862:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3864:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3866:	20 e0       	ldi	r18, 0x00	; 0
    3868:	30 e0       	ldi	r19, 0x00	; 0
    386a:	40 e2       	ldi	r20, 0x20	; 32
    386c:	51 e4       	ldi	r21, 0x41	; 65
    386e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3872:	dc 01       	movw	r26, r24
    3874:	cb 01       	movw	r24, r22
    3876:	bc 01       	movw	r22, r24
    3878:	cd 01       	movw	r24, r26
    387a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    387e:	dc 01       	movw	r26, r24
    3880:	cb 01       	movw	r24, r22
    3882:	9c 8b       	std	Y+20, r25	; 0x14
    3884:	8b 8b       	std	Y+19, r24	; 0x13
    3886:	0f c0       	rjmp	.+30     	; 0x38a6 <HStepper_SetStepsDirection+0x97a>
    3888:	80 e9       	ldi	r24, 0x90	; 144
    388a:	91 e0       	ldi	r25, 0x01	; 1
    388c:	9a 8b       	std	Y+18, r25	; 0x12
    388e:	89 8b       	std	Y+17, r24	; 0x11
    3890:	89 89       	ldd	r24, Y+17	; 0x11
    3892:	9a 89       	ldd	r25, Y+18	; 0x12
    3894:	01 97       	sbiw	r24, 0x01	; 1
    3896:	f1 f7       	brne	.-4      	; 0x3894 <HStepper_SetStepsDirection+0x968>
    3898:	9a 8b       	std	Y+18, r25	; 0x12
    389a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    389c:	8b 89       	ldd	r24, Y+19	; 0x13
    389e:	9c 89       	ldd	r25, Y+20	; 0x14
    38a0:	01 97       	sbiw	r24, 0x01	; 1
    38a2:	9c 8b       	std	Y+20, r25	; 0x14
    38a4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38a6:	8b 89       	ldd	r24, Y+19	; 0x13
    38a8:	9c 89       	ldd	r25, Y+20	; 0x14
    38aa:	00 97       	sbiw	r24, 0x00	; 0
    38ac:	69 f7       	brne	.-38     	; 0x3888 <HStepper_SetStepsDirection+0x95c>
    38ae:	14 c0       	rjmp	.+40     	; 0x38d8 <HStepper_SetStepsDirection+0x9ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38b0:	6d 89       	ldd	r22, Y+21	; 0x15
    38b2:	7e 89       	ldd	r23, Y+22	; 0x16
    38b4:	8f 89       	ldd	r24, Y+23	; 0x17
    38b6:	98 8d       	ldd	r25, Y+24	; 0x18
    38b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38bc:	dc 01       	movw	r26, r24
    38be:	cb 01       	movw	r24, r22
    38c0:	9c 8b       	std	Y+20, r25	; 0x14
    38c2:	8b 8b       	std	Y+19, r24	; 0x13
    38c4:	8b 89       	ldd	r24, Y+19	; 0x13
    38c6:	9c 89       	ldd	r25, Y+20	; 0x14
    38c8:	98 8b       	std	Y+16, r25	; 0x10
    38ca:	8f 87       	std	Y+15, r24	; 0x0f
    38cc:	8f 85       	ldd	r24, Y+15	; 0x0f
    38ce:	98 89       	ldd	r25, Y+16	; 0x10
    38d0:	01 97       	sbiw	r24, 0x01	; 1
    38d2:	f1 f7       	brne	.-4      	; 0x38d0 <HStepper_SetStepsDirection+0x9a4>
    38d4:	98 8b       	std	Y+16, r25	; 0x10
    38d6:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(MAX_SPEED_DELAY);

				MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL1,PIN_LOW);
    38d8:	82 e0       	ldi	r24, 0x02	; 2
    38da:	63 e0       	ldi	r22, 0x03	; 3
    38dc:	40 e0       	ldi	r20, 0x00	; 0
    38de:	0e 94 62 10 	call	0x20c4	; 0x20c4 <MDIO_Errorstate_SetPinValue>
				MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL2,PIN_HIGH);
    38e2:	82 e0       	ldi	r24, 0x02	; 2
    38e4:	64 e0       	ldi	r22, 0x04	; 4
    38e6:	41 e0       	ldi	r20, 0x01	; 1
    38e8:	0e 94 62 10 	call	0x20c4	; 0x20c4 <MDIO_Errorstate_SetPinValue>
				MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL3,PIN_HIGH);
    38ec:	82 e0       	ldi	r24, 0x02	; 2
    38ee:	65 e0       	ldi	r22, 0x05	; 5
    38f0:	41 e0       	ldi	r20, 0x01	; 1
    38f2:	0e 94 62 10 	call	0x20c4	; 0x20c4 <MDIO_Errorstate_SetPinValue>
				MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL4,PIN_HIGH);
    38f6:	82 e0       	ldi	r24, 0x02	; 2
    38f8:	66 e0       	ldi	r22, 0x06	; 6
    38fa:	41 e0       	ldi	r20, 0x01	; 1
    38fc:	0e 94 62 10 	call	0x20c4	; 0x20c4 <MDIO_Errorstate_SetPinValue>
    3900:	80 e0       	ldi	r24, 0x00	; 0
    3902:	90 e0       	ldi	r25, 0x00	; 0
    3904:	a0 ee       	ldi	r26, 0xE0	; 224
    3906:	b0 e4       	ldi	r27, 0x40	; 64
    3908:	8b 87       	std	Y+11, r24	; 0x0b
    390a:	9c 87       	std	Y+12, r25	; 0x0c
    390c:	ad 87       	std	Y+13, r26	; 0x0d
    390e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3910:	6b 85       	ldd	r22, Y+11	; 0x0b
    3912:	7c 85       	ldd	r23, Y+12	; 0x0c
    3914:	8d 85       	ldd	r24, Y+13	; 0x0d
    3916:	9e 85       	ldd	r25, Y+14	; 0x0e
    3918:	20 e0       	ldi	r18, 0x00	; 0
    391a:	30 e0       	ldi	r19, 0x00	; 0
    391c:	4a e7       	ldi	r20, 0x7A	; 122
    391e:	55 e4       	ldi	r21, 0x45	; 69
    3920:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3924:	dc 01       	movw	r26, r24
    3926:	cb 01       	movw	r24, r22
    3928:	8f 83       	std	Y+7, r24	; 0x07
    392a:	98 87       	std	Y+8, r25	; 0x08
    392c:	a9 87       	std	Y+9, r26	; 0x09
    392e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3930:	6f 81       	ldd	r22, Y+7	; 0x07
    3932:	78 85       	ldd	r23, Y+8	; 0x08
    3934:	89 85       	ldd	r24, Y+9	; 0x09
    3936:	9a 85       	ldd	r25, Y+10	; 0x0a
    3938:	20 e0       	ldi	r18, 0x00	; 0
    393a:	30 e0       	ldi	r19, 0x00	; 0
    393c:	40 e8       	ldi	r20, 0x80	; 128
    393e:	5f e3       	ldi	r21, 0x3F	; 63
    3940:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3944:	88 23       	and	r24, r24
    3946:	2c f4       	brge	.+10     	; 0x3952 <HStepper_SetStepsDirection+0xa26>
		__ticks = 1;
    3948:	81 e0       	ldi	r24, 0x01	; 1
    394a:	90 e0       	ldi	r25, 0x00	; 0
    394c:	9e 83       	std	Y+6, r25	; 0x06
    394e:	8d 83       	std	Y+5, r24	; 0x05
    3950:	3f c0       	rjmp	.+126    	; 0x39d0 <HStepper_SetStepsDirection+0xaa4>
	else if (__tmp > 65535)
    3952:	6f 81       	ldd	r22, Y+7	; 0x07
    3954:	78 85       	ldd	r23, Y+8	; 0x08
    3956:	89 85       	ldd	r24, Y+9	; 0x09
    3958:	9a 85       	ldd	r25, Y+10	; 0x0a
    395a:	20 e0       	ldi	r18, 0x00	; 0
    395c:	3f ef       	ldi	r19, 0xFF	; 255
    395e:	4f e7       	ldi	r20, 0x7F	; 127
    3960:	57 e4       	ldi	r21, 0x47	; 71
    3962:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3966:	18 16       	cp	r1, r24
    3968:	4c f5       	brge	.+82     	; 0x39bc <HStepper_SetStepsDirection+0xa90>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    396a:	6b 85       	ldd	r22, Y+11	; 0x0b
    396c:	7c 85       	ldd	r23, Y+12	; 0x0c
    396e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3970:	9e 85       	ldd	r25, Y+14	; 0x0e
    3972:	20 e0       	ldi	r18, 0x00	; 0
    3974:	30 e0       	ldi	r19, 0x00	; 0
    3976:	40 e2       	ldi	r20, 0x20	; 32
    3978:	51 e4       	ldi	r21, 0x41	; 65
    397a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    397e:	dc 01       	movw	r26, r24
    3980:	cb 01       	movw	r24, r22
    3982:	bc 01       	movw	r22, r24
    3984:	cd 01       	movw	r24, r26
    3986:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    398a:	dc 01       	movw	r26, r24
    398c:	cb 01       	movw	r24, r22
    398e:	9e 83       	std	Y+6, r25	; 0x06
    3990:	8d 83       	std	Y+5, r24	; 0x05
    3992:	0f c0       	rjmp	.+30     	; 0x39b2 <HStepper_SetStepsDirection+0xa86>
    3994:	80 e9       	ldi	r24, 0x90	; 144
    3996:	91 e0       	ldi	r25, 0x01	; 1
    3998:	9c 83       	std	Y+4, r25	; 0x04
    399a:	8b 83       	std	Y+3, r24	; 0x03
    399c:	8b 81       	ldd	r24, Y+3	; 0x03
    399e:	9c 81       	ldd	r25, Y+4	; 0x04
    39a0:	01 97       	sbiw	r24, 0x01	; 1
    39a2:	f1 f7       	brne	.-4      	; 0x39a0 <HStepper_SetStepsDirection+0xa74>
    39a4:	9c 83       	std	Y+4, r25	; 0x04
    39a6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39a8:	8d 81       	ldd	r24, Y+5	; 0x05
    39aa:	9e 81       	ldd	r25, Y+6	; 0x06
    39ac:	01 97       	sbiw	r24, 0x01	; 1
    39ae:	9e 83       	std	Y+6, r25	; 0x06
    39b0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39b2:	8d 81       	ldd	r24, Y+5	; 0x05
    39b4:	9e 81       	ldd	r25, Y+6	; 0x06
    39b6:	00 97       	sbiw	r24, 0x00	; 0
    39b8:	69 f7       	brne	.-38     	; 0x3994 <HStepper_SetStepsDirection+0xa68>
    39ba:	14 c0       	rjmp	.+40     	; 0x39e4 <HStepper_SetStepsDirection+0xab8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39bc:	6f 81       	ldd	r22, Y+7	; 0x07
    39be:	78 85       	ldd	r23, Y+8	; 0x08
    39c0:	89 85       	ldd	r24, Y+9	; 0x09
    39c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    39c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39c8:	dc 01       	movw	r26, r24
    39ca:	cb 01       	movw	r24, r22
    39cc:	9e 83       	std	Y+6, r25	; 0x06
    39ce:	8d 83       	std	Y+5, r24	; 0x05
    39d0:	8d 81       	ldd	r24, Y+5	; 0x05
    39d2:	9e 81       	ldd	r25, Y+6	; 0x06
    39d4:	9a 83       	std	Y+2, r25	; 0x02
    39d6:	89 83       	std	Y+1, r24	; 0x01
    39d8:	89 81       	ldd	r24, Y+1	; 0x01
    39da:	9a 81       	ldd	r25, Y+2	; 0x02
    39dc:	01 97       	sbiw	r24, 0x01	; 1
    39de:	f1 f7       	brne	.-4      	; 0x39dc <HStepper_SetStepsDirection+0xab0>
    39e0:	9a 83       	std	Y+2, r25	; 0x02
    39e2:	89 83       	std	Y+1, r24	; 0x01
					}
			break;

                                        /* counter clock wise*/
		case CCW :
			for(uint16 i=0 ;i<copy_uint16Steps;i++)
    39e4:	de 01       	movw	r26, r28
    39e6:	af 58       	subi	r26, 0x8F	; 143
    39e8:	bf 4f       	sbci	r27, 0xFF	; 255
    39ea:	fe 01       	movw	r30, r28
    39ec:	ef 58       	subi	r30, 0x8F	; 143
    39ee:	ff 4f       	sbci	r31, 0xFF	; 255
    39f0:	80 81       	ld	r24, Z
    39f2:	91 81       	ldd	r25, Z+1	; 0x01
    39f4:	01 96       	adiw	r24, 0x01	; 1
    39f6:	8d 93       	st	X+, r24
    39f8:	9c 93       	st	X, r25
    39fa:	fe 01       	movw	r30, r28
    39fc:	ef 58       	subi	r30, 0x8F	; 143
    39fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3a00:	de 01       	movw	r26, r28
    3a02:	ab 58       	subi	r26, 0x8B	; 139
    3a04:	bf 4f       	sbci	r27, 0xFF	; 255
    3a06:	20 81       	ld	r18, Z
    3a08:	31 81       	ldd	r19, Z+1	; 0x01
    3a0a:	8d 91       	ld	r24, X+
    3a0c:	9c 91       	ld	r25, X
    3a0e:	11 97       	sbiw	r26, 0x01	; 1
    3a10:	28 17       	cp	r18, r24
    3a12:	39 07       	cpc	r19, r25
    3a14:	08 f4       	brcc	.+2      	; 0x3a18 <HStepper_SetStepsDirection+0xaec>
    3a16:	ce cd       	rjmp	.-1124   	; 0x35b4 <HStepper_SetStepsDirection+0x688>
				MDIO_Errorstate_SetPinValue(STEPPER_PORT,STEPPER_COIL4,PIN_HIGH);
				_delay_ms(MAX_SPEED_DELAY);
				}
			break;
		}
}
    3a18:	c7 58       	subi	r28, 0x87	; 135
    3a1a:	df 4f       	sbci	r29, 0xFF	; 255
    3a1c:	0f b6       	in	r0, 0x3f	; 63
    3a1e:	f8 94       	cli
    3a20:	de bf       	out	0x3e, r29	; 62
    3a22:	0f be       	out	0x3f, r0	; 63
    3a24:	cd bf       	out	0x3d, r28	; 61
    3a26:	cf 91       	pop	r28
    3a28:	df 91       	pop	r29
    3a2a:	1f 91       	pop	r17
    3a2c:	0f 91       	pop	r16
    3a2e:	08 95       	ret

00003a30 <HLED_Errorstate_Led_Init>:


/*******led initialize       ***********/

ErrorState HLED_Errorstate_Led_Init( LED_T* copy_LED_object)
{
    3a30:	df 93       	push	r29
    3a32:	cf 93       	push	r28
    3a34:	00 d0       	rcall	.+0      	; 0x3a36 <HLED_Errorstate_Led_Init+0x6>
    3a36:	0f 92       	push	r0
    3a38:	cd b7       	in	r28, 0x3d	; 61
    3a3a:	de b7       	in	r29, 0x3e	; 62
    3a3c:	9b 83       	std	Y+3, r25	; 0x03
    3a3e:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState Loc_ErrorState_Error_state=OK;
    3a40:	81 e0       	ldi	r24, 0x01	; 1
    3a42:	89 83       	std	Y+1, r24	; 0x01
	Loc_ErrorState_Error_state = MDIO_Errorstate_SetPinDirection(copy_LED_object->LedPort,copy_LED_object->LedPin,PIN_OUTPUT);
    3a44:	ea 81       	ldd	r30, Y+2	; 0x02
    3a46:	fb 81       	ldd	r31, Y+3	; 0x03
    3a48:	80 81       	ld	r24, Z
    3a4a:	ea 81       	ldd	r30, Y+2	; 0x02
    3a4c:	fb 81       	ldd	r31, Y+3	; 0x03
    3a4e:	91 81       	ldd	r25, Z+1	; 0x01
    3a50:	69 2f       	mov	r22, r25
    3a52:	41 e0       	ldi	r20, 0x01	; 1
    3a54:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <MDIO_Errorstate_SetPinDirection>
    3a58:	89 83       	std	Y+1, r24	; 0x01
		return Loc_ErrorState_Error_state;
    3a5a:	89 81       	ldd	r24, Y+1	; 0x01
}
    3a5c:	0f 90       	pop	r0
    3a5e:	0f 90       	pop	r0
    3a60:	0f 90       	pop	r0
    3a62:	cf 91       	pop	r28
    3a64:	df 91       	pop	r29
    3a66:	08 95       	ret

00003a68 <HLED_Errorstate_Led_On>:

/********* led on              ***********/
ErrorState HLED_Errorstate_Led_On(LED_T* copy_LED_object)
{
    3a68:	df 93       	push	r29
    3a6a:	cf 93       	push	r28
    3a6c:	00 d0       	rcall	.+0      	; 0x3a6e <HLED_Errorstate_Led_On+0x6>
    3a6e:	0f 92       	push	r0
    3a70:	cd b7       	in	r28, 0x3d	; 61
    3a72:	de b7       	in	r29, 0x3e	; 62
    3a74:	9b 83       	std	Y+3, r25	; 0x03
    3a76:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState Loc_ErrorState_Error_state=OK;
    3a78:	81 e0       	ldi	r24, 0x01	; 1
    3a7a:	89 83       	std	Y+1, r24	; 0x01

	if(copy_LED_object->LedActiveState==ACTIVE_HIGH)
    3a7c:	ea 81       	ldd	r30, Y+2	; 0x02
    3a7e:	fb 81       	ldd	r31, Y+3	; 0x03
    3a80:	82 81       	ldd	r24, Z+2	; 0x02
    3a82:	81 30       	cpi	r24, 0x01	; 1
    3a84:	59 f4       	brne	.+22     	; 0x3a9c <HLED_Errorstate_Led_On+0x34>
	{
		MDIO_Errorstate_SetPinValue(copy_LED_object->LedPort,copy_LED_object->LedPin,PIN_HIGH);
    3a86:	ea 81       	ldd	r30, Y+2	; 0x02
    3a88:	fb 81       	ldd	r31, Y+3	; 0x03
    3a8a:	80 81       	ld	r24, Z
    3a8c:	ea 81       	ldd	r30, Y+2	; 0x02
    3a8e:	fb 81       	ldd	r31, Y+3	; 0x03
    3a90:	91 81       	ldd	r25, Z+1	; 0x01
    3a92:	69 2f       	mov	r22, r25
    3a94:	41 e0       	ldi	r20, 0x01	; 1
    3a96:	0e 94 62 10 	call	0x20c4	; 0x20c4 <MDIO_Errorstate_SetPinValue>
    3a9a:	11 c0       	rjmp	.+34     	; 0x3abe <HLED_Errorstate_Led_On+0x56>
	}
	else if(copy_LED_object->LedActiveState==ACTIVE_LOW)
    3a9c:	ea 81       	ldd	r30, Y+2	; 0x02
    3a9e:	fb 81       	ldd	r31, Y+3	; 0x03
    3aa0:	82 81       	ldd	r24, Z+2	; 0x02
    3aa2:	88 23       	and	r24, r24
    3aa4:	59 f4       	brne	.+22     	; 0x3abc <HLED_Errorstate_Led_On+0x54>
	{
		MDIO_Errorstate_SetPinValue(copy_LED_object->LedPort,copy_LED_object->LedPin,PIN_LOW);
    3aa6:	ea 81       	ldd	r30, Y+2	; 0x02
    3aa8:	fb 81       	ldd	r31, Y+3	; 0x03
    3aaa:	80 81       	ld	r24, Z
    3aac:	ea 81       	ldd	r30, Y+2	; 0x02
    3aae:	fb 81       	ldd	r31, Y+3	; 0x03
    3ab0:	91 81       	ldd	r25, Z+1	; 0x01
    3ab2:	69 2f       	mov	r22, r25
    3ab4:	40 e0       	ldi	r20, 0x00	; 0
    3ab6:	0e 94 62 10 	call	0x20c4	; 0x20c4 <MDIO_Errorstate_SetPinValue>
    3aba:	01 c0       	rjmp	.+2      	; 0x3abe <HLED_Errorstate_Led_On+0x56>
	}
	else
	{
		Loc_ErrorState_Error_state=NOK;
    3abc:	19 82       	std	Y+1, r1	; 0x01
	}

	return Loc_ErrorState_Error_state;
    3abe:	89 81       	ldd	r24, Y+1	; 0x01
	}
    3ac0:	0f 90       	pop	r0
    3ac2:	0f 90       	pop	r0
    3ac4:	0f 90       	pop	r0
    3ac6:	cf 91       	pop	r28
    3ac8:	df 91       	pop	r29
    3aca:	08 95       	ret

00003acc <HLED_Errorstate_Led_Off>:

/***                        leed off                  ****/
	ErrorState HLED_Errorstate_Led_Off(LED_T* copy_LED_object)
	{
    3acc:	df 93       	push	r29
    3ace:	cf 93       	push	r28
    3ad0:	00 d0       	rcall	.+0      	; 0x3ad2 <HLED_Errorstate_Led_Off+0x6>
    3ad2:	0f 92       	push	r0
    3ad4:	cd b7       	in	r28, 0x3d	; 61
    3ad6:	de b7       	in	r29, 0x3e	; 62
    3ad8:	9b 83       	std	Y+3, r25	; 0x03
    3ada:	8a 83       	std	Y+2, r24	; 0x02
		ErrorState Loc_ErrorState_Error_state=OK;
    3adc:	81 e0       	ldi	r24, 0x01	; 1
    3ade:	89 83       	std	Y+1, r24	; 0x01

		if(copy_LED_object->LedActiveState==ACTIVE_HIGH)
    3ae0:	ea 81       	ldd	r30, Y+2	; 0x02
    3ae2:	fb 81       	ldd	r31, Y+3	; 0x03
    3ae4:	82 81       	ldd	r24, Z+2	; 0x02
    3ae6:	81 30       	cpi	r24, 0x01	; 1
    3ae8:	59 f4       	brne	.+22     	; 0x3b00 <HLED_Errorstate_Led_Off+0x34>
		{
			MDIO_Errorstate_SetPinValue(copy_LED_object->LedPort,copy_LED_object->LedPin,PIN_LOW);
    3aea:	ea 81       	ldd	r30, Y+2	; 0x02
    3aec:	fb 81       	ldd	r31, Y+3	; 0x03
    3aee:	80 81       	ld	r24, Z
    3af0:	ea 81       	ldd	r30, Y+2	; 0x02
    3af2:	fb 81       	ldd	r31, Y+3	; 0x03
    3af4:	91 81       	ldd	r25, Z+1	; 0x01
    3af6:	69 2f       	mov	r22, r25
    3af8:	40 e0       	ldi	r20, 0x00	; 0
    3afa:	0e 94 62 10 	call	0x20c4	; 0x20c4 <MDIO_Errorstate_SetPinValue>
    3afe:	11 c0       	rjmp	.+34     	; 0x3b22 <HLED_Errorstate_Led_Off+0x56>
		}
		else if(copy_LED_object->LedActiveState==ACTIVE_LOW)
    3b00:	ea 81       	ldd	r30, Y+2	; 0x02
    3b02:	fb 81       	ldd	r31, Y+3	; 0x03
    3b04:	82 81       	ldd	r24, Z+2	; 0x02
    3b06:	88 23       	and	r24, r24
    3b08:	59 f4       	brne	.+22     	; 0x3b20 <HLED_Errorstate_Led_Off+0x54>
		{
			MDIO_Errorstate_SetPinValue(copy_LED_object->LedPort,copy_LED_object->LedPin,PIN_HIGH);
    3b0a:	ea 81       	ldd	r30, Y+2	; 0x02
    3b0c:	fb 81       	ldd	r31, Y+3	; 0x03
    3b0e:	80 81       	ld	r24, Z
    3b10:	ea 81       	ldd	r30, Y+2	; 0x02
    3b12:	fb 81       	ldd	r31, Y+3	; 0x03
    3b14:	91 81       	ldd	r25, Z+1	; 0x01
    3b16:	69 2f       	mov	r22, r25
    3b18:	41 e0       	ldi	r20, 0x01	; 1
    3b1a:	0e 94 62 10 	call	0x20c4	; 0x20c4 <MDIO_Errorstate_SetPinValue>
    3b1e:	01 c0       	rjmp	.+2      	; 0x3b22 <HLED_Errorstate_Led_Off+0x56>
		}
		else
		{
			Loc_ErrorState_Error_state=NOK;
    3b20:	19 82       	std	Y+1, r1	; 0x01
		}

		return Loc_ErrorState_Error_state;
    3b22:	89 81       	ldd	r24, Y+1	; 0x01
		}
    3b24:	0f 90       	pop	r0
    3b26:	0f 90       	pop	r0
    3b28:	0f 90       	pop	r0
    3b2a:	cf 91       	pop	r28
    3b2c:	df 91       	pop	r29
    3b2e:	08 95       	ret

00003b30 <HLED_Errorstate_Led_Toggle>:

	ErrorState HLED_Errorstate_Led_Toggle(LED_T* copy_LED_object)
	{
    3b30:	df 93       	push	r29
    3b32:	cf 93       	push	r28
    3b34:	00 d0       	rcall	.+0      	; 0x3b36 <HLED_Errorstate_Led_Toggle+0x6>
    3b36:	0f 92       	push	r0
    3b38:	cd b7       	in	r28, 0x3d	; 61
    3b3a:	de b7       	in	r29, 0x3e	; 62
    3b3c:	9b 83       	std	Y+3, r25	; 0x03
    3b3e:	8a 83       	std	Y+2, r24	; 0x02
		static uint8 flag=0; // imp
		ErrorState Loc_ErrorState_Error_state=OK;
    3b40:	81 e0       	ldi	r24, 0x01	; 1
    3b42:	89 83       	std	Y+1, r24	; 0x01
		if(flag==0)
    3b44:	80 91 90 00 	lds	r24, 0x0090
    3b48:	88 23       	and	r24, r24
    3b4a:	71 f4       	brne	.+28     	; 0x3b68 <HLED_Errorstate_Led_Toggle+0x38>
		{
			MDIO_Errorstate_SetPinValue(copy_LED_object->LedPort,copy_LED_object->LedPin,PIN_HIGH);
    3b4c:	ea 81       	ldd	r30, Y+2	; 0x02
    3b4e:	fb 81       	ldd	r31, Y+3	; 0x03
    3b50:	80 81       	ld	r24, Z
    3b52:	ea 81       	ldd	r30, Y+2	; 0x02
    3b54:	fb 81       	ldd	r31, Y+3	; 0x03
    3b56:	91 81       	ldd	r25, Z+1	; 0x01
    3b58:	69 2f       	mov	r22, r25
    3b5a:	41 e0       	ldi	r20, 0x01	; 1
    3b5c:	0e 94 62 10 	call	0x20c4	; 0x20c4 <MDIO_Errorstate_SetPinValue>
			flag=1;
    3b60:	81 e0       	ldi	r24, 0x01	; 1
    3b62:	80 93 90 00 	sts	0x0090, r24
    3b66:	10 c0       	rjmp	.+32     	; 0x3b88 <HLED_Errorstate_Led_Toggle+0x58>
		}
		else if(flag==1)
    3b68:	80 91 90 00 	lds	r24, 0x0090
    3b6c:	81 30       	cpi	r24, 0x01	; 1
    3b6e:	61 f4       	brne	.+24     	; 0x3b88 <HLED_Errorstate_Led_Toggle+0x58>
		{

			MDIO_Errorstate_SetPinValue(copy_LED_object->LedPort,copy_LED_object->LedPin,PIN_LOW);
    3b70:	ea 81       	ldd	r30, Y+2	; 0x02
    3b72:	fb 81       	ldd	r31, Y+3	; 0x03
    3b74:	80 81       	ld	r24, Z
    3b76:	ea 81       	ldd	r30, Y+2	; 0x02
    3b78:	fb 81       	ldd	r31, Y+3	; 0x03
    3b7a:	91 81       	ldd	r25, Z+1	; 0x01
    3b7c:	69 2f       	mov	r22, r25
    3b7e:	40 e0       	ldi	r20, 0x00	; 0
    3b80:	0e 94 62 10 	call	0x20c4	; 0x20c4 <MDIO_Errorstate_SetPinValue>
			flag=0;
    3b84:	10 92 90 00 	sts	0x0090, r1
		}
		else
		{
			/*do nothing*/
		}
		return Loc_ErrorState_Error_state;
    3b88:	89 81       	ldd	r24, Y+1	; 0x01
	}
    3b8a:	0f 90       	pop	r0
    3b8c:	0f 90       	pop	r0
    3b8e:	0f 90       	pop	r0
    3b90:	cf 91       	pop	r28
    3b92:	df 91       	pop	r29
    3b94:	08 95       	ret

00003b96 <HKPD_VidInit>:
				'D'
		}
};
/* keypad init */
void HKPD_VidInit(void)
{
    3b96:	df 93       	push	r29
    3b98:	cf 93       	push	r28
    3b9a:	cd b7       	in	r28, 0x3d	; 61
    3b9c:	de b7       	in	r29, 0x3e	; 62
	/*Set Row PINS AS AN inPUT*/
	MDIO_Errorstate_SetPinDirection(HKPD_ROWPORT,HKPD_ROWPIN0,PIN_INPUT);
    3b9e:	80 e0       	ldi	r24, 0x00	; 0
    3ba0:	60 e0       	ldi	r22, 0x00	; 0
    3ba2:	40 e0       	ldi	r20, 0x00	; 0
    3ba4:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <MDIO_Errorstate_SetPinDirection>
	MDIO_Errorstate_SetPinDirection(HKPD_ROWPORT,HKPD_ROWPIN1,PIN_INPUT);
    3ba8:	80 e0       	ldi	r24, 0x00	; 0
    3baa:	61 e0       	ldi	r22, 0x01	; 1
    3bac:	40 e0       	ldi	r20, 0x00	; 0
    3bae:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <MDIO_Errorstate_SetPinDirection>
	MDIO_Errorstate_SetPinDirection(HKPD_ROWPORT,HKPD_ROWPIN2,PIN_INPUT);
    3bb2:	80 e0       	ldi	r24, 0x00	; 0
    3bb4:	62 e0       	ldi	r22, 0x02	; 2
    3bb6:	40 e0       	ldi	r20, 0x00	; 0
    3bb8:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <MDIO_Errorstate_SetPinDirection>
	MDIO_Errorstate_SetPinDirection(HKPD_ROWPORT,HKPD_ROWPIN3,PIN_INPUT);
    3bbc:	80 e0       	ldi	r24, 0x00	; 0
    3bbe:	63 e0       	ldi	r22, 0x03	; 3
    3bc0:	40 e0       	ldi	r20, 0x00	; 0
    3bc2:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <MDIO_Errorstate_SetPinDirection>

	/*Active internal  PULL UP RESISTOR for Row PINS*/
	MDIO_Errorstate_SetPinValue(HKPD_ROWPORT,HKPD_ROWPIN0,PIN_HIGH);
    3bc6:	80 e0       	ldi	r24, 0x00	; 0
    3bc8:	60 e0       	ldi	r22, 0x00	; 0
    3bca:	41 e0       	ldi	r20, 0x01	; 1
    3bcc:	0e 94 62 10 	call	0x20c4	; 0x20c4 <MDIO_Errorstate_SetPinValue>
	MDIO_Errorstate_SetPinValue(HKPD_ROWPORT,HKPD_ROWPIN1,PIN_HIGH);
    3bd0:	80 e0       	ldi	r24, 0x00	; 0
    3bd2:	61 e0       	ldi	r22, 0x01	; 1
    3bd4:	41 e0       	ldi	r20, 0x01	; 1
    3bd6:	0e 94 62 10 	call	0x20c4	; 0x20c4 <MDIO_Errorstate_SetPinValue>
	MDIO_Errorstate_SetPinValue(HKPD_ROWPORT,HKPD_ROWPIN2,PIN_HIGH);
    3bda:	80 e0       	ldi	r24, 0x00	; 0
    3bdc:	62 e0       	ldi	r22, 0x02	; 2
    3bde:	41 e0       	ldi	r20, 0x01	; 1
    3be0:	0e 94 62 10 	call	0x20c4	; 0x20c4 <MDIO_Errorstate_SetPinValue>
	MDIO_Errorstate_SetPinValue(HKPD_ROWPORT,HKPD_ROWPIN3,PIN_HIGH);
    3be4:	80 e0       	ldi	r24, 0x00	; 0
    3be6:	63 e0       	ldi	r22, 0x03	; 3
    3be8:	41 e0       	ldi	r20, 0x01	; 1
    3bea:	0e 94 62 10 	call	0x20c4	; 0x20c4 <MDIO_Errorstate_SetPinValue>

	/*Set COLOUM PINS AS AN OUTPUTS*/
	MDIO_Errorstate_SetPinDirection(HKPD_COLPORT,HKPD_COLPIN0,PIN_OUTPUT);
    3bee:	81 e0       	ldi	r24, 0x01	; 1
    3bf0:	64 e0       	ldi	r22, 0x04	; 4
    3bf2:	41 e0       	ldi	r20, 0x01	; 1
    3bf4:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <MDIO_Errorstate_SetPinDirection>
	MDIO_Errorstate_SetPinDirection(HKPD_COLPORT,HKPD_COLPIN1,PIN_OUTPUT);
    3bf8:	81 e0       	ldi	r24, 0x01	; 1
    3bfa:	65 e0       	ldi	r22, 0x05	; 5
    3bfc:	41 e0       	ldi	r20, 0x01	; 1
    3bfe:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <MDIO_Errorstate_SetPinDirection>
	MDIO_Errorstate_SetPinDirection(HKPD_COLPORT,HKPD_COLPIN2,PIN_OUTPUT);
    3c02:	81 e0       	ldi	r24, 0x01	; 1
    3c04:	66 e0       	ldi	r22, 0x06	; 6
    3c06:	41 e0       	ldi	r20, 0x01	; 1
    3c08:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <MDIO_Errorstate_SetPinDirection>
	MDIO_Errorstate_SetPinDirection(HKPD_COLPORT,HKPD_COLPIN3,PIN_OUTPUT);
    3c0c:	81 e0       	ldi	r24, 0x01	; 1
    3c0e:	67 e0       	ldi	r22, 0x07	; 7
    3c10:	41 e0       	ldi	r20, 0x01	; 1
    3c12:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <MDIO_Errorstate_SetPinDirection>

	/* Set COLOUM PINS initial value --> one*/
	MDIO_Errorstate_SetPinValue(HKPD_COLPORT,HKPD_COLPIN0,PIN_HIGH);
    3c16:	81 e0       	ldi	r24, 0x01	; 1
    3c18:	64 e0       	ldi	r22, 0x04	; 4
    3c1a:	41 e0       	ldi	r20, 0x01	; 1
    3c1c:	0e 94 62 10 	call	0x20c4	; 0x20c4 <MDIO_Errorstate_SetPinValue>
	MDIO_Errorstate_SetPinValue(HKPD_COLPORT,HKPD_COLPIN1,PIN_HIGH);
    3c20:	81 e0       	ldi	r24, 0x01	; 1
    3c22:	65 e0       	ldi	r22, 0x05	; 5
    3c24:	41 e0       	ldi	r20, 0x01	; 1
    3c26:	0e 94 62 10 	call	0x20c4	; 0x20c4 <MDIO_Errorstate_SetPinValue>
	MDIO_Errorstate_SetPinValue(HKPD_COLPORT,HKPD_COLPIN2,PIN_HIGH);
    3c2a:	81 e0       	ldi	r24, 0x01	; 1
    3c2c:	66 e0       	ldi	r22, 0x06	; 6
    3c2e:	41 e0       	ldi	r20, 0x01	; 1
    3c30:	0e 94 62 10 	call	0x20c4	; 0x20c4 <MDIO_Errorstate_SetPinValue>
	MDIO_Errorstate_SetPinValue(HKPD_COLPORT,HKPD_COLPIN3,PIN_HIGH);
    3c34:	81 e0       	ldi	r24, 0x01	; 1
    3c36:	67 e0       	ldi	r22, 0x07	; 7
    3c38:	41 e0       	ldi	r20, 0x01	; 1
    3c3a:	0e 94 62 10 	call	0x20c4	; 0x20c4 <MDIO_Errorstate_SetPinValue>
}
    3c3e:	cf 91       	pop	r28
    3c40:	df 91       	pop	r29
    3c42:	08 95       	ret

00003c44 <HKPD_uint8GetPressed>:

  /* keypad pressed */

uint8 HKPD_uint8GetPressed(void)
{
    3c44:	df 93       	push	r29
    3c46:	cf 93       	push	r28
    3c48:	cd b7       	in	r28, 0x3d	; 61
    3c4a:	de b7       	in	r29, 0x3e	; 62
    3c4c:	62 97       	sbiw	r28, 0x12	; 18
    3c4e:	0f b6       	in	r0, 0x3f	; 63
    3c50:	f8 94       	cli
    3c52:	de bf       	out	0x3e, r29	; 62
    3c54:	0f be       	out	0x3f, r0	; 63
    3c56:	cd bf       	out	0x3d, r28	; 61
	uint8 Loc_uint8ColCount=0;
    3c58:	19 8a       	std	Y+17, r1	; 0x11
	uint8 Loc_uint8RowCount=0;
    3c5a:	18 8a       	std	Y+16, r1	; 0x10
	uint8 Loc_uint8KeyState;
	uint8 Loc_uint8KeyValue=HKPD_NOTPRESSED;
    3c5c:	8f ef       	ldi	r24, 0xFF	; 255
    3c5e:	8f 87       	std	Y+15, r24	; 0x0f

	for(Loc_uint8ColCount=HKPD_COLINIT ; Loc_uint8ColCount<HKPD_COLEND; Loc_uint8ColCount++)
    3c60:	84 e0       	ldi	r24, 0x04	; 4
    3c62:	89 8b       	std	Y+17, r24	; 0x11
    3c64:	b4 c0       	rjmp	.+360    	; 0x3dce <HKPD_uint8GetPressed+0x18a>
	{
		/*Select COLOUM*/

		MDIO_Errorstate_SetPinValue(HKPD_COLPORT,Loc_uint8ColCount,PIN_LOW);
    3c66:	81 e0       	ldi	r24, 0x01	; 1
    3c68:	69 89       	ldd	r22, Y+17	; 0x11
    3c6a:	40 e0       	ldi	r20, 0x00	; 0
    3c6c:	0e 94 62 10 	call	0x20c4	; 0x20c4 <MDIO_Errorstate_SetPinValue>

		/*select row*/

		for(Loc_uint8RowCount=HKPD_ROWINIT;Loc_uint8RowCount<HKPD_ROWEND;Loc_uint8RowCount++)
    3c70:	18 8a       	std	Y+16, r1	; 0x10
    3c72:	a1 c0       	rjmp	.+322    	; 0x3db6 <HKPD_uint8GetPressed+0x172>
		{
			MDIO_Errorstate_GetPinValue(HKPD_ROWPORT,Loc_uint8RowCount,&Loc_uint8KeyState);
    3c74:	9e 01       	movw	r18, r28
    3c76:	2e 5e       	subi	r18, 0xEE	; 238
    3c78:	3f 4f       	sbci	r19, 0xFF	; 255
    3c7a:	80 e0       	ldi	r24, 0x00	; 0
    3c7c:	68 89       	ldd	r22, Y+16	; 0x10
    3c7e:	a9 01       	movw	r20, r18
    3c80:	0e 94 71 11 	call	0x22e2	; 0x22e2 <MDIO_Errorstate_GetPinValue>

			if(Loc_uint8KeyState==0)
    3c84:	8a 89       	ldd	r24, Y+18	; 0x12
    3c86:	88 23       	and	r24, r24
    3c88:	a9 f4       	brne	.+42     	; 0x3cb4 <HKPD_uint8GetPressed+0x70>
			{
				Loc_uint8KeyValue=KPD_uint8Values[Loc_uint8ColCount-HKPD_COLINIT][Loc_uint8RowCount-HKPD_ROWINIT];
    3c8a:	89 89       	ldd	r24, Y+17	; 0x11
    3c8c:	88 2f       	mov	r24, r24
    3c8e:	90 e0       	ldi	r25, 0x00	; 0
    3c90:	ac 01       	movw	r20, r24
    3c92:	44 50       	subi	r20, 0x04	; 4
    3c94:	50 40       	sbci	r21, 0x00	; 0
    3c96:	88 89       	ldd	r24, Y+16	; 0x10
    3c98:	28 2f       	mov	r18, r24
    3c9a:	30 e0       	ldi	r19, 0x00	; 0
    3c9c:	ca 01       	movw	r24, r20
    3c9e:	88 0f       	add	r24, r24
    3ca0:	99 1f       	adc	r25, r25
    3ca2:	88 0f       	add	r24, r24
    3ca4:	99 1f       	adc	r25, r25
    3ca6:	82 0f       	add	r24, r18
    3ca8:	93 1f       	adc	r25, r19
    3caa:	fc 01       	movw	r30, r24
    3cac:	ef 58       	subi	r30, 0x8F	; 143
    3cae:	ff 4f       	sbci	r31, 0xFF	; 255
    3cb0:	80 81       	ld	r24, Z
    3cb2:	8f 87       	std	Y+15, r24	; 0x0f
    3cb4:	80 e0       	ldi	r24, 0x00	; 0
    3cb6:	90 e0       	ldi	r25, 0x00	; 0
    3cb8:	a0 ea       	ldi	r26, 0xA0	; 160
    3cba:	b1 e4       	ldi	r27, 0x41	; 65
    3cbc:	8b 87       	std	Y+11, r24	; 0x0b
    3cbe:	9c 87       	std	Y+12, r25	; 0x0c
    3cc0:	ad 87       	std	Y+13, r26	; 0x0d
    3cc2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3cc4:	6b 85       	ldd	r22, Y+11	; 0x0b
    3cc6:	7c 85       	ldd	r23, Y+12	; 0x0c
    3cc8:	8d 85       	ldd	r24, Y+13	; 0x0d
    3cca:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ccc:	20 e0       	ldi	r18, 0x00	; 0
    3cce:	30 e0       	ldi	r19, 0x00	; 0
    3cd0:	4a e7       	ldi	r20, 0x7A	; 122
    3cd2:	55 e4       	ldi	r21, 0x45	; 69
    3cd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cd8:	dc 01       	movw	r26, r24
    3cda:	cb 01       	movw	r24, r22
    3cdc:	8f 83       	std	Y+7, r24	; 0x07
    3cde:	98 87       	std	Y+8, r25	; 0x08
    3ce0:	a9 87       	std	Y+9, r26	; 0x09
    3ce2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3ce4:	6f 81       	ldd	r22, Y+7	; 0x07
    3ce6:	78 85       	ldd	r23, Y+8	; 0x08
    3ce8:	89 85       	ldd	r24, Y+9	; 0x09
    3cea:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cec:	20 e0       	ldi	r18, 0x00	; 0
    3cee:	30 e0       	ldi	r19, 0x00	; 0
    3cf0:	40 e8       	ldi	r20, 0x80	; 128
    3cf2:	5f e3       	ldi	r21, 0x3F	; 63
    3cf4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3cf8:	88 23       	and	r24, r24
    3cfa:	2c f4       	brge	.+10     	; 0x3d06 <HKPD_uint8GetPressed+0xc2>
		__ticks = 1;
    3cfc:	81 e0       	ldi	r24, 0x01	; 1
    3cfe:	90 e0       	ldi	r25, 0x00	; 0
    3d00:	9e 83       	std	Y+6, r25	; 0x06
    3d02:	8d 83       	std	Y+5, r24	; 0x05
    3d04:	3f c0       	rjmp	.+126    	; 0x3d84 <HKPD_uint8GetPressed+0x140>
	else if (__tmp > 65535)
    3d06:	6f 81       	ldd	r22, Y+7	; 0x07
    3d08:	78 85       	ldd	r23, Y+8	; 0x08
    3d0a:	89 85       	ldd	r24, Y+9	; 0x09
    3d0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d0e:	20 e0       	ldi	r18, 0x00	; 0
    3d10:	3f ef       	ldi	r19, 0xFF	; 255
    3d12:	4f e7       	ldi	r20, 0x7F	; 127
    3d14:	57 e4       	ldi	r21, 0x47	; 71
    3d16:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d1a:	18 16       	cp	r1, r24
    3d1c:	4c f5       	brge	.+82     	; 0x3d70 <HKPD_uint8GetPressed+0x12c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d1e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d20:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d22:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d24:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d26:	20 e0       	ldi	r18, 0x00	; 0
    3d28:	30 e0       	ldi	r19, 0x00	; 0
    3d2a:	40 e2       	ldi	r20, 0x20	; 32
    3d2c:	51 e4       	ldi	r21, 0x41	; 65
    3d2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d32:	dc 01       	movw	r26, r24
    3d34:	cb 01       	movw	r24, r22
    3d36:	bc 01       	movw	r22, r24
    3d38:	cd 01       	movw	r24, r26
    3d3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d3e:	dc 01       	movw	r26, r24
    3d40:	cb 01       	movw	r24, r22
    3d42:	9e 83       	std	Y+6, r25	; 0x06
    3d44:	8d 83       	std	Y+5, r24	; 0x05
    3d46:	0f c0       	rjmp	.+30     	; 0x3d66 <HKPD_uint8GetPressed+0x122>
    3d48:	80 e9       	ldi	r24, 0x90	; 144
    3d4a:	91 e0       	ldi	r25, 0x01	; 1
    3d4c:	9c 83       	std	Y+4, r25	; 0x04
    3d4e:	8b 83       	std	Y+3, r24	; 0x03
    3d50:	8b 81       	ldd	r24, Y+3	; 0x03
    3d52:	9c 81       	ldd	r25, Y+4	; 0x04
    3d54:	01 97       	sbiw	r24, 0x01	; 1
    3d56:	f1 f7       	brne	.-4      	; 0x3d54 <HKPD_uint8GetPressed+0x110>
    3d58:	9c 83       	std	Y+4, r25	; 0x04
    3d5a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d5c:	8d 81       	ldd	r24, Y+5	; 0x05
    3d5e:	9e 81       	ldd	r25, Y+6	; 0x06
    3d60:	01 97       	sbiw	r24, 0x01	; 1
    3d62:	9e 83       	std	Y+6, r25	; 0x06
    3d64:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d66:	8d 81       	ldd	r24, Y+5	; 0x05
    3d68:	9e 81       	ldd	r25, Y+6	; 0x06
    3d6a:	00 97       	sbiw	r24, 0x00	; 0
    3d6c:	69 f7       	brne	.-38     	; 0x3d48 <HKPD_uint8GetPressed+0x104>
    3d6e:	1d c0       	rjmp	.+58     	; 0x3daa <HKPD_uint8GetPressed+0x166>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d70:	6f 81       	ldd	r22, Y+7	; 0x07
    3d72:	78 85       	ldd	r23, Y+8	; 0x08
    3d74:	89 85       	ldd	r24, Y+9	; 0x09
    3d76:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d7c:	dc 01       	movw	r26, r24
    3d7e:	cb 01       	movw	r24, r22
    3d80:	9e 83       	std	Y+6, r25	; 0x06
    3d82:	8d 83       	std	Y+5, r24	; 0x05
    3d84:	8d 81       	ldd	r24, Y+5	; 0x05
    3d86:	9e 81       	ldd	r25, Y+6	; 0x06
    3d88:	9a 83       	std	Y+2, r25	; 0x02
    3d8a:	89 83       	std	Y+1, r24	; 0x01
    3d8c:	89 81       	ldd	r24, Y+1	; 0x01
    3d8e:	9a 81       	ldd	r25, Y+2	; 0x02
    3d90:	01 97       	sbiw	r24, 0x01	; 1
    3d92:	f1 f7       	brne	.-4      	; 0x3d90 <HKPD_uint8GetPressed+0x14c>
    3d94:	9a 83       	std	Y+2, r25	; 0x02
    3d96:	89 83       	std	Y+1, r24	; 0x01
    3d98:	08 c0       	rjmp	.+16     	; 0x3daa <HKPD_uint8GetPressed+0x166>
			_delay_ms(20);

			/*to do one press*/
			while(Loc_uint8KeyState==0)
			{
				MDIO_Errorstate_GetPinValue(HKPD_ROWPORT,Loc_uint8RowCount,&Loc_uint8KeyState);
    3d9a:	9e 01       	movw	r18, r28
    3d9c:	2e 5e       	subi	r18, 0xEE	; 238
    3d9e:	3f 4f       	sbci	r19, 0xFF	; 255
    3da0:	80 e0       	ldi	r24, 0x00	; 0
    3da2:	68 89       	ldd	r22, Y+16	; 0x10
    3da4:	a9 01       	movw	r20, r18
    3da6:	0e 94 71 11 	call	0x22e2	; 0x22e2 <MDIO_Errorstate_GetPinValue>

			/* DE_POuncing*/
			_delay_ms(20);

			/*to do one press*/
			while(Loc_uint8KeyState==0)
    3daa:	8a 89       	ldd	r24, Y+18	; 0x12
    3dac:	88 23       	and	r24, r24
    3dae:	a9 f3       	breq	.-22     	; 0x3d9a <HKPD_uint8GetPressed+0x156>

		MDIO_Errorstate_SetPinValue(HKPD_COLPORT,Loc_uint8ColCount,PIN_LOW);

		/*select row*/

		for(Loc_uint8RowCount=HKPD_ROWINIT;Loc_uint8RowCount<HKPD_ROWEND;Loc_uint8RowCount++)
    3db0:	88 89       	ldd	r24, Y+16	; 0x10
    3db2:	8f 5f       	subi	r24, 0xFF	; 255
    3db4:	88 8b       	std	Y+16, r24	; 0x10
    3db6:	88 89       	ldd	r24, Y+16	; 0x10
    3db8:	84 30       	cpi	r24, 0x04	; 4
    3dba:	08 f4       	brcc	.+2      	; 0x3dbe <HKPD_uint8GetPressed+0x17a>
    3dbc:	5b cf       	rjmp	.-330    	; 0x3c74 <HKPD_uint8GetPressed+0x30>
			}
		}

		/*DE_Activate for coloum*/

		MDIO_Errorstate_SetPinValue(HKPD_COLPORT,Loc_uint8ColCount,PIN_HIGH);
    3dbe:	81 e0       	ldi	r24, 0x01	; 1
    3dc0:	69 89       	ldd	r22, Y+17	; 0x11
    3dc2:	41 e0       	ldi	r20, 0x01	; 1
    3dc4:	0e 94 62 10 	call	0x20c4	; 0x20c4 <MDIO_Errorstate_SetPinValue>
	uint8 Loc_uint8ColCount=0;
	uint8 Loc_uint8RowCount=0;
	uint8 Loc_uint8KeyState;
	uint8 Loc_uint8KeyValue=HKPD_NOTPRESSED;

	for(Loc_uint8ColCount=HKPD_COLINIT ; Loc_uint8ColCount<HKPD_COLEND; Loc_uint8ColCount++)
    3dc8:	89 89       	ldd	r24, Y+17	; 0x11
    3dca:	8f 5f       	subi	r24, 0xFF	; 255
    3dcc:	89 8b       	std	Y+17, r24	; 0x11
    3dce:	89 89       	ldd	r24, Y+17	; 0x11
    3dd0:	88 30       	cpi	r24, 0x08	; 8
    3dd2:	08 f4       	brcc	.+2      	; 0x3dd6 <HKPD_uint8GetPressed+0x192>
    3dd4:	48 cf       	rjmp	.-368    	; 0x3c66 <HKPD_uint8GetPressed+0x22>

		/*DE_Activate for coloum*/

		MDIO_Errorstate_SetPinValue(HKPD_COLPORT,Loc_uint8ColCount,PIN_HIGH);
	}
	return Loc_uint8KeyValue;
    3dd6:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    3dd8:	62 96       	adiw	r28, 0x12	; 18
    3dda:	0f b6       	in	r0, 0x3f	; 63
    3ddc:	f8 94       	cli
    3dde:	de bf       	out	0x3e, r29	; 62
    3de0:	0f be       	out	0x3f, r0	; 63
    3de2:	cd bf       	out	0x3d, r28	; 61
    3de4:	cf 91       	pop	r28
    3de6:	df 91       	pop	r29
    3de8:	08 95       	ret

00003dea <HEEPROM_VidSendDataByte>:
#include<util/delay.h>

#include "HEEPROM_Private.h"

void HEEPROM_VidSendDataByte(uint8 copy_uint8PageNumber,uint8 copy_uint8LocationAddress, uint8 copy_uint8Data)
{
    3dea:	df 93       	push	r29
    3dec:	cf 93       	push	r28
    3dee:	cd b7       	in	r28, 0x3d	; 61
    3df0:	de b7       	in	r29, 0x3e	; 62
    3df2:	62 97       	sbiw	r28, 0x12	; 18
    3df4:	0f b6       	in	r0, 0x3f	; 63
    3df6:	f8 94       	cli
    3df8:	de bf       	out	0x3e, r29	; 62
    3dfa:	0f be       	out	0x3f, r0	; 63
    3dfc:	cd bf       	out	0x3d, r28	; 61
    3dfe:	88 8b       	std	Y+16, r24	; 0x10
    3e00:	69 8b       	std	Y+17, r22	; 0x11
    3e02:	4a 8b       	std	Y+18, r20	; 0x12
	/*Handle EEPROM Address*/
	uint8 Loc_uint8SlaveAddress;
	Loc_uint8SlaveAddress=EEPROM_FIXEDADDRESS|(copy_uint8PageNumber);
    3e04:	88 89       	ldd	r24, Y+16	; 0x10
    3e06:	80 65       	ori	r24, 0x50	; 80
    3e08:	8f 87       	std	Y+15, r24	; 0x0f
	/*send Start Condition*/
	MTWI_SendSatrtCondition();
    3e0a:	0e 94 fd 07 	call	0xffa	; 0xffa <MTWI_SendSatrtCondition>
	/*Send SlA(EEPROM Add +Page number) with write*/
	MTWI_SendSalveAddressWithWrite(Loc_uint8SlaveAddress);
    3e0e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3e10:	0e 94 51 08 	call	0x10a2	; 0x10a2 <MTWI_SendSalveAddressWithWrite>
	/*Send Location Addressd*/
	MTWI_MasterWriteDataByte(copy_uint8LocationAddress);
    3e14:	89 89       	ldd	r24, Y+17	; 0x11
    3e16:	0e 94 c1 08 	call	0x1182	; 0x1182 <MTWI_MasterWriteDataByte>
	/*Send Data*/
	MTWI_MasterWriteDataByte(copy_uint8Data);
    3e1a:	8a 89       	ldd	r24, Y+18	; 0x12
    3e1c:	0e 94 c1 08 	call	0x1182	; 0x1182 <MTWI_MasterWriteDataByte>
	/*Stop Condition*/
	MTWI_SendStopCondtion();
    3e20:	0e 94 19 09 	call	0x1232	; 0x1232 <MTWI_SendStopCondtion>
    3e24:	80 e0       	ldi	r24, 0x00	; 0
    3e26:	90 e0       	ldi	r25, 0x00	; 0
    3e28:	a0 e2       	ldi	r26, 0x20	; 32
    3e2a:	b1 e4       	ldi	r27, 0x41	; 65
    3e2c:	8b 87       	std	Y+11, r24	; 0x0b
    3e2e:	9c 87       	std	Y+12, r25	; 0x0c
    3e30:	ad 87       	std	Y+13, r26	; 0x0d
    3e32:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e34:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e36:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e38:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e3a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e3c:	20 e0       	ldi	r18, 0x00	; 0
    3e3e:	30 e0       	ldi	r19, 0x00	; 0
    3e40:	4a e7       	ldi	r20, 0x7A	; 122
    3e42:	55 e4       	ldi	r21, 0x45	; 69
    3e44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e48:	dc 01       	movw	r26, r24
    3e4a:	cb 01       	movw	r24, r22
    3e4c:	8f 83       	std	Y+7, r24	; 0x07
    3e4e:	98 87       	std	Y+8, r25	; 0x08
    3e50:	a9 87       	std	Y+9, r26	; 0x09
    3e52:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3e54:	6f 81       	ldd	r22, Y+7	; 0x07
    3e56:	78 85       	ldd	r23, Y+8	; 0x08
    3e58:	89 85       	ldd	r24, Y+9	; 0x09
    3e5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e5c:	20 e0       	ldi	r18, 0x00	; 0
    3e5e:	30 e0       	ldi	r19, 0x00	; 0
    3e60:	40 e8       	ldi	r20, 0x80	; 128
    3e62:	5f e3       	ldi	r21, 0x3F	; 63
    3e64:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3e68:	88 23       	and	r24, r24
    3e6a:	2c f4       	brge	.+10     	; 0x3e76 <HEEPROM_VidSendDataByte+0x8c>
		__ticks = 1;
    3e6c:	81 e0       	ldi	r24, 0x01	; 1
    3e6e:	90 e0       	ldi	r25, 0x00	; 0
    3e70:	9e 83       	std	Y+6, r25	; 0x06
    3e72:	8d 83       	std	Y+5, r24	; 0x05
    3e74:	3f c0       	rjmp	.+126    	; 0x3ef4 <HEEPROM_VidSendDataByte+0x10a>
	else if (__tmp > 65535)
    3e76:	6f 81       	ldd	r22, Y+7	; 0x07
    3e78:	78 85       	ldd	r23, Y+8	; 0x08
    3e7a:	89 85       	ldd	r24, Y+9	; 0x09
    3e7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e7e:	20 e0       	ldi	r18, 0x00	; 0
    3e80:	3f ef       	ldi	r19, 0xFF	; 255
    3e82:	4f e7       	ldi	r20, 0x7F	; 127
    3e84:	57 e4       	ldi	r21, 0x47	; 71
    3e86:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e8a:	18 16       	cp	r1, r24
    3e8c:	4c f5       	brge	.+82     	; 0x3ee0 <HEEPROM_VidSendDataByte+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e8e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e90:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e92:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e94:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e96:	20 e0       	ldi	r18, 0x00	; 0
    3e98:	30 e0       	ldi	r19, 0x00	; 0
    3e9a:	40 e2       	ldi	r20, 0x20	; 32
    3e9c:	51 e4       	ldi	r21, 0x41	; 65
    3e9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ea2:	dc 01       	movw	r26, r24
    3ea4:	cb 01       	movw	r24, r22
    3ea6:	bc 01       	movw	r22, r24
    3ea8:	cd 01       	movw	r24, r26
    3eaa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3eae:	dc 01       	movw	r26, r24
    3eb0:	cb 01       	movw	r24, r22
    3eb2:	9e 83       	std	Y+6, r25	; 0x06
    3eb4:	8d 83       	std	Y+5, r24	; 0x05
    3eb6:	0f c0       	rjmp	.+30     	; 0x3ed6 <HEEPROM_VidSendDataByte+0xec>
    3eb8:	80 e9       	ldi	r24, 0x90	; 144
    3eba:	91 e0       	ldi	r25, 0x01	; 1
    3ebc:	9c 83       	std	Y+4, r25	; 0x04
    3ebe:	8b 83       	std	Y+3, r24	; 0x03
    3ec0:	8b 81       	ldd	r24, Y+3	; 0x03
    3ec2:	9c 81       	ldd	r25, Y+4	; 0x04
    3ec4:	01 97       	sbiw	r24, 0x01	; 1
    3ec6:	f1 f7       	brne	.-4      	; 0x3ec4 <HEEPROM_VidSendDataByte+0xda>
    3ec8:	9c 83       	std	Y+4, r25	; 0x04
    3eca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ecc:	8d 81       	ldd	r24, Y+5	; 0x05
    3ece:	9e 81       	ldd	r25, Y+6	; 0x06
    3ed0:	01 97       	sbiw	r24, 0x01	; 1
    3ed2:	9e 83       	std	Y+6, r25	; 0x06
    3ed4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ed6:	8d 81       	ldd	r24, Y+5	; 0x05
    3ed8:	9e 81       	ldd	r25, Y+6	; 0x06
    3eda:	00 97       	sbiw	r24, 0x00	; 0
    3edc:	69 f7       	brne	.-38     	; 0x3eb8 <HEEPROM_VidSendDataByte+0xce>
    3ede:	14 c0       	rjmp	.+40     	; 0x3f08 <HEEPROM_VidSendDataByte+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ee0:	6f 81       	ldd	r22, Y+7	; 0x07
    3ee2:	78 85       	ldd	r23, Y+8	; 0x08
    3ee4:	89 85       	ldd	r24, Y+9	; 0x09
    3ee6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ee8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3eec:	dc 01       	movw	r26, r24
    3eee:	cb 01       	movw	r24, r22
    3ef0:	9e 83       	std	Y+6, r25	; 0x06
    3ef2:	8d 83       	std	Y+5, r24	; 0x05
    3ef4:	8d 81       	ldd	r24, Y+5	; 0x05
    3ef6:	9e 81       	ldd	r25, Y+6	; 0x06
    3ef8:	9a 83       	std	Y+2, r25	; 0x02
    3efa:	89 83       	std	Y+1, r24	; 0x01
    3efc:	89 81       	ldd	r24, Y+1	; 0x01
    3efe:	9a 81       	ldd	r25, Y+2	; 0x02
    3f00:	01 97       	sbiw	r24, 0x01	; 1
    3f02:	f1 f7       	brne	.-4      	; 0x3f00 <HEEPROM_VidSendDataByte+0x116>
    3f04:	9a 83       	std	Y+2, r25	; 0x02
    3f06:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10); // Data Sheet
}
    3f08:	62 96       	adiw	r28, 0x12	; 18
    3f0a:	0f b6       	in	r0, 0x3f	; 63
    3f0c:	f8 94       	cli
    3f0e:	de bf       	out	0x3e, r29	; 62
    3f10:	0f be       	out	0x3f, r0	; 63
    3f12:	cd bf       	out	0x3d, r28	; 61
    3f14:	cf 91       	pop	r28
    3f16:	df 91       	pop	r29
    3f18:	08 95       	ret

00003f1a <HEEPROM_VidReadDataByte>:

uint8 HEEPROM_VidReadDataByte(uint8 copy_uint8PageNumber,uint8 copy_uint8LocationAddress)
{
    3f1a:	df 93       	push	r29
    3f1c:	cf 93       	push	r28
    3f1e:	00 d0       	rcall	.+0      	; 0x3f20 <HEEPROM_VidReadDataByte+0x6>
    3f20:	00 d0       	rcall	.+0      	; 0x3f22 <HEEPROM_VidReadDataByte+0x8>
    3f22:	cd b7       	in	r28, 0x3d	; 61
    3f24:	de b7       	in	r29, 0x3e	; 62
    3f26:	8b 83       	std	Y+3, r24	; 0x03
    3f28:	6c 83       	std	Y+4, r22	; 0x04
	uint8 Loc_uint8Data;
	/*Handle EEPROM Address*/
	uint8 Loc_uint8SlaveAddress;
	Loc_uint8SlaveAddress=EEPROM_FIXEDADDRESS|(copy_uint8PageNumber);
    3f2a:	8b 81       	ldd	r24, Y+3	; 0x03
    3f2c:	80 65       	ori	r24, 0x50	; 80
    3f2e:	89 83       	std	Y+1, r24	; 0x01
	/*send Start Condition*/
	MTWI_SendSatrtCondition();
    3f30:	0e 94 fd 07 	call	0xffa	; 0xffa <MTWI_SendSatrtCondition>
	/*Send SlA(EEPROM Add +Page number) with write*/
	MTWI_SendSalveAddressWithWrite(Loc_uint8SlaveAddress);
    3f34:	89 81       	ldd	r24, Y+1	; 0x01
    3f36:	0e 94 51 08 	call	0x10a2	; 0x10a2 <MTWI_SendSalveAddressWithWrite>
	/*Send Location Address*/
	MTWI_MasterWriteDataByte(copy_uint8LocationAddress);
    3f3a:	8c 81       	ldd	r24, Y+4	; 0x04
    3f3c:	0e 94 c1 08 	call	0x1182	; 0x1182 <MTWI_MasterWriteDataByte>
	/*Send Repeated Start*/
	MTWI_SendSatrtRepeatedCondition();
    3f40:	0e 94 27 08 	call	0x104e	; 0x104e <MTWI_SendSatrtRepeatedCondition>
	/*Send SlA(EEPROM Add +Page number) with write*/
	MTWI_SendSalveAddressWithRead(Loc_uint8SlaveAddress);
    3f44:	89 81       	ldd	r24, Y+1	; 0x01
    3f46:	0e 94 89 08 	call	0x1112	; 0x1112 <MTWI_SendSalveAddressWithRead>
	/*Read Data*/
	MTWI_MasterReadDataByte(&Loc_uint8Data);
    3f4a:	ce 01       	movw	r24, r28
    3f4c:	02 96       	adiw	r24, 0x02	; 2
    3f4e:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <MTWI_MasterReadDataByte>
	/*Stop Condition*/
	MTWI_SendStopCondtion();
    3f52:	0e 94 19 09 	call	0x1232	; 0x1232 <MTWI_SendStopCondtion>

	return Loc_uint8Data;
    3f56:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3f58:	0f 90       	pop	r0
    3f5a:	0f 90       	pop	r0
    3f5c:	0f 90       	pop	r0
    3f5e:	0f 90       	pop	r0
    3f60:	cf 91       	pop	r28
    3f62:	df 91       	pop	r29
    3f64:	08 95       	ret

00003f66 <HAL_VidHCLCD_4BitModeWriteCommand>:
#include"HCLCD_Config.h"
#define F_CPU   16000000UL
#include"util/delay.h"

void HAL_VidHCLCD_4BitModeWriteCommand(uint8 Copy_uint8Command)
{
    3f66:	df 93       	push	r29
    3f68:	cf 93       	push	r28
    3f6a:	cd b7       	in	r28, 0x3d	; 61
    3f6c:	de b7       	in	r29, 0x3e	; 62
    3f6e:	2f 97       	sbiw	r28, 0x0f	; 15
    3f70:	0f b6       	in	r0, 0x3f	; 63
    3f72:	f8 94       	cli
    3f74:	de bf       	out	0x3e, r29	; 62
    3f76:	0f be       	out	0x3f, r0	; 63
    3f78:	cd bf       	out	0x3d, r28	; 61
    3f7a:	8f 87       	std	Y+15, r24	; 0x0f
	/*Select Command Register-->LOW*/
	MDIO_Errorstate_SetPinValue(HCLCD_ControlPort,RS_PIN,PIN_LOW);
    3f7c:	81 e0       	ldi	r24, 0x01	; 1
    3f7e:	61 e0       	ldi	r22, 0x01	; 1
    3f80:	40 e0       	ldi	r20, 0x00	; 0
    3f82:	0e 94 62 10 	call	0x20c4	; 0x20c4 <MDIO_Errorstate_SetPinValue>
	/*Select Write Mode*/
	MDIO_Errorstate_SetPinValue(HCLCD_ControlPort,RW_PIN,PIN_LOW);
    3f86:	81 e0       	ldi	r24, 0x01	; 1
    3f88:	62 e0       	ldi	r22, 0x02	; 2
    3f8a:	40 e0       	ldi	r20, 0x00	; 0
    3f8c:	0e 94 62 10 	call	0x20c4	; 0x20c4 <MDIO_Errorstate_SetPinValue>
	/*Send Command*/
	MDIO_Errorstate_Set4MostBits(HCLCD_DataPort,Copy_uint8Command);
    3f90:	80 e0       	ldi	r24, 0x00	; 0
    3f92:	6f 85       	ldd	r22, Y+15	; 0x0f
    3f94:	0e 94 9b 12 	call	0x2536	; 0x2536 <MDIO_Errorstate_Set4MostBits>
	/*LCD Enable*/
	MDIO_Errorstate_SetPinValue(HCLCD_ControlPort,E_PIN,PIN_HIGH);
    3f98:	81 e0       	ldi	r24, 0x01	; 1
    3f9a:	63 e0       	ldi	r22, 0x03	; 3
    3f9c:	41 e0       	ldi	r20, 0x01	; 1
    3f9e:	0e 94 62 10 	call	0x20c4	; 0x20c4 <MDIO_Errorstate_SetPinValue>
    3fa2:	80 e0       	ldi	r24, 0x00	; 0
    3fa4:	90 e0       	ldi	r25, 0x00	; 0
    3fa6:	a0 e0       	ldi	r26, 0x00	; 0
    3fa8:	b0 e4       	ldi	r27, 0x40	; 64
    3faa:	8b 87       	std	Y+11, r24	; 0x0b
    3fac:	9c 87       	std	Y+12, r25	; 0x0c
    3fae:	ad 87       	std	Y+13, r26	; 0x0d
    3fb0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3fb2:	6b 85       	ldd	r22, Y+11	; 0x0b
    3fb4:	7c 85       	ldd	r23, Y+12	; 0x0c
    3fb6:	8d 85       	ldd	r24, Y+13	; 0x0d
    3fb8:	9e 85       	ldd	r25, Y+14	; 0x0e
    3fba:	20 e0       	ldi	r18, 0x00	; 0
    3fbc:	30 e0       	ldi	r19, 0x00	; 0
    3fbe:	4a e7       	ldi	r20, 0x7A	; 122
    3fc0:	55 e4       	ldi	r21, 0x45	; 69
    3fc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fc6:	dc 01       	movw	r26, r24
    3fc8:	cb 01       	movw	r24, r22
    3fca:	8f 83       	std	Y+7, r24	; 0x07
    3fcc:	98 87       	std	Y+8, r25	; 0x08
    3fce:	a9 87       	std	Y+9, r26	; 0x09
    3fd0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3fd2:	6f 81       	ldd	r22, Y+7	; 0x07
    3fd4:	78 85       	ldd	r23, Y+8	; 0x08
    3fd6:	89 85       	ldd	r24, Y+9	; 0x09
    3fd8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3fda:	20 e0       	ldi	r18, 0x00	; 0
    3fdc:	30 e0       	ldi	r19, 0x00	; 0
    3fde:	40 e8       	ldi	r20, 0x80	; 128
    3fe0:	5f e3       	ldi	r21, 0x3F	; 63
    3fe2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3fe6:	88 23       	and	r24, r24
    3fe8:	2c f4       	brge	.+10     	; 0x3ff4 <HAL_VidHCLCD_4BitModeWriteCommand+0x8e>
		__ticks = 1;
    3fea:	81 e0       	ldi	r24, 0x01	; 1
    3fec:	90 e0       	ldi	r25, 0x00	; 0
    3fee:	9e 83       	std	Y+6, r25	; 0x06
    3ff0:	8d 83       	std	Y+5, r24	; 0x05
    3ff2:	3f c0       	rjmp	.+126    	; 0x4072 <HAL_VidHCLCD_4BitModeWriteCommand+0x10c>
	else if (__tmp > 65535)
    3ff4:	6f 81       	ldd	r22, Y+7	; 0x07
    3ff6:	78 85       	ldd	r23, Y+8	; 0x08
    3ff8:	89 85       	ldd	r24, Y+9	; 0x09
    3ffa:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ffc:	20 e0       	ldi	r18, 0x00	; 0
    3ffe:	3f ef       	ldi	r19, 0xFF	; 255
    4000:	4f e7       	ldi	r20, 0x7F	; 127
    4002:	57 e4       	ldi	r21, 0x47	; 71
    4004:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4008:	18 16       	cp	r1, r24
    400a:	4c f5       	brge	.+82     	; 0x405e <HAL_VidHCLCD_4BitModeWriteCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    400c:	6b 85       	ldd	r22, Y+11	; 0x0b
    400e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4010:	8d 85       	ldd	r24, Y+13	; 0x0d
    4012:	9e 85       	ldd	r25, Y+14	; 0x0e
    4014:	20 e0       	ldi	r18, 0x00	; 0
    4016:	30 e0       	ldi	r19, 0x00	; 0
    4018:	40 e2       	ldi	r20, 0x20	; 32
    401a:	51 e4       	ldi	r21, 0x41	; 65
    401c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4020:	dc 01       	movw	r26, r24
    4022:	cb 01       	movw	r24, r22
    4024:	bc 01       	movw	r22, r24
    4026:	cd 01       	movw	r24, r26
    4028:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    402c:	dc 01       	movw	r26, r24
    402e:	cb 01       	movw	r24, r22
    4030:	9e 83       	std	Y+6, r25	; 0x06
    4032:	8d 83       	std	Y+5, r24	; 0x05
    4034:	0f c0       	rjmp	.+30     	; 0x4054 <HAL_VidHCLCD_4BitModeWriteCommand+0xee>
    4036:	80 e9       	ldi	r24, 0x90	; 144
    4038:	91 e0       	ldi	r25, 0x01	; 1
    403a:	9c 83       	std	Y+4, r25	; 0x04
    403c:	8b 83       	std	Y+3, r24	; 0x03
    403e:	8b 81       	ldd	r24, Y+3	; 0x03
    4040:	9c 81       	ldd	r25, Y+4	; 0x04
    4042:	01 97       	sbiw	r24, 0x01	; 1
    4044:	f1 f7       	brne	.-4      	; 0x4042 <HAL_VidHCLCD_4BitModeWriteCommand+0xdc>
    4046:	9c 83       	std	Y+4, r25	; 0x04
    4048:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    404a:	8d 81       	ldd	r24, Y+5	; 0x05
    404c:	9e 81       	ldd	r25, Y+6	; 0x06
    404e:	01 97       	sbiw	r24, 0x01	; 1
    4050:	9e 83       	std	Y+6, r25	; 0x06
    4052:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4054:	8d 81       	ldd	r24, Y+5	; 0x05
    4056:	9e 81       	ldd	r25, Y+6	; 0x06
    4058:	00 97       	sbiw	r24, 0x00	; 0
    405a:	69 f7       	brne	.-38     	; 0x4036 <HAL_VidHCLCD_4BitModeWriteCommand+0xd0>
    405c:	14 c0       	rjmp	.+40     	; 0x4086 <HAL_VidHCLCD_4BitModeWriteCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    405e:	6f 81       	ldd	r22, Y+7	; 0x07
    4060:	78 85       	ldd	r23, Y+8	; 0x08
    4062:	89 85       	ldd	r24, Y+9	; 0x09
    4064:	9a 85       	ldd	r25, Y+10	; 0x0a
    4066:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    406a:	dc 01       	movw	r26, r24
    406c:	cb 01       	movw	r24, r22
    406e:	9e 83       	std	Y+6, r25	; 0x06
    4070:	8d 83       	std	Y+5, r24	; 0x05
    4072:	8d 81       	ldd	r24, Y+5	; 0x05
    4074:	9e 81       	ldd	r25, Y+6	; 0x06
    4076:	9a 83       	std	Y+2, r25	; 0x02
    4078:	89 83       	std	Y+1, r24	; 0x01
    407a:	89 81       	ldd	r24, Y+1	; 0x01
    407c:	9a 81       	ldd	r25, Y+2	; 0x02
    407e:	01 97       	sbiw	r24, 0x01	; 1
    4080:	f1 f7       	brne	.-4      	; 0x407e <HAL_VidHCLCD_4BitModeWriteCommand+0x118>
    4082:	9a 83       	std	Y+2, r25	; 0x02
    4084:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_Errorstate_SetPinValue(HCLCD_ControlPort,E_PIN,PIN_LOW);
    4086:	81 e0       	ldi	r24, 0x01	; 1
    4088:	63 e0       	ldi	r22, 0x03	; 3
    408a:	40 e0       	ldi	r20, 0x00	; 0
    408c:	0e 94 62 10 	call	0x20c4	; 0x20c4 <MDIO_Errorstate_SetPinValue>
}
    4090:	2f 96       	adiw	r28, 0x0f	; 15
    4092:	0f b6       	in	r0, 0x3f	; 63
    4094:	f8 94       	cli
    4096:	de bf       	out	0x3e, r29	; 62
    4098:	0f be       	out	0x3f, r0	; 63
    409a:	cd bf       	out	0x3d, r28	; 61
    409c:	cf 91       	pop	r28
    409e:	df 91       	pop	r29
    40a0:	08 95       	ret

000040a2 <HAL_VidHCLCD_4BitModeWriteChar>:
void HAL_VidHCLCD_4BitModeWriteChar(uint8 Copy_uint8Char)
{
    40a2:	df 93       	push	r29
    40a4:	cf 93       	push	r28
    40a6:	cd b7       	in	r28, 0x3d	; 61
    40a8:	de b7       	in	r29, 0x3e	; 62
    40aa:	6d 97       	sbiw	r28, 0x1d	; 29
    40ac:	0f b6       	in	r0, 0x3f	; 63
    40ae:	f8 94       	cli
    40b0:	de bf       	out	0x3e, r29	; 62
    40b2:	0f be       	out	0x3f, r0	; 63
    40b4:	cd bf       	out	0x3d, r28	; 61
    40b6:	8d 8f       	std	Y+29, r24	; 0x1d
	/*Select Data Register-->HIGH*/
	MDIO_Errorstate_SetPinValue(HCLCD_ControlPort,RS_PIN,PIN_HIGH);
    40b8:	81 e0       	ldi	r24, 0x01	; 1
    40ba:	61 e0       	ldi	r22, 0x01	; 1
    40bc:	41 e0       	ldi	r20, 0x01	; 1
    40be:	0e 94 62 10 	call	0x20c4	; 0x20c4 <MDIO_Errorstate_SetPinValue>
	/*Select Write Mode*/
	MDIO_Errorstate_SetPinValue(HCLCD_ControlPort,RW_PIN,PIN_LOW);
    40c2:	81 e0       	ldi	r24, 0x01	; 1
    40c4:	62 e0       	ldi	r22, 0x02	; 2
    40c6:	40 e0       	ldi	r20, 0x00	; 0
    40c8:	0e 94 62 10 	call	0x20c4	; 0x20c4 <MDIO_Errorstate_SetPinValue>
	/*Send 4 Most Bits of Data*/
	MDIO_Errorstate_Set4MostBits(HCLCD_DataPort,(Copy_uint8Char&0xF0));
    40cc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    40ce:	98 2f       	mov	r25, r24
    40d0:	90 7f       	andi	r25, 0xF0	; 240
    40d2:	80 e0       	ldi	r24, 0x00	; 0
    40d4:	69 2f       	mov	r22, r25
    40d6:	0e 94 9b 12 	call	0x2536	; 0x2536 <MDIO_Errorstate_Set4MostBits>
	/*LCD Enable*/
	MDIO_Errorstate_SetPinValue(HCLCD_ControlPort,E_PIN,PIN_HIGH);
    40da:	81 e0       	ldi	r24, 0x01	; 1
    40dc:	63 e0       	ldi	r22, 0x03	; 3
    40de:	41 e0       	ldi	r20, 0x01	; 1
    40e0:	0e 94 62 10 	call	0x20c4	; 0x20c4 <MDIO_Errorstate_SetPinValue>
    40e4:	80 e0       	ldi	r24, 0x00	; 0
    40e6:	90 e0       	ldi	r25, 0x00	; 0
    40e8:	a0 e0       	ldi	r26, 0x00	; 0
    40ea:	b0 e4       	ldi	r27, 0x40	; 64
    40ec:	89 8f       	std	Y+25, r24	; 0x19
    40ee:	9a 8f       	std	Y+26, r25	; 0x1a
    40f0:	ab 8f       	std	Y+27, r26	; 0x1b
    40f2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40f4:	69 8d       	ldd	r22, Y+25	; 0x19
    40f6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    40f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    40fa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    40fc:	20 e0       	ldi	r18, 0x00	; 0
    40fe:	30 e0       	ldi	r19, 0x00	; 0
    4100:	4a e7       	ldi	r20, 0x7A	; 122
    4102:	55 e4       	ldi	r21, 0x45	; 69
    4104:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4108:	dc 01       	movw	r26, r24
    410a:	cb 01       	movw	r24, r22
    410c:	8d 8b       	std	Y+21, r24	; 0x15
    410e:	9e 8b       	std	Y+22, r25	; 0x16
    4110:	af 8b       	std	Y+23, r26	; 0x17
    4112:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4114:	6d 89       	ldd	r22, Y+21	; 0x15
    4116:	7e 89       	ldd	r23, Y+22	; 0x16
    4118:	8f 89       	ldd	r24, Y+23	; 0x17
    411a:	98 8d       	ldd	r25, Y+24	; 0x18
    411c:	20 e0       	ldi	r18, 0x00	; 0
    411e:	30 e0       	ldi	r19, 0x00	; 0
    4120:	40 e8       	ldi	r20, 0x80	; 128
    4122:	5f e3       	ldi	r21, 0x3F	; 63
    4124:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4128:	88 23       	and	r24, r24
    412a:	2c f4       	brge	.+10     	; 0x4136 <HAL_VidHCLCD_4BitModeWriteChar+0x94>
		__ticks = 1;
    412c:	81 e0       	ldi	r24, 0x01	; 1
    412e:	90 e0       	ldi	r25, 0x00	; 0
    4130:	9c 8b       	std	Y+20, r25	; 0x14
    4132:	8b 8b       	std	Y+19, r24	; 0x13
    4134:	3f c0       	rjmp	.+126    	; 0x41b4 <HAL_VidHCLCD_4BitModeWriteChar+0x112>
	else if (__tmp > 65535)
    4136:	6d 89       	ldd	r22, Y+21	; 0x15
    4138:	7e 89       	ldd	r23, Y+22	; 0x16
    413a:	8f 89       	ldd	r24, Y+23	; 0x17
    413c:	98 8d       	ldd	r25, Y+24	; 0x18
    413e:	20 e0       	ldi	r18, 0x00	; 0
    4140:	3f ef       	ldi	r19, 0xFF	; 255
    4142:	4f e7       	ldi	r20, 0x7F	; 127
    4144:	57 e4       	ldi	r21, 0x47	; 71
    4146:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    414a:	18 16       	cp	r1, r24
    414c:	4c f5       	brge	.+82     	; 0x41a0 <HAL_VidHCLCD_4BitModeWriteChar+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    414e:	69 8d       	ldd	r22, Y+25	; 0x19
    4150:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4152:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4154:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4156:	20 e0       	ldi	r18, 0x00	; 0
    4158:	30 e0       	ldi	r19, 0x00	; 0
    415a:	40 e2       	ldi	r20, 0x20	; 32
    415c:	51 e4       	ldi	r21, 0x41	; 65
    415e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4162:	dc 01       	movw	r26, r24
    4164:	cb 01       	movw	r24, r22
    4166:	bc 01       	movw	r22, r24
    4168:	cd 01       	movw	r24, r26
    416a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    416e:	dc 01       	movw	r26, r24
    4170:	cb 01       	movw	r24, r22
    4172:	9c 8b       	std	Y+20, r25	; 0x14
    4174:	8b 8b       	std	Y+19, r24	; 0x13
    4176:	0f c0       	rjmp	.+30     	; 0x4196 <HAL_VidHCLCD_4BitModeWriteChar+0xf4>
    4178:	80 e9       	ldi	r24, 0x90	; 144
    417a:	91 e0       	ldi	r25, 0x01	; 1
    417c:	9a 8b       	std	Y+18, r25	; 0x12
    417e:	89 8b       	std	Y+17, r24	; 0x11
    4180:	89 89       	ldd	r24, Y+17	; 0x11
    4182:	9a 89       	ldd	r25, Y+18	; 0x12
    4184:	01 97       	sbiw	r24, 0x01	; 1
    4186:	f1 f7       	brne	.-4      	; 0x4184 <HAL_VidHCLCD_4BitModeWriteChar+0xe2>
    4188:	9a 8b       	std	Y+18, r25	; 0x12
    418a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    418c:	8b 89       	ldd	r24, Y+19	; 0x13
    418e:	9c 89       	ldd	r25, Y+20	; 0x14
    4190:	01 97       	sbiw	r24, 0x01	; 1
    4192:	9c 8b       	std	Y+20, r25	; 0x14
    4194:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4196:	8b 89       	ldd	r24, Y+19	; 0x13
    4198:	9c 89       	ldd	r25, Y+20	; 0x14
    419a:	00 97       	sbiw	r24, 0x00	; 0
    419c:	69 f7       	brne	.-38     	; 0x4178 <HAL_VidHCLCD_4BitModeWriteChar+0xd6>
    419e:	14 c0       	rjmp	.+40     	; 0x41c8 <HAL_VidHCLCD_4BitModeWriteChar+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41a0:	6d 89       	ldd	r22, Y+21	; 0x15
    41a2:	7e 89       	ldd	r23, Y+22	; 0x16
    41a4:	8f 89       	ldd	r24, Y+23	; 0x17
    41a6:	98 8d       	ldd	r25, Y+24	; 0x18
    41a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41ac:	dc 01       	movw	r26, r24
    41ae:	cb 01       	movw	r24, r22
    41b0:	9c 8b       	std	Y+20, r25	; 0x14
    41b2:	8b 8b       	std	Y+19, r24	; 0x13
    41b4:	8b 89       	ldd	r24, Y+19	; 0x13
    41b6:	9c 89       	ldd	r25, Y+20	; 0x14
    41b8:	98 8b       	std	Y+16, r25	; 0x10
    41ba:	8f 87       	std	Y+15, r24	; 0x0f
    41bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    41be:	98 89       	ldd	r25, Y+16	; 0x10
    41c0:	01 97       	sbiw	r24, 0x01	; 1
    41c2:	f1 f7       	brne	.-4      	; 0x41c0 <HAL_VidHCLCD_4BitModeWriteChar+0x11e>
    41c4:	98 8b       	std	Y+16, r25	; 0x10
    41c6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	MDIO_Errorstate_SetPinValue(HCLCD_ControlPort,E_PIN,PIN_LOW);
    41c8:	81 e0       	ldi	r24, 0x01	; 1
    41ca:	63 e0       	ldi	r22, 0x03	; 3
    41cc:	40 e0       	ldi	r20, 0x00	; 0
    41ce:	0e 94 62 10 	call	0x20c4	; 0x20c4 <MDIO_Errorstate_SetPinValue>
	/*Send 4 Least Bits of Data*/
	MDIO_Errorstate_Set4MostBits(HCLCD_DataPort,(Copy_uint8Char<<4));
    41d2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    41d4:	98 2f       	mov	r25, r24
    41d6:	92 95       	swap	r25
    41d8:	90 7f       	andi	r25, 0xF0	; 240
    41da:	80 e0       	ldi	r24, 0x00	; 0
    41dc:	69 2f       	mov	r22, r25
    41de:	0e 94 9b 12 	call	0x2536	; 0x2536 <MDIO_Errorstate_Set4MostBits>
	/*LCD Enable*/
	MDIO_Errorstate_SetPinValue(HCLCD_ControlPort,E_PIN,PIN_HIGH);
    41e2:	81 e0       	ldi	r24, 0x01	; 1
    41e4:	63 e0       	ldi	r22, 0x03	; 3
    41e6:	41 e0       	ldi	r20, 0x01	; 1
    41e8:	0e 94 62 10 	call	0x20c4	; 0x20c4 <MDIO_Errorstate_SetPinValue>
    41ec:	80 e0       	ldi	r24, 0x00	; 0
    41ee:	90 e0       	ldi	r25, 0x00	; 0
    41f0:	a0 e0       	ldi	r26, 0x00	; 0
    41f2:	b0 e4       	ldi	r27, 0x40	; 64
    41f4:	8b 87       	std	Y+11, r24	; 0x0b
    41f6:	9c 87       	std	Y+12, r25	; 0x0c
    41f8:	ad 87       	std	Y+13, r26	; 0x0d
    41fa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    41fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    41fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    4200:	8d 85       	ldd	r24, Y+13	; 0x0d
    4202:	9e 85       	ldd	r25, Y+14	; 0x0e
    4204:	20 e0       	ldi	r18, 0x00	; 0
    4206:	30 e0       	ldi	r19, 0x00	; 0
    4208:	4a e7       	ldi	r20, 0x7A	; 122
    420a:	55 e4       	ldi	r21, 0x45	; 69
    420c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4210:	dc 01       	movw	r26, r24
    4212:	cb 01       	movw	r24, r22
    4214:	8f 83       	std	Y+7, r24	; 0x07
    4216:	98 87       	std	Y+8, r25	; 0x08
    4218:	a9 87       	std	Y+9, r26	; 0x09
    421a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    421c:	6f 81       	ldd	r22, Y+7	; 0x07
    421e:	78 85       	ldd	r23, Y+8	; 0x08
    4220:	89 85       	ldd	r24, Y+9	; 0x09
    4222:	9a 85       	ldd	r25, Y+10	; 0x0a
    4224:	20 e0       	ldi	r18, 0x00	; 0
    4226:	30 e0       	ldi	r19, 0x00	; 0
    4228:	40 e8       	ldi	r20, 0x80	; 128
    422a:	5f e3       	ldi	r21, 0x3F	; 63
    422c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4230:	88 23       	and	r24, r24
    4232:	2c f4       	brge	.+10     	; 0x423e <HAL_VidHCLCD_4BitModeWriteChar+0x19c>
		__ticks = 1;
    4234:	81 e0       	ldi	r24, 0x01	; 1
    4236:	90 e0       	ldi	r25, 0x00	; 0
    4238:	9e 83       	std	Y+6, r25	; 0x06
    423a:	8d 83       	std	Y+5, r24	; 0x05
    423c:	3f c0       	rjmp	.+126    	; 0x42bc <HAL_VidHCLCD_4BitModeWriteChar+0x21a>
	else if (__tmp > 65535)
    423e:	6f 81       	ldd	r22, Y+7	; 0x07
    4240:	78 85       	ldd	r23, Y+8	; 0x08
    4242:	89 85       	ldd	r24, Y+9	; 0x09
    4244:	9a 85       	ldd	r25, Y+10	; 0x0a
    4246:	20 e0       	ldi	r18, 0x00	; 0
    4248:	3f ef       	ldi	r19, 0xFF	; 255
    424a:	4f e7       	ldi	r20, 0x7F	; 127
    424c:	57 e4       	ldi	r21, 0x47	; 71
    424e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4252:	18 16       	cp	r1, r24
    4254:	4c f5       	brge	.+82     	; 0x42a8 <HAL_VidHCLCD_4BitModeWriteChar+0x206>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4256:	6b 85       	ldd	r22, Y+11	; 0x0b
    4258:	7c 85       	ldd	r23, Y+12	; 0x0c
    425a:	8d 85       	ldd	r24, Y+13	; 0x0d
    425c:	9e 85       	ldd	r25, Y+14	; 0x0e
    425e:	20 e0       	ldi	r18, 0x00	; 0
    4260:	30 e0       	ldi	r19, 0x00	; 0
    4262:	40 e2       	ldi	r20, 0x20	; 32
    4264:	51 e4       	ldi	r21, 0x41	; 65
    4266:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    426a:	dc 01       	movw	r26, r24
    426c:	cb 01       	movw	r24, r22
    426e:	bc 01       	movw	r22, r24
    4270:	cd 01       	movw	r24, r26
    4272:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4276:	dc 01       	movw	r26, r24
    4278:	cb 01       	movw	r24, r22
    427a:	9e 83       	std	Y+6, r25	; 0x06
    427c:	8d 83       	std	Y+5, r24	; 0x05
    427e:	0f c0       	rjmp	.+30     	; 0x429e <HAL_VidHCLCD_4BitModeWriteChar+0x1fc>
    4280:	80 e9       	ldi	r24, 0x90	; 144
    4282:	91 e0       	ldi	r25, 0x01	; 1
    4284:	9c 83       	std	Y+4, r25	; 0x04
    4286:	8b 83       	std	Y+3, r24	; 0x03
    4288:	8b 81       	ldd	r24, Y+3	; 0x03
    428a:	9c 81       	ldd	r25, Y+4	; 0x04
    428c:	01 97       	sbiw	r24, 0x01	; 1
    428e:	f1 f7       	brne	.-4      	; 0x428c <HAL_VidHCLCD_4BitModeWriteChar+0x1ea>
    4290:	9c 83       	std	Y+4, r25	; 0x04
    4292:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4294:	8d 81       	ldd	r24, Y+5	; 0x05
    4296:	9e 81       	ldd	r25, Y+6	; 0x06
    4298:	01 97       	sbiw	r24, 0x01	; 1
    429a:	9e 83       	std	Y+6, r25	; 0x06
    429c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    429e:	8d 81       	ldd	r24, Y+5	; 0x05
    42a0:	9e 81       	ldd	r25, Y+6	; 0x06
    42a2:	00 97       	sbiw	r24, 0x00	; 0
    42a4:	69 f7       	brne	.-38     	; 0x4280 <HAL_VidHCLCD_4BitModeWriteChar+0x1de>
    42a6:	14 c0       	rjmp	.+40     	; 0x42d0 <HAL_VidHCLCD_4BitModeWriteChar+0x22e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    42a8:	6f 81       	ldd	r22, Y+7	; 0x07
    42aa:	78 85       	ldd	r23, Y+8	; 0x08
    42ac:	89 85       	ldd	r24, Y+9	; 0x09
    42ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    42b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42b4:	dc 01       	movw	r26, r24
    42b6:	cb 01       	movw	r24, r22
    42b8:	9e 83       	std	Y+6, r25	; 0x06
    42ba:	8d 83       	std	Y+5, r24	; 0x05
    42bc:	8d 81       	ldd	r24, Y+5	; 0x05
    42be:	9e 81       	ldd	r25, Y+6	; 0x06
    42c0:	9a 83       	std	Y+2, r25	; 0x02
    42c2:	89 83       	std	Y+1, r24	; 0x01
    42c4:	89 81       	ldd	r24, Y+1	; 0x01
    42c6:	9a 81       	ldd	r25, Y+2	; 0x02
    42c8:	01 97       	sbiw	r24, 0x01	; 1
    42ca:	f1 f7       	brne	.-4      	; 0x42c8 <HAL_VidHCLCD_4BitModeWriteChar+0x226>
    42cc:	9a 83       	std	Y+2, r25	; 0x02
    42ce:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_Errorstate_SetPinValue(HCLCD_ControlPort,E_PIN,PIN_LOW);
    42d0:	81 e0       	ldi	r24, 0x01	; 1
    42d2:	63 e0       	ldi	r22, 0x03	; 3
    42d4:	40 e0       	ldi	r20, 0x00	; 0
    42d6:	0e 94 62 10 	call	0x20c4	; 0x20c4 <MDIO_Errorstate_SetPinValue>
}
    42da:	6d 96       	adiw	r28, 0x1d	; 29
    42dc:	0f b6       	in	r0, 0x3f	; 63
    42de:	f8 94       	cli
    42e0:	de bf       	out	0x3e, r29	; 62
    42e2:	0f be       	out	0x3f, r0	; 63
    42e4:	cd bf       	out	0x3d, r28	; 61
    42e6:	cf 91       	pop	r28
    42e8:	df 91       	pop	r29
    42ea:	08 95       	ret

000042ec <HAL_VidHCLCD_4BitModeInit>:
void HAL_VidHCLCD_4BitModeInit(void)
{
    42ec:	df 93       	push	r29
    42ee:	cf 93       	push	r28
    42f0:	cd b7       	in	r28, 0x3d	; 61
    42f2:	de b7       	in	r29, 0x3e	; 62
    42f4:	e8 97       	sbiw	r28, 0x38	; 56
    42f6:	0f b6       	in	r0, 0x3f	; 63
    42f8:	f8 94       	cli
    42fa:	de bf       	out	0x3e, r29	; 62
    42fc:	0f be       	out	0x3f, r0	; 63
    42fe:	cd bf       	out	0x3d, r28	; 61
    4300:	80 e0       	ldi	r24, 0x00	; 0
    4302:	90 e0       	ldi	r25, 0x00	; 0
    4304:	a0 ef       	ldi	r26, 0xF0	; 240
    4306:	b1 e4       	ldi	r27, 0x41	; 65
    4308:	8d ab       	std	Y+53, r24	; 0x35
    430a:	9e ab       	std	Y+54, r25	; 0x36
    430c:	af ab       	std	Y+55, r26	; 0x37
    430e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4310:	6d a9       	ldd	r22, Y+53	; 0x35
    4312:	7e a9       	ldd	r23, Y+54	; 0x36
    4314:	8f a9       	ldd	r24, Y+55	; 0x37
    4316:	98 ad       	ldd	r25, Y+56	; 0x38
    4318:	20 e0       	ldi	r18, 0x00	; 0
    431a:	30 e0       	ldi	r19, 0x00	; 0
    431c:	4a e7       	ldi	r20, 0x7A	; 122
    431e:	55 e4       	ldi	r21, 0x45	; 69
    4320:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4324:	dc 01       	movw	r26, r24
    4326:	cb 01       	movw	r24, r22
    4328:	89 ab       	std	Y+49, r24	; 0x31
    432a:	9a ab       	std	Y+50, r25	; 0x32
    432c:	ab ab       	std	Y+51, r26	; 0x33
    432e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4330:	69 a9       	ldd	r22, Y+49	; 0x31
    4332:	7a a9       	ldd	r23, Y+50	; 0x32
    4334:	8b a9       	ldd	r24, Y+51	; 0x33
    4336:	9c a9       	ldd	r25, Y+52	; 0x34
    4338:	20 e0       	ldi	r18, 0x00	; 0
    433a:	30 e0       	ldi	r19, 0x00	; 0
    433c:	40 e8       	ldi	r20, 0x80	; 128
    433e:	5f e3       	ldi	r21, 0x3F	; 63
    4340:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4344:	88 23       	and	r24, r24
    4346:	2c f4       	brge	.+10     	; 0x4352 <HAL_VidHCLCD_4BitModeInit+0x66>
		__ticks = 1;
    4348:	81 e0       	ldi	r24, 0x01	; 1
    434a:	90 e0       	ldi	r25, 0x00	; 0
    434c:	98 ab       	std	Y+48, r25	; 0x30
    434e:	8f a7       	std	Y+47, r24	; 0x2f
    4350:	3f c0       	rjmp	.+126    	; 0x43d0 <HAL_VidHCLCD_4BitModeInit+0xe4>
	else if (__tmp > 65535)
    4352:	69 a9       	ldd	r22, Y+49	; 0x31
    4354:	7a a9       	ldd	r23, Y+50	; 0x32
    4356:	8b a9       	ldd	r24, Y+51	; 0x33
    4358:	9c a9       	ldd	r25, Y+52	; 0x34
    435a:	20 e0       	ldi	r18, 0x00	; 0
    435c:	3f ef       	ldi	r19, 0xFF	; 255
    435e:	4f e7       	ldi	r20, 0x7F	; 127
    4360:	57 e4       	ldi	r21, 0x47	; 71
    4362:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4366:	18 16       	cp	r1, r24
    4368:	4c f5       	brge	.+82     	; 0x43bc <HAL_VidHCLCD_4BitModeInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    436a:	6d a9       	ldd	r22, Y+53	; 0x35
    436c:	7e a9       	ldd	r23, Y+54	; 0x36
    436e:	8f a9       	ldd	r24, Y+55	; 0x37
    4370:	98 ad       	ldd	r25, Y+56	; 0x38
    4372:	20 e0       	ldi	r18, 0x00	; 0
    4374:	30 e0       	ldi	r19, 0x00	; 0
    4376:	40 e2       	ldi	r20, 0x20	; 32
    4378:	51 e4       	ldi	r21, 0x41	; 65
    437a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    437e:	dc 01       	movw	r26, r24
    4380:	cb 01       	movw	r24, r22
    4382:	bc 01       	movw	r22, r24
    4384:	cd 01       	movw	r24, r26
    4386:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    438a:	dc 01       	movw	r26, r24
    438c:	cb 01       	movw	r24, r22
    438e:	98 ab       	std	Y+48, r25	; 0x30
    4390:	8f a7       	std	Y+47, r24	; 0x2f
    4392:	0f c0       	rjmp	.+30     	; 0x43b2 <HAL_VidHCLCD_4BitModeInit+0xc6>
    4394:	80 e9       	ldi	r24, 0x90	; 144
    4396:	91 e0       	ldi	r25, 0x01	; 1
    4398:	9e a7       	std	Y+46, r25	; 0x2e
    439a:	8d a7       	std	Y+45, r24	; 0x2d
    439c:	8d a5       	ldd	r24, Y+45	; 0x2d
    439e:	9e a5       	ldd	r25, Y+46	; 0x2e
    43a0:	01 97       	sbiw	r24, 0x01	; 1
    43a2:	f1 f7       	brne	.-4      	; 0x43a0 <HAL_VidHCLCD_4BitModeInit+0xb4>
    43a4:	9e a7       	std	Y+46, r25	; 0x2e
    43a6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    43a8:	8f a5       	ldd	r24, Y+47	; 0x2f
    43aa:	98 a9       	ldd	r25, Y+48	; 0x30
    43ac:	01 97       	sbiw	r24, 0x01	; 1
    43ae:	98 ab       	std	Y+48, r25	; 0x30
    43b0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43b2:	8f a5       	ldd	r24, Y+47	; 0x2f
    43b4:	98 a9       	ldd	r25, Y+48	; 0x30
    43b6:	00 97       	sbiw	r24, 0x00	; 0
    43b8:	69 f7       	brne	.-38     	; 0x4394 <HAL_VidHCLCD_4BitModeInit+0xa8>
    43ba:	14 c0       	rjmp	.+40     	; 0x43e4 <HAL_VidHCLCD_4BitModeInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43bc:	69 a9       	ldd	r22, Y+49	; 0x31
    43be:	7a a9       	ldd	r23, Y+50	; 0x32
    43c0:	8b a9       	ldd	r24, Y+51	; 0x33
    43c2:	9c a9       	ldd	r25, Y+52	; 0x34
    43c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43c8:	dc 01       	movw	r26, r24
    43ca:	cb 01       	movw	r24, r22
    43cc:	98 ab       	std	Y+48, r25	; 0x30
    43ce:	8f a7       	std	Y+47, r24	; 0x2f
    43d0:	8f a5       	ldd	r24, Y+47	; 0x2f
    43d2:	98 a9       	ldd	r25, Y+48	; 0x30
    43d4:	9c a7       	std	Y+44, r25	; 0x2c
    43d6:	8b a7       	std	Y+43, r24	; 0x2b
    43d8:	8b a5       	ldd	r24, Y+43	; 0x2b
    43da:	9c a5       	ldd	r25, Y+44	; 0x2c
    43dc:	01 97       	sbiw	r24, 0x01	; 1
    43de:	f1 f7       	brne	.-4      	; 0x43dc <HAL_VidHCLCD_4BitModeInit+0xf0>
    43e0:	9c a7       	std	Y+44, r25	; 0x2c
    43e2:	8b a7       	std	Y+43, r24	; 0x2b
	/*Wait 30ms*/
	_delay_ms(30);
	/*send Function set command*/
	HAL_VidHCLCD_4BitModeWriteCommand((SET_FUNCTIONSET&0xF0));
    43e4:	80 e2       	ldi	r24, 0x20	; 32
    43e6:	0e 94 b3 1f 	call	0x3f66	; 0x3f66 <HAL_VidHCLCD_4BitModeWriteCommand>
	HAL_VidHCLCD_4BitModeWriteCommand((SET_FUNCTIONSET&0xF0));
    43ea:	80 e2       	ldi	r24, 0x20	; 32
    43ec:	0e 94 b3 1f 	call	0x3f66	; 0x3f66 <HAL_VidHCLCD_4BitModeWriteCommand>
	HAL_VidHCLCD_4BitModeWriteCommand((SET_FUNCTIONSET<<4));
    43f0:	80 e8       	ldi	r24, 0x80	; 128
    43f2:	0e 94 b3 1f 	call	0x3f66	; 0x3f66 <HAL_VidHCLCD_4BitModeWriteCommand>
    43f6:	80 e0       	ldi	r24, 0x00	; 0
    43f8:	90 e0       	ldi	r25, 0x00	; 0
    43fa:	a0 e8       	ldi	r26, 0x80	; 128
    43fc:	bf e3       	ldi	r27, 0x3F	; 63
    43fe:	8f a3       	std	Y+39, r24	; 0x27
    4400:	98 a7       	std	Y+40, r25	; 0x28
    4402:	a9 a7       	std	Y+41, r26	; 0x29
    4404:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4406:	6f a1       	ldd	r22, Y+39	; 0x27
    4408:	78 a5       	ldd	r23, Y+40	; 0x28
    440a:	89 a5       	ldd	r24, Y+41	; 0x29
    440c:	9a a5       	ldd	r25, Y+42	; 0x2a
    440e:	20 e0       	ldi	r18, 0x00	; 0
    4410:	30 e0       	ldi	r19, 0x00	; 0
    4412:	4a e7       	ldi	r20, 0x7A	; 122
    4414:	55 e4       	ldi	r21, 0x45	; 69
    4416:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    441a:	dc 01       	movw	r26, r24
    441c:	cb 01       	movw	r24, r22
    441e:	8b a3       	std	Y+35, r24	; 0x23
    4420:	9c a3       	std	Y+36, r25	; 0x24
    4422:	ad a3       	std	Y+37, r26	; 0x25
    4424:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4426:	6b a1       	ldd	r22, Y+35	; 0x23
    4428:	7c a1       	ldd	r23, Y+36	; 0x24
    442a:	8d a1       	ldd	r24, Y+37	; 0x25
    442c:	9e a1       	ldd	r25, Y+38	; 0x26
    442e:	20 e0       	ldi	r18, 0x00	; 0
    4430:	30 e0       	ldi	r19, 0x00	; 0
    4432:	40 e8       	ldi	r20, 0x80	; 128
    4434:	5f e3       	ldi	r21, 0x3F	; 63
    4436:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    443a:	88 23       	and	r24, r24
    443c:	2c f4       	brge	.+10     	; 0x4448 <HAL_VidHCLCD_4BitModeInit+0x15c>
		__ticks = 1;
    443e:	81 e0       	ldi	r24, 0x01	; 1
    4440:	90 e0       	ldi	r25, 0x00	; 0
    4442:	9a a3       	std	Y+34, r25	; 0x22
    4444:	89 a3       	std	Y+33, r24	; 0x21
    4446:	3f c0       	rjmp	.+126    	; 0x44c6 <HAL_VidHCLCD_4BitModeInit+0x1da>
	else if (__tmp > 65535)
    4448:	6b a1       	ldd	r22, Y+35	; 0x23
    444a:	7c a1       	ldd	r23, Y+36	; 0x24
    444c:	8d a1       	ldd	r24, Y+37	; 0x25
    444e:	9e a1       	ldd	r25, Y+38	; 0x26
    4450:	20 e0       	ldi	r18, 0x00	; 0
    4452:	3f ef       	ldi	r19, 0xFF	; 255
    4454:	4f e7       	ldi	r20, 0x7F	; 127
    4456:	57 e4       	ldi	r21, 0x47	; 71
    4458:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    445c:	18 16       	cp	r1, r24
    445e:	4c f5       	brge	.+82     	; 0x44b2 <HAL_VidHCLCD_4BitModeInit+0x1c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4460:	6f a1       	ldd	r22, Y+39	; 0x27
    4462:	78 a5       	ldd	r23, Y+40	; 0x28
    4464:	89 a5       	ldd	r24, Y+41	; 0x29
    4466:	9a a5       	ldd	r25, Y+42	; 0x2a
    4468:	20 e0       	ldi	r18, 0x00	; 0
    446a:	30 e0       	ldi	r19, 0x00	; 0
    446c:	40 e2       	ldi	r20, 0x20	; 32
    446e:	51 e4       	ldi	r21, 0x41	; 65
    4470:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4474:	dc 01       	movw	r26, r24
    4476:	cb 01       	movw	r24, r22
    4478:	bc 01       	movw	r22, r24
    447a:	cd 01       	movw	r24, r26
    447c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4480:	dc 01       	movw	r26, r24
    4482:	cb 01       	movw	r24, r22
    4484:	9a a3       	std	Y+34, r25	; 0x22
    4486:	89 a3       	std	Y+33, r24	; 0x21
    4488:	0f c0       	rjmp	.+30     	; 0x44a8 <HAL_VidHCLCD_4BitModeInit+0x1bc>
    448a:	80 e9       	ldi	r24, 0x90	; 144
    448c:	91 e0       	ldi	r25, 0x01	; 1
    448e:	98 a3       	std	Y+32, r25	; 0x20
    4490:	8f 8f       	std	Y+31, r24	; 0x1f
    4492:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4494:	98 a1       	ldd	r25, Y+32	; 0x20
    4496:	01 97       	sbiw	r24, 0x01	; 1
    4498:	f1 f7       	brne	.-4      	; 0x4496 <HAL_VidHCLCD_4BitModeInit+0x1aa>
    449a:	98 a3       	std	Y+32, r25	; 0x20
    449c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    449e:	89 a1       	ldd	r24, Y+33	; 0x21
    44a0:	9a a1       	ldd	r25, Y+34	; 0x22
    44a2:	01 97       	sbiw	r24, 0x01	; 1
    44a4:	9a a3       	std	Y+34, r25	; 0x22
    44a6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44a8:	89 a1       	ldd	r24, Y+33	; 0x21
    44aa:	9a a1       	ldd	r25, Y+34	; 0x22
    44ac:	00 97       	sbiw	r24, 0x00	; 0
    44ae:	69 f7       	brne	.-38     	; 0x448a <HAL_VidHCLCD_4BitModeInit+0x19e>
    44b0:	14 c0       	rjmp	.+40     	; 0x44da <HAL_VidHCLCD_4BitModeInit+0x1ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    44b2:	6b a1       	ldd	r22, Y+35	; 0x23
    44b4:	7c a1       	ldd	r23, Y+36	; 0x24
    44b6:	8d a1       	ldd	r24, Y+37	; 0x25
    44b8:	9e a1       	ldd	r25, Y+38	; 0x26
    44ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44be:	dc 01       	movw	r26, r24
    44c0:	cb 01       	movw	r24, r22
    44c2:	9a a3       	std	Y+34, r25	; 0x22
    44c4:	89 a3       	std	Y+33, r24	; 0x21
    44c6:	89 a1       	ldd	r24, Y+33	; 0x21
    44c8:	9a a1       	ldd	r25, Y+34	; 0x22
    44ca:	9e 8f       	std	Y+30, r25	; 0x1e
    44cc:	8d 8f       	std	Y+29, r24	; 0x1d
    44ce:	8d 8d       	ldd	r24, Y+29	; 0x1d
    44d0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    44d2:	01 97       	sbiw	r24, 0x01	; 1
    44d4:	f1 f7       	brne	.-4      	; 0x44d2 <HAL_VidHCLCD_4BitModeInit+0x1e6>
    44d6:	9e 8f       	std	Y+30, r25	; 0x1e
    44d8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	/*Send Display on off command*/
	HAL_VidHCLCD_4BitModeWriteCommand((SET_DISPLAYON_OFF&0xF0));
    44da:	80 e0       	ldi	r24, 0x00	; 0
    44dc:	0e 94 b3 1f 	call	0x3f66	; 0x3f66 <HAL_VidHCLCD_4BitModeWriteCommand>
	HAL_VidHCLCD_4BitModeWriteCommand((SET_DISPLAYON_OFF<<4));
    44e0:	80 ef       	ldi	r24, 0xF0	; 240
    44e2:	0e 94 b3 1f 	call	0x3f66	; 0x3f66 <HAL_VidHCLCD_4BitModeWriteCommand>
    44e6:	80 e0       	ldi	r24, 0x00	; 0
    44e8:	90 e0       	ldi	r25, 0x00	; 0
    44ea:	a0 e8       	ldi	r26, 0x80	; 128
    44ec:	bf e3       	ldi	r27, 0x3F	; 63
    44ee:	89 8f       	std	Y+25, r24	; 0x19
    44f0:	9a 8f       	std	Y+26, r25	; 0x1a
    44f2:	ab 8f       	std	Y+27, r26	; 0x1b
    44f4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    44f6:	69 8d       	ldd	r22, Y+25	; 0x19
    44f8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    44fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    44fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    44fe:	20 e0       	ldi	r18, 0x00	; 0
    4500:	30 e0       	ldi	r19, 0x00	; 0
    4502:	4a e7       	ldi	r20, 0x7A	; 122
    4504:	55 e4       	ldi	r21, 0x45	; 69
    4506:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    450a:	dc 01       	movw	r26, r24
    450c:	cb 01       	movw	r24, r22
    450e:	8d 8b       	std	Y+21, r24	; 0x15
    4510:	9e 8b       	std	Y+22, r25	; 0x16
    4512:	af 8b       	std	Y+23, r26	; 0x17
    4514:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4516:	6d 89       	ldd	r22, Y+21	; 0x15
    4518:	7e 89       	ldd	r23, Y+22	; 0x16
    451a:	8f 89       	ldd	r24, Y+23	; 0x17
    451c:	98 8d       	ldd	r25, Y+24	; 0x18
    451e:	20 e0       	ldi	r18, 0x00	; 0
    4520:	30 e0       	ldi	r19, 0x00	; 0
    4522:	40 e8       	ldi	r20, 0x80	; 128
    4524:	5f e3       	ldi	r21, 0x3F	; 63
    4526:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    452a:	88 23       	and	r24, r24
    452c:	2c f4       	brge	.+10     	; 0x4538 <HAL_VidHCLCD_4BitModeInit+0x24c>
		__ticks = 1;
    452e:	81 e0       	ldi	r24, 0x01	; 1
    4530:	90 e0       	ldi	r25, 0x00	; 0
    4532:	9c 8b       	std	Y+20, r25	; 0x14
    4534:	8b 8b       	std	Y+19, r24	; 0x13
    4536:	3f c0       	rjmp	.+126    	; 0x45b6 <HAL_VidHCLCD_4BitModeInit+0x2ca>
	else if (__tmp > 65535)
    4538:	6d 89       	ldd	r22, Y+21	; 0x15
    453a:	7e 89       	ldd	r23, Y+22	; 0x16
    453c:	8f 89       	ldd	r24, Y+23	; 0x17
    453e:	98 8d       	ldd	r25, Y+24	; 0x18
    4540:	20 e0       	ldi	r18, 0x00	; 0
    4542:	3f ef       	ldi	r19, 0xFF	; 255
    4544:	4f e7       	ldi	r20, 0x7F	; 127
    4546:	57 e4       	ldi	r21, 0x47	; 71
    4548:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    454c:	18 16       	cp	r1, r24
    454e:	4c f5       	brge	.+82     	; 0x45a2 <HAL_VidHCLCD_4BitModeInit+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4550:	69 8d       	ldd	r22, Y+25	; 0x19
    4552:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4554:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4556:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4558:	20 e0       	ldi	r18, 0x00	; 0
    455a:	30 e0       	ldi	r19, 0x00	; 0
    455c:	40 e2       	ldi	r20, 0x20	; 32
    455e:	51 e4       	ldi	r21, 0x41	; 65
    4560:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4564:	dc 01       	movw	r26, r24
    4566:	cb 01       	movw	r24, r22
    4568:	bc 01       	movw	r22, r24
    456a:	cd 01       	movw	r24, r26
    456c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4570:	dc 01       	movw	r26, r24
    4572:	cb 01       	movw	r24, r22
    4574:	9c 8b       	std	Y+20, r25	; 0x14
    4576:	8b 8b       	std	Y+19, r24	; 0x13
    4578:	0f c0       	rjmp	.+30     	; 0x4598 <HAL_VidHCLCD_4BitModeInit+0x2ac>
    457a:	80 e9       	ldi	r24, 0x90	; 144
    457c:	91 e0       	ldi	r25, 0x01	; 1
    457e:	9a 8b       	std	Y+18, r25	; 0x12
    4580:	89 8b       	std	Y+17, r24	; 0x11
    4582:	89 89       	ldd	r24, Y+17	; 0x11
    4584:	9a 89       	ldd	r25, Y+18	; 0x12
    4586:	01 97       	sbiw	r24, 0x01	; 1
    4588:	f1 f7       	brne	.-4      	; 0x4586 <HAL_VidHCLCD_4BitModeInit+0x29a>
    458a:	9a 8b       	std	Y+18, r25	; 0x12
    458c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    458e:	8b 89       	ldd	r24, Y+19	; 0x13
    4590:	9c 89       	ldd	r25, Y+20	; 0x14
    4592:	01 97       	sbiw	r24, 0x01	; 1
    4594:	9c 8b       	std	Y+20, r25	; 0x14
    4596:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4598:	8b 89       	ldd	r24, Y+19	; 0x13
    459a:	9c 89       	ldd	r25, Y+20	; 0x14
    459c:	00 97       	sbiw	r24, 0x00	; 0
    459e:	69 f7       	brne	.-38     	; 0x457a <HAL_VidHCLCD_4BitModeInit+0x28e>
    45a0:	14 c0       	rjmp	.+40     	; 0x45ca <HAL_VidHCLCD_4BitModeInit+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    45a2:	6d 89       	ldd	r22, Y+21	; 0x15
    45a4:	7e 89       	ldd	r23, Y+22	; 0x16
    45a6:	8f 89       	ldd	r24, Y+23	; 0x17
    45a8:	98 8d       	ldd	r25, Y+24	; 0x18
    45aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45ae:	dc 01       	movw	r26, r24
    45b0:	cb 01       	movw	r24, r22
    45b2:	9c 8b       	std	Y+20, r25	; 0x14
    45b4:	8b 8b       	std	Y+19, r24	; 0x13
    45b6:	8b 89       	ldd	r24, Y+19	; 0x13
    45b8:	9c 89       	ldd	r25, Y+20	; 0x14
    45ba:	98 8b       	std	Y+16, r25	; 0x10
    45bc:	8f 87       	std	Y+15, r24	; 0x0f
    45be:	8f 85       	ldd	r24, Y+15	; 0x0f
    45c0:	98 89       	ldd	r25, Y+16	; 0x10
    45c2:	01 97       	sbiw	r24, 0x01	; 1
    45c4:	f1 f7       	brne	.-4      	; 0x45c2 <HAL_VidHCLCD_4BitModeInit+0x2d6>
    45c6:	98 8b       	std	Y+16, r25	; 0x10
    45c8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	/*Send Display Clear command*/
	HAL_VidHCLCD_4BitModeWriteCommand((SET_DISPALYCLEAR&0xF0));
    45ca:	80 e0       	ldi	r24, 0x00	; 0
    45cc:	0e 94 b3 1f 	call	0x3f66	; 0x3f66 <HAL_VidHCLCD_4BitModeWriteCommand>
	HAL_VidHCLCD_4BitModeWriteCommand((SET_DISPALYCLEAR<<4));
    45d0:	80 e1       	ldi	r24, 0x10	; 16
    45d2:	0e 94 b3 1f 	call	0x3f66	; 0x3f66 <HAL_VidHCLCD_4BitModeWriteCommand>
    45d6:	80 e0       	ldi	r24, 0x00	; 0
    45d8:	90 e0       	ldi	r25, 0x00	; 0
    45da:	a0 e0       	ldi	r26, 0x00	; 0
    45dc:	b0 e4       	ldi	r27, 0x40	; 64
    45de:	8b 87       	std	Y+11, r24	; 0x0b
    45e0:	9c 87       	std	Y+12, r25	; 0x0c
    45e2:	ad 87       	std	Y+13, r26	; 0x0d
    45e4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    45e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    45e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    45ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    45ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    45ee:	20 e0       	ldi	r18, 0x00	; 0
    45f0:	30 e0       	ldi	r19, 0x00	; 0
    45f2:	4a e7       	ldi	r20, 0x7A	; 122
    45f4:	55 e4       	ldi	r21, 0x45	; 69
    45f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45fa:	dc 01       	movw	r26, r24
    45fc:	cb 01       	movw	r24, r22
    45fe:	8f 83       	std	Y+7, r24	; 0x07
    4600:	98 87       	std	Y+8, r25	; 0x08
    4602:	a9 87       	std	Y+9, r26	; 0x09
    4604:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4606:	6f 81       	ldd	r22, Y+7	; 0x07
    4608:	78 85       	ldd	r23, Y+8	; 0x08
    460a:	89 85       	ldd	r24, Y+9	; 0x09
    460c:	9a 85       	ldd	r25, Y+10	; 0x0a
    460e:	20 e0       	ldi	r18, 0x00	; 0
    4610:	30 e0       	ldi	r19, 0x00	; 0
    4612:	40 e8       	ldi	r20, 0x80	; 128
    4614:	5f e3       	ldi	r21, 0x3F	; 63
    4616:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    461a:	88 23       	and	r24, r24
    461c:	2c f4       	brge	.+10     	; 0x4628 <HAL_VidHCLCD_4BitModeInit+0x33c>
		__ticks = 1;
    461e:	81 e0       	ldi	r24, 0x01	; 1
    4620:	90 e0       	ldi	r25, 0x00	; 0
    4622:	9e 83       	std	Y+6, r25	; 0x06
    4624:	8d 83       	std	Y+5, r24	; 0x05
    4626:	3f c0       	rjmp	.+126    	; 0x46a6 <HAL_VidHCLCD_4BitModeInit+0x3ba>
	else if (__tmp > 65535)
    4628:	6f 81       	ldd	r22, Y+7	; 0x07
    462a:	78 85       	ldd	r23, Y+8	; 0x08
    462c:	89 85       	ldd	r24, Y+9	; 0x09
    462e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4630:	20 e0       	ldi	r18, 0x00	; 0
    4632:	3f ef       	ldi	r19, 0xFF	; 255
    4634:	4f e7       	ldi	r20, 0x7F	; 127
    4636:	57 e4       	ldi	r21, 0x47	; 71
    4638:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    463c:	18 16       	cp	r1, r24
    463e:	4c f5       	brge	.+82     	; 0x4692 <HAL_VidHCLCD_4BitModeInit+0x3a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4640:	6b 85       	ldd	r22, Y+11	; 0x0b
    4642:	7c 85       	ldd	r23, Y+12	; 0x0c
    4644:	8d 85       	ldd	r24, Y+13	; 0x0d
    4646:	9e 85       	ldd	r25, Y+14	; 0x0e
    4648:	20 e0       	ldi	r18, 0x00	; 0
    464a:	30 e0       	ldi	r19, 0x00	; 0
    464c:	40 e2       	ldi	r20, 0x20	; 32
    464e:	51 e4       	ldi	r21, 0x41	; 65
    4650:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4654:	dc 01       	movw	r26, r24
    4656:	cb 01       	movw	r24, r22
    4658:	bc 01       	movw	r22, r24
    465a:	cd 01       	movw	r24, r26
    465c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4660:	dc 01       	movw	r26, r24
    4662:	cb 01       	movw	r24, r22
    4664:	9e 83       	std	Y+6, r25	; 0x06
    4666:	8d 83       	std	Y+5, r24	; 0x05
    4668:	0f c0       	rjmp	.+30     	; 0x4688 <HAL_VidHCLCD_4BitModeInit+0x39c>
    466a:	80 e9       	ldi	r24, 0x90	; 144
    466c:	91 e0       	ldi	r25, 0x01	; 1
    466e:	9c 83       	std	Y+4, r25	; 0x04
    4670:	8b 83       	std	Y+3, r24	; 0x03
    4672:	8b 81       	ldd	r24, Y+3	; 0x03
    4674:	9c 81       	ldd	r25, Y+4	; 0x04
    4676:	01 97       	sbiw	r24, 0x01	; 1
    4678:	f1 f7       	brne	.-4      	; 0x4676 <HAL_VidHCLCD_4BitModeInit+0x38a>
    467a:	9c 83       	std	Y+4, r25	; 0x04
    467c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    467e:	8d 81       	ldd	r24, Y+5	; 0x05
    4680:	9e 81       	ldd	r25, Y+6	; 0x06
    4682:	01 97       	sbiw	r24, 0x01	; 1
    4684:	9e 83       	std	Y+6, r25	; 0x06
    4686:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4688:	8d 81       	ldd	r24, Y+5	; 0x05
    468a:	9e 81       	ldd	r25, Y+6	; 0x06
    468c:	00 97       	sbiw	r24, 0x00	; 0
    468e:	69 f7       	brne	.-38     	; 0x466a <HAL_VidHCLCD_4BitModeInit+0x37e>
    4690:	14 c0       	rjmp	.+40     	; 0x46ba <HAL_VidHCLCD_4BitModeInit+0x3ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4692:	6f 81       	ldd	r22, Y+7	; 0x07
    4694:	78 85       	ldd	r23, Y+8	; 0x08
    4696:	89 85       	ldd	r24, Y+9	; 0x09
    4698:	9a 85       	ldd	r25, Y+10	; 0x0a
    469a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    469e:	dc 01       	movw	r26, r24
    46a0:	cb 01       	movw	r24, r22
    46a2:	9e 83       	std	Y+6, r25	; 0x06
    46a4:	8d 83       	std	Y+5, r24	; 0x05
    46a6:	8d 81       	ldd	r24, Y+5	; 0x05
    46a8:	9e 81       	ldd	r25, Y+6	; 0x06
    46aa:	9a 83       	std	Y+2, r25	; 0x02
    46ac:	89 83       	std	Y+1, r24	; 0x01
    46ae:	89 81       	ldd	r24, Y+1	; 0x01
    46b0:	9a 81       	ldd	r25, Y+2	; 0x02
    46b2:	01 97       	sbiw	r24, 0x01	; 1
    46b4:	f1 f7       	brne	.-4      	; 0x46b2 <HAL_VidHCLCD_4BitModeInit+0x3c6>
    46b6:	9a 83       	std	Y+2, r25	; 0x02
    46b8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	/*Send Entry Mode command*/
	HAL_VidHCLCD_4BitModeWriteCommand((SET_ENTRYMODE&0xF0));
    46ba:	80 e0       	ldi	r24, 0x00	; 0
    46bc:	0e 94 b3 1f 	call	0x3f66	; 0x3f66 <HAL_VidHCLCD_4BitModeWriteCommand>
	HAL_VidHCLCD_4BitModeWriteCommand((SET_ENTRYMODE<<4));
    46c0:	80 e6       	ldi	r24, 0x60	; 96
    46c2:	0e 94 b3 1f 	call	0x3f66	; 0x3f66 <HAL_VidHCLCD_4BitModeWriteCommand>
}
    46c6:	e8 96       	adiw	r28, 0x38	; 56
    46c8:	0f b6       	in	r0, 0x3f	; 63
    46ca:	f8 94       	cli
    46cc:	de bf       	out	0x3e, r29	; 62
    46ce:	0f be       	out	0x3f, r0	; 63
    46d0:	cd bf       	out	0x3d, r28	; 61
    46d2:	cf 91       	pop	r28
    46d4:	df 91       	pop	r29
    46d6:	08 95       	ret

000046d8 <HAL_VidHCLCD_4BitModeSendCommand>:
void HAL_VidHCLCD_4BitModeSendCommand(uint8 Copy_uint8Command)
{
    46d8:	df 93       	push	r29
    46da:	cf 93       	push	r28
    46dc:	0f 92       	push	r0
    46de:	cd b7       	in	r28, 0x3d	; 61
    46e0:	de b7       	in	r29, 0x3e	; 62
    46e2:	89 83       	std	Y+1, r24	; 0x01
	HAL_VidHCLCD_4BitModeWriteCommand((Copy_uint8Command&0xF0));
    46e4:	89 81       	ldd	r24, Y+1	; 0x01
    46e6:	80 7f       	andi	r24, 0xF0	; 240
    46e8:	0e 94 b3 1f 	call	0x3f66	; 0x3f66 <HAL_VidHCLCD_4BitModeWriteCommand>
	HAL_VidHCLCD_4BitModeWriteCommand((Copy_uint8Command<<4));
    46ec:	89 81       	ldd	r24, Y+1	; 0x01
    46ee:	82 95       	swap	r24
    46f0:	80 7f       	andi	r24, 0xF0	; 240
    46f2:	0e 94 b3 1f 	call	0x3f66	; 0x3f66 <HAL_VidHCLCD_4BitModeWriteCommand>
}
    46f6:	0f 90       	pop	r0
    46f8:	cf 91       	pop	r28
    46fa:	df 91       	pop	r29
    46fc:	08 95       	ret

000046fe <HAL_VidHCLCD_4BitModeWriteString>:
/*AMIT'\0'*/
void HAL_VidHCLCD_4BitModeWriteString(uint8 *Copy_uint8String)
{
    46fe:	df 93       	push	r29
    4700:	cf 93       	push	r28
    4702:	00 d0       	rcall	.+0      	; 0x4704 <HAL_VidHCLCD_4BitModeWriteString+0x6>
    4704:	0f 92       	push	r0
    4706:	cd b7       	in	r28, 0x3d	; 61
    4708:	de b7       	in	r29, 0x3e	; 62
    470a:	9b 83       	std	Y+3, r25	; 0x03
    470c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Loc_uint8Count=0;
    470e:	19 82       	std	Y+1, r1	; 0x01
    4710:	0e c0       	rjmp	.+28     	; 0x472e <HAL_VidHCLCD_4BitModeWriteString+0x30>
	while(Copy_uint8String[Loc_uint8Count]!='\0')
	{
		HAL_VidHCLCD_4BitModeWriteChar(Copy_uint8String[Loc_uint8Count]);
    4712:	89 81       	ldd	r24, Y+1	; 0x01
    4714:	28 2f       	mov	r18, r24
    4716:	30 e0       	ldi	r19, 0x00	; 0
    4718:	8a 81       	ldd	r24, Y+2	; 0x02
    471a:	9b 81       	ldd	r25, Y+3	; 0x03
    471c:	fc 01       	movw	r30, r24
    471e:	e2 0f       	add	r30, r18
    4720:	f3 1f       	adc	r31, r19
    4722:	80 81       	ld	r24, Z
    4724:	0e 94 51 20 	call	0x40a2	; 0x40a2 <HAL_VidHCLCD_4BitModeWriteChar>
		Loc_uint8Count++;
    4728:	89 81       	ldd	r24, Y+1	; 0x01
    472a:	8f 5f       	subi	r24, 0xFF	; 255
    472c:	89 83       	std	Y+1, r24	; 0x01
}
/*AMIT'\0'*/
void HAL_VidHCLCD_4BitModeWriteString(uint8 *Copy_uint8String)
{
	uint8 Loc_uint8Count=0;
	while(Copy_uint8String[Loc_uint8Count]!='\0')
    472e:	89 81       	ldd	r24, Y+1	; 0x01
    4730:	28 2f       	mov	r18, r24
    4732:	30 e0       	ldi	r19, 0x00	; 0
    4734:	8a 81       	ldd	r24, Y+2	; 0x02
    4736:	9b 81       	ldd	r25, Y+3	; 0x03
    4738:	fc 01       	movw	r30, r24
    473a:	e2 0f       	add	r30, r18
    473c:	f3 1f       	adc	r31, r19
    473e:	80 81       	ld	r24, Z
    4740:	88 23       	and	r24, r24
    4742:	39 f7       	brne	.-50     	; 0x4712 <HAL_VidHCLCD_4BitModeWriteString+0x14>
	{
		HAL_VidHCLCD_4BitModeWriteChar(Copy_uint8String[Loc_uint8Count]);
		Loc_uint8Count++;
	}
}
    4744:	0f 90       	pop	r0
    4746:	0f 90       	pop	r0
    4748:	0f 90       	pop	r0
    474a:	cf 91       	pop	r28
    474c:	df 91       	pop	r29
    474e:	08 95       	ret

00004750 <HAL_VidHCLCD_4BitModeWriteNumber>:
/*1234*/
void HAL_VidHCLCD_4BitModeWriteNumber(uint32 Copy_uint32Number)
{
    4750:	0f 93       	push	r16
    4752:	1f 93       	push	r17
    4754:	df 93       	push	r29
    4756:	cf 93       	push	r28
    4758:	cd b7       	in	r28, 0x3d	; 61
    475a:	de b7       	in	r29, 0x3e	; 62
    475c:	65 97       	sbiw	r28, 0x15	; 21
    475e:	0f b6       	in	r0, 0x3f	; 63
    4760:	f8 94       	cli
    4762:	de bf       	out	0x3e, r29	; 62
    4764:	0f be       	out	0x3f, r0	; 63
    4766:	cd bf       	out	0x3d, r28	; 61
    4768:	6a 8b       	std	Y+18, r22	; 0x12
    476a:	7b 8b       	std	Y+19, r23	; 0x13
    476c:	8c 8b       	std	Y+20, r24	; 0x14
    476e:	9d 8b       	std	Y+21, r25	; 0x15
	uint8 Loc_uint8Digits[16];
	sint8 Loc_sint8Count=0;
    4770:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_uint32Number==0)
    4772:	8a 89       	ldd	r24, Y+18	; 0x12
    4774:	9b 89       	ldd	r25, Y+19	; 0x13
    4776:	ac 89       	ldd	r26, Y+20	; 0x14
    4778:	bd 89       	ldd	r27, Y+21	; 0x15
    477a:	00 97       	sbiw	r24, 0x00	; 0
    477c:	a1 05       	cpc	r26, r1
    477e:	b1 05       	cpc	r27, r1
    4780:	99 f5       	brne	.+102    	; 0x47e8 <HAL_VidHCLCD_4BitModeWriteNumber+0x98>
	{
		HAL_VidHCLCD_4BitModeWriteChar(0+48);
    4782:	80 e3       	ldi	r24, 0x30	; 48
    4784:	0e 94 51 20 	call	0x40a2	; 0x40a2 <HAL_VidHCLCD_4BitModeWriteChar>
    4788:	4f c0       	rjmp	.+158    	; 0x4828 <HAL_VidHCLCD_4BitModeWriteNumber+0xd8>
	}
	else
	{
		while(Copy_uint32Number!=0)
		{
			Loc_uint8Digits[Loc_sint8Count]=Copy_uint32Number%10;
    478a:	89 81       	ldd	r24, Y+1	; 0x01
    478c:	08 2f       	mov	r16, r24
    478e:	11 27       	eor	r17, r17
    4790:	07 fd       	sbrc	r16, 7
    4792:	10 95       	com	r17
    4794:	8a 89       	ldd	r24, Y+18	; 0x12
    4796:	9b 89       	ldd	r25, Y+19	; 0x13
    4798:	ac 89       	ldd	r26, Y+20	; 0x14
    479a:	bd 89       	ldd	r27, Y+21	; 0x15
    479c:	2a e0       	ldi	r18, 0x0A	; 10
    479e:	30 e0       	ldi	r19, 0x00	; 0
    47a0:	40 e0       	ldi	r20, 0x00	; 0
    47a2:	50 e0       	ldi	r21, 0x00	; 0
    47a4:	bc 01       	movw	r22, r24
    47a6:	cd 01       	movw	r24, r26
    47a8:	0e 94 12 25 	call	0x4a24	; 0x4a24 <__udivmodsi4>
    47ac:	dc 01       	movw	r26, r24
    47ae:	cb 01       	movw	r24, r22
    47b0:	28 2f       	mov	r18, r24
    47b2:	ce 01       	movw	r24, r28
    47b4:	02 96       	adiw	r24, 0x02	; 2
    47b6:	fc 01       	movw	r30, r24
    47b8:	e0 0f       	add	r30, r16
    47ba:	f1 1f       	adc	r31, r17
    47bc:	20 83       	st	Z, r18
			Copy_uint32Number/=10;
    47be:	8a 89       	ldd	r24, Y+18	; 0x12
    47c0:	9b 89       	ldd	r25, Y+19	; 0x13
    47c2:	ac 89       	ldd	r26, Y+20	; 0x14
    47c4:	bd 89       	ldd	r27, Y+21	; 0x15
    47c6:	2a e0       	ldi	r18, 0x0A	; 10
    47c8:	30 e0       	ldi	r19, 0x00	; 0
    47ca:	40 e0       	ldi	r20, 0x00	; 0
    47cc:	50 e0       	ldi	r21, 0x00	; 0
    47ce:	bc 01       	movw	r22, r24
    47d0:	cd 01       	movw	r24, r26
    47d2:	0e 94 12 25 	call	0x4a24	; 0x4a24 <__udivmodsi4>
    47d6:	da 01       	movw	r26, r20
    47d8:	c9 01       	movw	r24, r18
    47da:	8a 8b       	std	Y+18, r24	; 0x12
    47dc:	9b 8b       	std	Y+19, r25	; 0x13
    47de:	ac 8b       	std	Y+20, r26	; 0x14
    47e0:	bd 8b       	std	Y+21, r27	; 0x15
			Loc_sint8Count++;
    47e2:	89 81       	ldd	r24, Y+1	; 0x01
    47e4:	8f 5f       	subi	r24, 0xFF	; 255
    47e6:	89 83       	std	Y+1, r24	; 0x01
	{
		HAL_VidHCLCD_4BitModeWriteChar(0+48);
	}
	else
	{
		while(Copy_uint32Number!=0)
    47e8:	8a 89       	ldd	r24, Y+18	; 0x12
    47ea:	9b 89       	ldd	r25, Y+19	; 0x13
    47ec:	ac 89       	ldd	r26, Y+20	; 0x14
    47ee:	bd 89       	ldd	r27, Y+21	; 0x15
    47f0:	00 97       	sbiw	r24, 0x00	; 0
    47f2:	a1 05       	cpc	r26, r1
    47f4:	b1 05       	cpc	r27, r1
    47f6:	49 f6       	brne	.-110    	; 0x478a <HAL_VidHCLCD_4BitModeWriteNumber+0x3a>
		{
			Loc_uint8Digits[Loc_sint8Count]=Copy_uint32Number%10;
			Copy_uint32Number/=10;
			Loc_sint8Count++;
		}
		Loc_sint8Count-=1;
    47f8:	89 81       	ldd	r24, Y+1	; 0x01
    47fa:	81 50       	subi	r24, 0x01	; 1
    47fc:	89 83       	std	Y+1, r24	; 0x01
    47fe:	11 c0       	rjmp	.+34     	; 0x4822 <HAL_VidHCLCD_4BitModeWriteNumber+0xd2>
		while(Loc_sint8Count>=0)
		{
			HAL_VidHCLCD_4BitModeWriteChar(Loc_uint8Digits[Loc_sint8Count]+48);
    4800:	89 81       	ldd	r24, Y+1	; 0x01
    4802:	28 2f       	mov	r18, r24
    4804:	33 27       	eor	r19, r19
    4806:	27 fd       	sbrc	r18, 7
    4808:	30 95       	com	r19
    480a:	ce 01       	movw	r24, r28
    480c:	02 96       	adiw	r24, 0x02	; 2
    480e:	fc 01       	movw	r30, r24
    4810:	e2 0f       	add	r30, r18
    4812:	f3 1f       	adc	r31, r19
    4814:	80 81       	ld	r24, Z
    4816:	80 5d       	subi	r24, 0xD0	; 208
    4818:	0e 94 51 20 	call	0x40a2	; 0x40a2 <HAL_VidHCLCD_4BitModeWriteChar>
			Loc_sint8Count--;
    481c:	89 81       	ldd	r24, Y+1	; 0x01
    481e:	81 50       	subi	r24, 0x01	; 1
    4820:	89 83       	std	Y+1, r24	; 0x01
			Loc_uint8Digits[Loc_sint8Count]=Copy_uint32Number%10;
			Copy_uint32Number/=10;
			Loc_sint8Count++;
		}
		Loc_sint8Count-=1;
		while(Loc_sint8Count>=0)
    4822:	89 81       	ldd	r24, Y+1	; 0x01
    4824:	88 23       	and	r24, r24
    4826:	64 f7       	brge	.-40     	; 0x4800 <HAL_VidHCLCD_4BitModeWriteNumber+0xb0>
		{
			HAL_VidHCLCD_4BitModeWriteChar(Loc_uint8Digits[Loc_sint8Count]+48);
			Loc_sint8Count--;
		}
	}
}
    4828:	65 96       	adiw	r28, 0x15	; 21
    482a:	0f b6       	in	r0, 0x3f	; 63
    482c:	f8 94       	cli
    482e:	de bf       	out	0x3e, r29	; 62
    4830:	0f be       	out	0x3f, r0	; 63
    4832:	cd bf       	out	0x3d, r28	; 61
    4834:	cf 91       	pop	r28
    4836:	df 91       	pop	r29
    4838:	1f 91       	pop	r17
    483a:	0f 91       	pop	r16
    483c:	08 95       	ret

0000483e <HAL_VidHCLCD_4BitModeSetPosition>:
void HAL_VidHCLCD_4BitModeSetPosition(uint8 Copy_uint8LineNum,uint8 Copy_uint8Position)
{
    483e:	df 93       	push	r29
    4840:	cf 93       	push	r28
    4842:	00 d0       	rcall	.+0      	; 0x4844 <HAL_VidHCLCD_4BitModeSetPosition+0x6>
    4844:	cd b7       	in	r28, 0x3d	; 61
    4846:	de b7       	in	r29, 0x3e	; 62
    4848:	89 83       	std	Y+1, r24	; 0x01
    484a:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_uint8LineNum==1)
    484c:	89 81       	ldd	r24, Y+1	; 0x01
    484e:	81 30       	cpi	r24, 0x01	; 1
    4850:	29 f4       	brne	.+10     	; 0x485c <HAL_VidHCLCD_4BitModeSetPosition+0x1e>
	{
		HAL_VidHCLCD_4BitModeSendCommand(128+Copy_uint8Position);
    4852:	8a 81       	ldd	r24, Y+2	; 0x02
    4854:	80 58       	subi	r24, 0x80	; 128
    4856:	0e 94 6c 23 	call	0x46d8	; 0x46d8 <HAL_VidHCLCD_4BitModeSendCommand>
    485a:	07 c0       	rjmp	.+14     	; 0x486a <HAL_VidHCLCD_4BitModeSetPosition+0x2c>
	}
	else if(Copy_uint8LineNum==2)
    485c:	89 81       	ldd	r24, Y+1	; 0x01
    485e:	82 30       	cpi	r24, 0x02	; 2
    4860:	21 f4       	brne	.+8      	; 0x486a <HAL_VidHCLCD_4BitModeSetPosition+0x2c>
	{
		HAL_VidHCLCD_4BitModeSendCommand(192+Copy_uint8Position);
    4862:	8a 81       	ldd	r24, Y+2	; 0x02
    4864:	80 54       	subi	r24, 0x40	; 64
    4866:	0e 94 6c 23 	call	0x46d8	; 0x46d8 <HAL_VidHCLCD_4BitModeSendCommand>
	}
	else
	{
		/*Do Nothing*/
	}
}
    486a:	0f 90       	pop	r0
    486c:	0f 90       	pop	r0
    486e:	cf 91       	pop	r28
    4870:	df 91       	pop	r29
    4872:	08 95       	ret

00004874 <HBUTTON_Errorstate_Button_Init>:
#include"../../LIB/LBIT_MATH.h"
#include"../../MCAL/MDIO/MDIO_Interface.h"
#include"HBUTTON_Interface.h"

ErrorState  HBUTTON_Errorstate_Button_Init(Button_t* copy_Button_object)
{
    4874:	df 93       	push	r29
    4876:	cf 93       	push	r28
    4878:	00 d0       	rcall	.+0      	; 0x487a <HBUTTON_Errorstate_Button_Init+0x6>
    487a:	0f 92       	push	r0
    487c:	cd b7       	in	r28, 0x3d	; 61
    487e:	de b7       	in	r29, 0x3e	; 62
    4880:	9b 83       	std	Y+3, r25	; 0x03
    4882:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState Loc_ErrorState_Error_state=OK;
    4884:	81 e0       	ldi	r24, 0x01	; 1
    4886:	89 83       	std	Y+1, r24	; 0x01
		Loc_ErrorState_Error_state = MDIO_Errorstate_SetPinDirection(copy_Button_object->ButtonPort,copy_Button_object->ButtonPin,PIN_INPUT);
    4888:	ea 81       	ldd	r30, Y+2	; 0x02
    488a:	fb 81       	ldd	r31, Y+3	; 0x03
    488c:	80 81       	ld	r24, Z
    488e:	ea 81       	ldd	r30, Y+2	; 0x02
    4890:	fb 81       	ldd	r31, Y+3	; 0x03
    4892:	91 81       	ldd	r25, Z+1	; 0x01
    4894:	69 2f       	mov	r22, r25
    4896:	40 e0       	ldi	r20, 0x00	; 0
    4898:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <MDIO_Errorstate_SetPinDirection>
    489c:	89 83       	std	Y+1, r24	; 0x01
			return Loc_ErrorState_Error_state;
    489e:	89 81       	ldd	r24, Y+1	; 0x01
}
    48a0:	0f 90       	pop	r0
    48a2:	0f 90       	pop	r0
    48a4:	0f 90       	pop	r0
    48a6:	cf 91       	pop	r28
    48a8:	df 91       	pop	r29
    48aa:	08 95       	ret

000048ac <HBUTTON_Errorstate_Button_Pressed>:
ErrorState  HBUTTON_Errorstate_Button_Pressed(Button_t* copy_Button_object)
{
    48ac:	df 93       	push	r29
    48ae:	cf 93       	push	r28
    48b0:	00 d0       	rcall	.+0      	; 0x48b2 <HBUTTON_Errorstate_Button_Pressed+0x6>
    48b2:	00 d0       	rcall	.+0      	; 0x48b4 <HBUTTON_Errorstate_Button_Pressed+0x8>
    48b4:	cd b7       	in	r28, 0x3d	; 61
    48b6:	de b7       	in	r29, 0x3e	; 62
    48b8:	9c 83       	std	Y+4, r25	; 0x04
    48ba:	8b 83       	std	Y+3, r24	; 0x03

	uint8 Loc_Button_State;
	ErrorState Loc_ErrorState_Error_state=OK;
    48bc:	81 e0       	ldi	r24, 0x01	; 1
    48be:	89 83       	std	Y+1, r24	; 0x01
	if((copy_Button_object->ButtonActiveState)==PULL_DOWN)/*check 3la button activate state*/
    48c0:	eb 81       	ldd	r30, Y+3	; 0x03
    48c2:	fc 81       	ldd	r31, Y+4	; 0x04
    48c4:	82 81       	ldd	r24, Z+2	; 0x02
    48c6:	88 23       	and	r24, r24
    48c8:	71 f4       	brne	.+28     	; 0x48e6 <HBUTTON_Errorstate_Button_Pressed+0x3a>
	{
		/*pull down */
		MDIO_Errorstate_GetPinValue(copy_Button_object->ButtonPort,copy_Button_object->ButtonPin,&Loc_Button_State);
    48ca:	eb 81       	ldd	r30, Y+3	; 0x03
    48cc:	fc 81       	ldd	r31, Y+4	; 0x04
    48ce:	80 81       	ld	r24, Z
    48d0:	eb 81       	ldd	r30, Y+3	; 0x03
    48d2:	fc 81       	ldd	r31, Y+4	; 0x04
    48d4:	91 81       	ldd	r25, Z+1	; 0x01
    48d6:	9e 01       	movw	r18, r28
    48d8:	2e 5f       	subi	r18, 0xFE	; 254
    48da:	3f 4f       	sbci	r19, 0xFF	; 255
    48dc:	69 2f       	mov	r22, r25
    48de:	a9 01       	movw	r20, r18
    48e0:	0e 94 71 11 	call	0x22e2	; 0x22e2 <MDIO_Errorstate_GetPinValue>
    48e4:	14 c0       	rjmp	.+40     	; 0x490e <HBUTTON_Errorstate_Button_Pressed+0x62>
	}
	else if((copy_Button_object->ButtonActiveState)==PULL_UP)
    48e6:	eb 81       	ldd	r30, Y+3	; 0x03
    48e8:	fc 81       	ldd	r31, Y+4	; 0x04
    48ea:	82 81       	ldd	r24, Z+2	; 0x02
    48ec:	81 30       	cpi	r24, 0x01	; 1
    48ee:	71 f4       	brne	.+28     	; 0x490c <HBUTTON_Errorstate_Button_Pressed+0x60>
	{
		/*internal pull up activate*/
		MDIO_Errorstate_GetPinValue(copy_Button_object->ButtonPort,copy_Button_object->ButtonPin,&Loc_Button_State);
    48f0:	eb 81       	ldd	r30, Y+3	; 0x03
    48f2:	fc 81       	ldd	r31, Y+4	; 0x04
    48f4:	80 81       	ld	r24, Z
    48f6:	eb 81       	ldd	r30, Y+3	; 0x03
    48f8:	fc 81       	ldd	r31, Y+4	; 0x04
    48fa:	91 81       	ldd	r25, Z+1	; 0x01
    48fc:	9e 01       	movw	r18, r28
    48fe:	2e 5f       	subi	r18, 0xFE	; 254
    4900:	3f 4f       	sbci	r19, 0xFF	; 255
    4902:	69 2f       	mov	r22, r25
    4904:	a9 01       	movw	r20, r18
    4906:	0e 94 71 11 	call	0x22e2	; 0x22e2 <MDIO_Errorstate_GetPinValue>
    490a:	01 c0       	rjmp	.+2      	; 0x490e <HBUTTON_Errorstate_Button_Pressed+0x62>
	}
	else
	{
		Loc_ErrorState_Error_state=NOK;
    490c:	19 82       	std	Y+1, r1	; 0x01
	}

return Loc_ErrorState_Error_state;
    490e:	89 81       	ldd	r24, Y+1	; 0x01
}
    4910:	0f 90       	pop	r0
    4912:	0f 90       	pop	r0
    4914:	0f 90       	pop	r0
    4916:	0f 90       	pop	r0
    4918:	cf 91       	pop	r28
    491a:	df 91       	pop	r29
    491c:	08 95       	ret

0000491e <main>:

#define F_CPU 16000000UL
#include<util/delay.h>

int main(void)
{
    491e:	df 93       	push	r29
    4920:	cf 93       	push	r28
    4922:	00 d0       	rcall	.+0      	; 0x4924 <main+0x6>
    4924:	cd b7       	in	r28, 0x3d	; 61
    4926:	de b7       	in	r29, 0x3e	; 62
	/*LCD PIN initialize*/
	MDIO_Errorstate_SetPinDirection(MDIO_PORTA,PIN4,PIN_OUTPUT);
    4928:	80 e0       	ldi	r24, 0x00	; 0
    492a:	64 e0       	ldi	r22, 0x04	; 4
    492c:	41 e0       	ldi	r20, 0x01	; 1
    492e:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <MDIO_Errorstate_SetPinDirection>
	MDIO_Errorstate_SetPinDirection(MDIO_PORTA,PIN5,PIN_OUTPUT);
    4932:	80 e0       	ldi	r24, 0x00	; 0
    4934:	65 e0       	ldi	r22, 0x05	; 5
    4936:	41 e0       	ldi	r20, 0x01	; 1
    4938:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <MDIO_Errorstate_SetPinDirection>
	MDIO_Errorstate_SetPinDirection(MDIO_PORTA,PIN6,PIN_OUTPUT);
    493c:	80 e0       	ldi	r24, 0x00	; 0
    493e:	66 e0       	ldi	r22, 0x06	; 6
    4940:	41 e0       	ldi	r20, 0x01	; 1
    4942:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <MDIO_Errorstate_SetPinDirection>
	MDIO_Errorstate_SetPinDirection(MDIO_PORTA,PIN7,PIN_OUTPUT);
    4946:	80 e0       	ldi	r24, 0x00	; 0
    4948:	67 e0       	ldi	r22, 0x07	; 7
    494a:	41 e0       	ldi	r20, 0x01	; 1
    494c:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <MDIO_Errorstate_SetPinDirection>
	MDIO_Errorstate_SetPinDirection(HCLCD_ControlPort,RS_PIN,PIN_OUTPUT);
    4950:	81 e0       	ldi	r24, 0x01	; 1
    4952:	61 e0       	ldi	r22, 0x01	; 1
    4954:	41 e0       	ldi	r20, 0x01	; 1
    4956:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <MDIO_Errorstate_SetPinDirection>
	MDIO_Errorstate_SetPinDirection(HCLCD_ControlPort,RW_PIN,PIN_OUTPUT);
    495a:	81 e0       	ldi	r24, 0x01	; 1
    495c:	62 e0       	ldi	r22, 0x02	; 2
    495e:	41 e0       	ldi	r20, 0x01	; 1
    4960:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <MDIO_Errorstate_SetPinDirection>
	MDIO_Errorstate_SetPinDirection(HCLCD_ControlPort,E_PIN,PIN_OUTPUT);
    4964:	81 e0       	ldi	r24, 0x01	; 1
    4966:	63 e0       	ldi	r22, 0x03	; 3
    4968:	41 e0       	ldi	r20, 0x01	; 1
    496a:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <MDIO_Errorstate_SetPinDirection>
	/*LCD int*/
	HAL_VidHCLCD_4BitModeInit();
    496e:	0e 94 76 21 	call	0x42ec	; 0x42ec <HAL_VidHCLCD_4BitModeInit>
	HAL_VidHCLCD_4BitModeSetPosition(1,0);
    4972:	81 e0       	ldi	r24, 0x01	; 1
    4974:	60 e0       	ldi	r22, 0x00	; 0
    4976:	0e 94 1f 24 	call	0x483e	; 0x483e <HAL_VidHCLCD_4BitModeSetPosition>
	HAL_VidHCLCD_4BitModeWriteString((uint8*)"Tempread");
    497a:	80 e6       	ldi	r24, 0x60	; 96
    497c:	90 e0       	ldi	r25, 0x00	; 0
    497e:	0e 94 7f 23 	call	0x46fe	; 0x46fe <HAL_VidHCLCD_4BitModeWriteString>

	/*Set ADC channel 1 as input*/
	MDIO_Errorstate_SetPinDirection(MDIO_PORTA,PIN1,PIN_INPUT);
    4982:	80 e0       	ldi	r24, 0x00	; 0
    4984:	61 e0       	ldi	r22, 0x01	; 1
    4986:	40 e0       	ldi	r20, 0x00	; 0
    4988:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <MDIO_Errorstate_SetPinDirection>
	HTEMP_VidInit();
    498c:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <HTEMP_VidInit>
	uint16 Loc_uint8Temp=0;
    4990:	1a 82       	std	Y+2, r1	; 0x02
    4992:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		Loc_uint8Temp=HTEMP_uintGetTemp(1);
    4994:	81 e0       	ldi	r24, 0x01	; 1
    4996:	0e 94 2f 17 	call	0x2e5e	; 0x2e5e <HTEMP_uintGetTemp>
    499a:	88 2f       	mov	r24, r24
    499c:	90 e0       	ldi	r25, 0x00	; 0
    499e:	9a 83       	std	Y+2, r25	; 0x02
    49a0:	89 83       	std	Y+1, r24	; 0x01
		HAL_VidHCLCD_4BitModeSetPosition(2,0);
    49a2:	82 e0       	ldi	r24, 0x02	; 2
    49a4:	60 e0       	ldi	r22, 0x00	; 0
    49a6:	0e 94 1f 24 	call	0x483e	; 0x483e <HAL_VidHCLCD_4BitModeSetPosition>
		HAL_VidHCLCD_4BitModeWriteNumber(Loc_uint8Temp);
    49aa:	89 81       	ldd	r24, Y+1	; 0x01
    49ac:	9a 81       	ldd	r25, Y+2	; 0x02
    49ae:	cc 01       	movw	r24, r24
    49b0:	a0 e0       	ldi	r26, 0x00	; 0
    49b2:	b0 e0       	ldi	r27, 0x00	; 0
    49b4:	bc 01       	movw	r22, r24
    49b6:	cd 01       	movw	r24, r26
    49b8:	0e 94 a8 23 	call	0x4750	; 0x4750 <HAL_VidHCLCD_4BitModeWriteNumber>
    49bc:	eb cf       	rjmp	.-42     	; 0x4994 <main+0x76>

000049be <__mulsi3>:
    49be:	62 9f       	mul	r22, r18
    49c0:	d0 01       	movw	r26, r0
    49c2:	73 9f       	mul	r23, r19
    49c4:	f0 01       	movw	r30, r0
    49c6:	82 9f       	mul	r24, r18
    49c8:	e0 0d       	add	r30, r0
    49ca:	f1 1d       	adc	r31, r1
    49cc:	64 9f       	mul	r22, r20
    49ce:	e0 0d       	add	r30, r0
    49d0:	f1 1d       	adc	r31, r1
    49d2:	92 9f       	mul	r25, r18
    49d4:	f0 0d       	add	r31, r0
    49d6:	83 9f       	mul	r24, r19
    49d8:	f0 0d       	add	r31, r0
    49da:	74 9f       	mul	r23, r20
    49dc:	f0 0d       	add	r31, r0
    49de:	65 9f       	mul	r22, r21
    49e0:	f0 0d       	add	r31, r0
    49e2:	99 27       	eor	r25, r25
    49e4:	72 9f       	mul	r23, r18
    49e6:	b0 0d       	add	r27, r0
    49e8:	e1 1d       	adc	r30, r1
    49ea:	f9 1f       	adc	r31, r25
    49ec:	63 9f       	mul	r22, r19
    49ee:	b0 0d       	add	r27, r0
    49f0:	e1 1d       	adc	r30, r1
    49f2:	f9 1f       	adc	r31, r25
    49f4:	bd 01       	movw	r22, r26
    49f6:	cf 01       	movw	r24, r30
    49f8:	11 24       	eor	r1, r1
    49fa:	08 95       	ret

000049fc <__udivmodhi4>:
    49fc:	aa 1b       	sub	r26, r26
    49fe:	bb 1b       	sub	r27, r27
    4a00:	51 e1       	ldi	r21, 0x11	; 17
    4a02:	07 c0       	rjmp	.+14     	; 0x4a12 <__udivmodhi4_ep>

00004a04 <__udivmodhi4_loop>:
    4a04:	aa 1f       	adc	r26, r26
    4a06:	bb 1f       	adc	r27, r27
    4a08:	a6 17       	cp	r26, r22
    4a0a:	b7 07       	cpc	r27, r23
    4a0c:	10 f0       	brcs	.+4      	; 0x4a12 <__udivmodhi4_ep>
    4a0e:	a6 1b       	sub	r26, r22
    4a10:	b7 0b       	sbc	r27, r23

00004a12 <__udivmodhi4_ep>:
    4a12:	88 1f       	adc	r24, r24
    4a14:	99 1f       	adc	r25, r25
    4a16:	5a 95       	dec	r21
    4a18:	a9 f7       	brne	.-22     	; 0x4a04 <__udivmodhi4_loop>
    4a1a:	80 95       	com	r24
    4a1c:	90 95       	com	r25
    4a1e:	bc 01       	movw	r22, r24
    4a20:	cd 01       	movw	r24, r26
    4a22:	08 95       	ret

00004a24 <__udivmodsi4>:
    4a24:	a1 e2       	ldi	r26, 0x21	; 33
    4a26:	1a 2e       	mov	r1, r26
    4a28:	aa 1b       	sub	r26, r26
    4a2a:	bb 1b       	sub	r27, r27
    4a2c:	fd 01       	movw	r30, r26
    4a2e:	0d c0       	rjmp	.+26     	; 0x4a4a <__udivmodsi4_ep>

00004a30 <__udivmodsi4_loop>:
    4a30:	aa 1f       	adc	r26, r26
    4a32:	bb 1f       	adc	r27, r27
    4a34:	ee 1f       	adc	r30, r30
    4a36:	ff 1f       	adc	r31, r31
    4a38:	a2 17       	cp	r26, r18
    4a3a:	b3 07       	cpc	r27, r19
    4a3c:	e4 07       	cpc	r30, r20
    4a3e:	f5 07       	cpc	r31, r21
    4a40:	20 f0       	brcs	.+8      	; 0x4a4a <__udivmodsi4_ep>
    4a42:	a2 1b       	sub	r26, r18
    4a44:	b3 0b       	sbc	r27, r19
    4a46:	e4 0b       	sbc	r30, r20
    4a48:	f5 0b       	sbc	r31, r21

00004a4a <__udivmodsi4_ep>:
    4a4a:	66 1f       	adc	r22, r22
    4a4c:	77 1f       	adc	r23, r23
    4a4e:	88 1f       	adc	r24, r24
    4a50:	99 1f       	adc	r25, r25
    4a52:	1a 94       	dec	r1
    4a54:	69 f7       	brne	.-38     	; 0x4a30 <__udivmodsi4_loop>
    4a56:	60 95       	com	r22
    4a58:	70 95       	com	r23
    4a5a:	80 95       	com	r24
    4a5c:	90 95       	com	r25
    4a5e:	9b 01       	movw	r18, r22
    4a60:	ac 01       	movw	r20, r24
    4a62:	bd 01       	movw	r22, r26
    4a64:	cf 01       	movw	r24, r30
    4a66:	08 95       	ret

00004a68 <__prologue_saves__>:
    4a68:	2f 92       	push	r2
    4a6a:	3f 92       	push	r3
    4a6c:	4f 92       	push	r4
    4a6e:	5f 92       	push	r5
    4a70:	6f 92       	push	r6
    4a72:	7f 92       	push	r7
    4a74:	8f 92       	push	r8
    4a76:	9f 92       	push	r9
    4a78:	af 92       	push	r10
    4a7a:	bf 92       	push	r11
    4a7c:	cf 92       	push	r12
    4a7e:	df 92       	push	r13
    4a80:	ef 92       	push	r14
    4a82:	ff 92       	push	r15
    4a84:	0f 93       	push	r16
    4a86:	1f 93       	push	r17
    4a88:	cf 93       	push	r28
    4a8a:	df 93       	push	r29
    4a8c:	cd b7       	in	r28, 0x3d	; 61
    4a8e:	de b7       	in	r29, 0x3e	; 62
    4a90:	ca 1b       	sub	r28, r26
    4a92:	db 0b       	sbc	r29, r27
    4a94:	0f b6       	in	r0, 0x3f	; 63
    4a96:	f8 94       	cli
    4a98:	de bf       	out	0x3e, r29	; 62
    4a9a:	0f be       	out	0x3f, r0	; 63
    4a9c:	cd bf       	out	0x3d, r28	; 61
    4a9e:	09 94       	ijmp

00004aa0 <__epilogue_restores__>:
    4aa0:	2a 88       	ldd	r2, Y+18	; 0x12
    4aa2:	39 88       	ldd	r3, Y+17	; 0x11
    4aa4:	48 88       	ldd	r4, Y+16	; 0x10
    4aa6:	5f 84       	ldd	r5, Y+15	; 0x0f
    4aa8:	6e 84       	ldd	r6, Y+14	; 0x0e
    4aaa:	7d 84       	ldd	r7, Y+13	; 0x0d
    4aac:	8c 84       	ldd	r8, Y+12	; 0x0c
    4aae:	9b 84       	ldd	r9, Y+11	; 0x0b
    4ab0:	aa 84       	ldd	r10, Y+10	; 0x0a
    4ab2:	b9 84       	ldd	r11, Y+9	; 0x09
    4ab4:	c8 84       	ldd	r12, Y+8	; 0x08
    4ab6:	df 80       	ldd	r13, Y+7	; 0x07
    4ab8:	ee 80       	ldd	r14, Y+6	; 0x06
    4aba:	fd 80       	ldd	r15, Y+5	; 0x05
    4abc:	0c 81       	ldd	r16, Y+4	; 0x04
    4abe:	1b 81       	ldd	r17, Y+3	; 0x03
    4ac0:	aa 81       	ldd	r26, Y+2	; 0x02
    4ac2:	b9 81       	ldd	r27, Y+1	; 0x01
    4ac4:	ce 0f       	add	r28, r30
    4ac6:	d1 1d       	adc	r29, r1
    4ac8:	0f b6       	in	r0, 0x3f	; 63
    4aca:	f8 94       	cli
    4acc:	de bf       	out	0x3e, r29	; 62
    4ace:	0f be       	out	0x3f, r0	; 63
    4ad0:	cd bf       	out	0x3d, r28	; 61
    4ad2:	ed 01       	movw	r28, r26
    4ad4:	08 95       	ret

00004ad6 <_exit>:
    4ad6:	f8 94       	cli

00004ad8 <__stop_program>:
    4ad8:	ff cf       	rjmp	.-2      	; 0x4ad8 <__stop_program>
